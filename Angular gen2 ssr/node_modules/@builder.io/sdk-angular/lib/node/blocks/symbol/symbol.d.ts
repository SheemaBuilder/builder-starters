import { ElementRef, Renderer2, SimpleChanges } from "@angular/core";
import DynamicDiv from "../../components/dynamic-div";
import type { SymbolProps } from "./symbol.types";
import * as i0 from "@angular/core";
export default class BuilderSymbol {
    private renderer;
    symbol: SymbolProps["symbol"];
    builderContext: SymbolProps["builderContext"];
    builderBlock: SymbolProps["builderBlock"];
    builderComponents: SymbolProps["builderComponents"];
    attributes: SymbolProps["attributes"];
    dynamic: SymbolProps["dynamic"];
    builderLinkComponent: SymbolProps["builderLinkComponent"];
    elRef0: ElementRef;
    _listenerFns: Map<string, () => void>;
    get blocksWrapper(): typeof DynamicDiv;
    get contentWrapper(): typeof DynamicDiv;
    get className(): string;
    contentToUse: any;
    setContent(): void;
    node_0_ContentVariants: any;
    node_1_ContentVariants: any;
    node_2_ContentVariants: any;
    elRef0_state_0: any;
    setAttributes(el: HTMLElement, value: any, changes?: any): void;
    elRef0_state_1: any;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BuilderSymbol, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BuilderSymbol, "builder-symbol", never, { "symbol": { "alias": "symbol"; "required": false; }; "builderContext": { "alias": "builderContext"; "required": false; }; "builderBlock": { "alias": "builderBlock"; "required": false; }; "builderComponents": { "alias": "builderComponents"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "dynamic": { "alias": "dynamic"; "required": false; }; "builderLinkComponent": { "alias": "builderLinkComponent"; "required": false; }; }, {}, never, never, true, never>;
}

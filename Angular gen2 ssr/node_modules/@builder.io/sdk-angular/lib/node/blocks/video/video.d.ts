import { ElementRef, Renderer2, SimpleChanges } from "@angular/core";
import type { VideoProps } from "./video.types";
import * as i0 from "@angular/core";
export default class BuilderVideo {
    private renderer;
    lazyLoad: VideoProps["lazyLoad"];
    attributes: VideoProps["attributes"];
    fit: VideoProps["fit"];
    position: VideoProps["position"];
    aspectRatio: VideoProps["aspectRatio"];
    video: VideoProps["video"];
    fitContent: VideoProps["fitContent"];
    builderBlock: VideoProps["builderBlock"];
    autoPlay: VideoProps["autoPlay"];
    muted: VideoProps["muted"];
    controls: VideoProps["controls"];
    loop: VideoProps["loop"];
    playsInline: VideoProps["playsInline"];
    preload: VideoProps["preload"];
    posterImage: VideoProps["posterImage"];
    videoRef: ElementRef;
    elRef0: ElementRef;
    elRef1: ElementRef;
    _listenerFns: Map<string, () => void>;
    get videoProps(): {
        playsInline?: boolean;
        loop?: boolean;
        controls?: boolean;
        muted?: boolean;
        autoPlay?: boolean;
    };
    get spreadProps(): {
        playsInline?: boolean;
        loop?: boolean;
        controls?: boolean;
        muted?: boolean;
        autoPlay?: boolean;
    };
    lazyVideoObserver: any;
    node_0_div: any;
    node_1_video: any;
    node_2_source: any;
    node_3_Show: any;
    node_4_div: any;
    node_5_div: any;
    node_6_div: any;
    setAttributes(el: HTMLElement, value: any, changes?: any): void;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BuilderVideo, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BuilderVideo, "builder-video", never, { "lazyLoad": { "alias": "lazyLoad"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "fit": { "alias": "fit"; "required": false; }; "position": { "alias": "position"; "required": false; }; "aspectRatio": { "alias": "aspectRatio"; "required": false; }; "video": { "alias": "video"; "required": false; }; "fitContent": { "alias": "fitContent"; "required": false; }; "builderBlock": { "alias": "builderBlock"; "required": false; }; "autoPlay": { "alias": "autoPlay"; "required": false; }; "muted": { "alias": "muted"; "required": false; }; "controls": { "alias": "controls"; "required": false; }; "loop": { "alias": "loop"; "required": false; }; "playsInline": { "alias": "playsInline"; "required": false; }; "preload": { "alias": "preload"; "required": false; }; "posterImage": { "alias": "posterImage"; "required": false; }; }, {}, never, ["*", "*"], true, never>;
}

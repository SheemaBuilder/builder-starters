import { ElementRef, Renderer2, SimpleChanges } from "@angular/core";
import type { SizeName } from "../../constants/device-sizes";
import type { Dictionary } from "../../types/typescript";
import type { Column, ColumnProps } from "./columns.types";
import * as i0 from "@angular/core";
type CSSVal = string | number;
export default class Columns {
    private renderer;
    TARGET: import("../../types/targets").Target;
    builderBlock: ColumnProps["builderBlock"];
    space: ColumnProps["space"];
    columns: ColumnProps["columns"];
    stackColumnsAt: ColumnProps["stackColumnsAt"];
    builderLinkComponent: ColumnProps["builderLinkComponent"];
    reverseColumnsWhenStacked: ColumnProps["reverseColumnsWhenStacked"];
    builderContext: ColumnProps["builderContext"];
    builderComponents: ColumnProps["builderComponents"];
    elRef0: ElementRef;
    _listenerFns: Map<string, () => void>;
    get gutterSize(): number;
    get cols(): Column[];
    get stackAt(): "never" | "tablet" | "mobile";
    getTagName(column: Column): any;
    getWidth(index: number): number;
    getColumnCssWidth(index: number): string;
    getTabletStyle({ stackedStyle, desktopStyle, }: {
        stackedStyle: CSSVal;
        desktopStyle: CSSVal;
    }): CSSVal;
    getMobileStyle({ stackedStyle, desktopStyle, }: {
        stackedStyle: CSSVal;
        desktopStyle: CSSVal;
    }): CSSVal;
    get flexDir(): "row" | "column-reverse" | "column";
    columnsCssVars(): Dictionary<string>;
    columnCssVars(index: number): Dictionary<string>;
    getWidthForBreakpointSize(size: SizeName): number;
    columnsStyles(): string;
    getAttributes(column: any, index: number): {
        style: string | Partial<CSSStyleDeclaration>;
        href?: any;
    };
    node_0_div: any;
    node_1_div: any;
    node_2_InlinedStyles: any;
    node_3_DynamicRenderer: (column: any, index: any) => any;
    node_4_DynamicRenderer: (column: any, index: any) => {};
    node_5_DynamicRenderer: (column: any, index: any) => {
        style: string | Partial<CSSStyleDeclaration>;
        href?: any;
    };
    node_6_Blocks: (column: any, index: any) => string;
    node_7_Blocks: (column: any, index: any) => {
        flexGrow: string;
    };
    elRef0_state_0: any;
    setAttributes(el: HTMLElement, value: any, changes?: any): void;
    trackByColumn0(index: any, column: any): any;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<Columns, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<Columns, "columns", never, { "builderBlock": { "alias": "builderBlock"; "required": false; }; "space": { "alias": "space"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "stackColumnsAt": { "alias": "stackColumnsAt"; "required": false; }; "builderLinkComponent": { "alias": "builderLinkComponent"; "required": false; }; "reverseColumnsWhenStacked": { "alias": "reverseColumnsWhenStacked"; "required": false; }; "builderContext": { "alias": "builderContext"; "required": false; }; "builderComponents": { "alias": "builderComponents"; "required": false; }; }, {}, never, never, true, never>;
}
export {};

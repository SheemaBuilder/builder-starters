import { ElementRef, Renderer2, SimpleChanges } from "@angular/core";
import type { BuilderComponentsProp, BuilderDataProps } from "../../types/builder-props";
import * as i0 from "@angular/core";
export type DropzoneProps = BuilderDataProps & BuilderComponentsProp & {
    name: string;
    attributes: any;
};
export default class BuilderSlot {
    private renderer;
    builderContext: DropzoneProps["builderContext"];
    name: DropzoneProps["name"];
    builderComponents: DropzoneProps["builderComponents"];
    elRef0: ElementRef;
    _listenerFns: Map<string, () => void>;
    node_0_div: any;
    node_1_div: any;
    node_2_Blocks: any;
    node_3_Blocks: any;
    node_4_Blocks: any;
    setAttributes(el: HTMLElement, value: any, changes?: any): void;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BuilderSlot, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BuilderSlot, "builder-slot", never, { "builderContext": { "alias": "builderContext"; "required": false; }; "name": { "alias": "name"; "required": false; }; "builderComponents": { "alias": "builderComponents"; "required": false; }; }, {}, never, never, true, never>;
}

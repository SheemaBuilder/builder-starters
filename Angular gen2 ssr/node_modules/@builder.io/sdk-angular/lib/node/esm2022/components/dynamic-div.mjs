import { CommonModule } from '@angular/common';
// fails because type imports cannot be injected
// eslint-disable-next-line @typescript-eslint/consistent-type-imports
import { Component, ElementRef, Input, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
export default class DynamicDiv {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    ngAfterViewInit() {
        const el = this.v?.nativeElement;
        if (!el) {
            return;
        }
        this.setAttributes(el, this.attributes);
        this.setAttributes(el, this.actionAttributes);
        this.setAttributes(el, this.showContentProps);
        this.setAttribute(el, 'class', [this.classProp ?? '', this.className ?? ''].join(' ').trim());
        this.handleStyleProp(el, this.style);
        this.setAttribute(el, 'builder-parent-id', this.builderParentId);
        this.setAttribute(el, 'builder-path', this.builderPath);
        this.setAttribute(el, 'builder-model', this.builderModel);
        this.setAttribute(el, 'builder-content-id', this.builderContentId);
        this.setAttribute(el, 'hidden', this.hidden);
        this.setAttribute(el, 'aria-hidden', this.ariaHidden);
    }
    ngOnChanges(changes) {
        const el = this.v?.nativeElement;
        if (!el) {
            return;
        }
        if (Object.keys(changes).length === 0) {
            return;
        }
        if (changes.attributes) {
            this.setAttributes(el, this.attributes, changes.attributes.currentValue);
        }
        if (changes.actionAttributes) {
            this.setAttributes(el, this.actionAttributes, changes.actionAttributes.currentValue);
        }
        if (changes.showContentProps) {
            this.setAttributes(el, this.showContentProps, changes.showContentProps.currentValue);
        }
        if (changes.classProp || changes.className) {
            this.setAttribute(el, 'class', [this.classProp ?? '', this.className ?? ''].join(' ').trim());
        }
        if (changes.style)
            this.handleStyleProp(el, this.style);
        if (changes.builderParentId)
            this.setAttribute(el, 'builder-parent-id', this.builderParentId);
        if (changes.builderPath)
            this.setAttribute(el, 'builder-path', this.builderPath);
        if (changes.builderModel)
            this.setAttribute(el, 'builder-model', this.builderModel);
        if (changes.builderContentId)
            this.setAttribute(el, 'builder-content-id', this.builderContentId);
        if (changes.hidden)
            this.setAttribute(el, 'hidden', this.hidden);
        if (changes.ariaHidden)
            this.setAttribute(el, 'aria-hidden', this.ariaHidden);
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        if (!target)
            return;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    setAttribute(el, key, value) {
        if (value) {
            this.renderer.setAttribute(el, key, value);
        }
    }
    handleStyleProp(el, style) {
        if (typeof style === 'object') {
            Object.entries(style).forEach(([key, value]) => {
                this.renderer.setStyle(el, key, value);
            });
        }
        else {
            this.renderer.setAttribute(el, 'style', style);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach((fn) => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicDiv, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicDiv, isStandalone: true, selector: "dynamic-div, DynamicDiv", inputs: { attributes: "attributes", actionAttributes: "actionAttributes", BlockWrapperProps: "BlockWrapperProps", builderPath: ["builder-path", "builderPath"], builderParentId: ["builder-parent-id", "builderParentId"], BlocksWrapperProps: "BlocksWrapperProps", contentWrapperProps: "contentWrapperProps", builderModel: ["builder-model", "builderModel"], builderContentId: ["builder-content-id", "builderContentId"], ref: "ref", classProp: ["class", "classProp"], style: "style", showContentProps: "showContentProps", onClick: "onClick", onMouseEnter: "onMouseEnter", onKeyPress: "onKeyPress", hidden: "hidden", ariaHidden: ["aria-hidden", "ariaHidden"], className: "className" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: `
    <div
      #v
      (click)="onClick && onClick($event)"
      (mouseenter)="onMouseEnter && onMouseEnter($event)"
    >
      <ng-content></ng-content>
    </div>
  `, isInline: true, styles: [":host{display:contents}\n", ".props-blocks-wrapper{display:flex;flex-direction:column;align-items:stretch}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicDiv, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-div, DynamicDiv', template: `
    <div
      #v
      (click)="onClick && onClick($event)"
      (mouseenter)="onMouseEnter && onMouseEnter($event)"
    >
      <ng-content></ng-content>
    </div>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n", ".props-blocks-wrapper{display:flex;flex-direction:column;align-items:stretch}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], BlockWrapperProps: [{
                type: Input
            }], builderPath: [{
                type: Input,
                args: ['builder-path']
            }], builderParentId: [{
                type: Input,
                args: ['builder-parent-id']
            }], BlocksWrapperProps: [{
                type: Input
            }], contentWrapperProps: [{
                type: Input
            }], builderModel: [{
                type: Input,
                args: ['builder-model']
            }], builderContentId: [{
                type: Input,
                args: ['builder-content-id']
            }], ref: [{
                type: Input
            }], classProp: [{
                type: Input,
                args: ['class']
            }], style: [{
                type: Input
            }], showContentProps: [{
                type: Input
            }], onClick: [{
                type: Input
            }], onMouseEnter: [{
                type: Input
            }], onKeyPress: [{
                type: Input
            }], hidden: [{
                type: Input
            }], ariaHidden: [{
                type: Input,
                args: ['aria-hidden']
            }], className: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
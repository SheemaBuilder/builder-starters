/**
 * WARNING: This file contains functions that get stringified and inlined into the HTML at build-time.
 * They cannot import anything.
 */
/**
 * For more information on how this works,
 * see our [SSR A/B Test Docs](https://github.com/BuilderIO/builder/tree/main/packages/sdks/src/SSR_AB_TEST.md)
 */
/**
 * For more information on how this works,
 * see our [SSR A/B Test Docs](https://github.com/BuilderIO/builder/tree/main/packages/sdks/docs/SSR_AB_TEST.md)
 */
export const UPDATE_COOKIES_AND_STYLES_SCRIPT = "function updateCookiesAndStyles(contentId, variants, isHydrationTarget) {\n  function getAndSetVariantId() {\n    function setCookie(name, value, days) {\n      let expires = '';\n      if (days) {\n        const date = new Date();\n        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n        expires = '; expires=' + date.toUTCString();\n      }\n      document.cookie = name + '=' + (value || '') + expires + '; path=/' + '; Secure; SameSite=None';\n    }\n    function getCookie(name) {\n      const nameEQ = name + '=';\n      const ca = document.cookie.split(';');\n      for (let i = 0; i < ca.length; i++) {\n        let c = ca[i];\n        while (c.charAt(0) === ' ') c = c.substring(1, c.length);\n        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n      }\n      return null;\n    }\n    const cookieName = `builder.tests.${contentId}`;\n    const variantInCookie = getCookie(cookieName);\n    const availableIDs = variants.map(vr => vr.id).concat(contentId);\n    if (variantInCookie && availableIDs.includes(variantInCookie)) {\n      return variantInCookie;\n    }\n    let n = 0;\n    const random = Math.random();\n    for (let i = 0; i < variants.length; i++) {\n      const variant = variants[i];\n      const testRatio = variant.testRatio;\n      n += testRatio;\n      if (random < n) {\n        setCookie(cookieName, variant.id);\n        return variant.id;\n      }\n    }\n    setCookie(cookieName, contentId);\n    return contentId;\n  }\n  const winningVariantId = getAndSetVariantId();\n  const styleEl = document.currentScript?.previousElementSibling;\n  if (isHydrationTarget) {\n    styleEl.remove();\n    const thisScriptEl = document.currentScript;\n    thisScriptEl?.remove();\n  } else {\n    const newStyleStr = variants.concat({\n      id: contentId\n    }).filter(variant => variant.id !== winningVariantId).map(value => {\n      return `.variant-${value.id} {  display: none; }\n        `;\n    }).join('');\n    styleEl.innerHTML = newStyleStr;\n  }\n}";
export const UPDATE_VARIANT_VISIBILITY_SCRIPT = "function updateVariantVisibility(variantContentId, defaultContentId, isHydrationTarget) {\n  if (!navigator.cookieEnabled) {\n    return;\n  }\n  function getCookie(name) {\n    const nameEQ = name + '=';\n    const ca = document.cookie.split(';');\n    for (let i = 0; i < ca.length; i++) {\n      let c = ca[i];\n      while (c.charAt(0) === ' ') c = c.substring(1, c.length);\n      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n    }\n    return null;\n  }\n  const cookieName = `builder.tests.${defaultContentId}`;\n  const winningVariant = getCookie(cookieName);\n  const parentDiv = document.currentScript?.parentElement;\n  const isDefaultContent = variantContentId === defaultContentId;\n  const isWinningVariant = winningVariant === variantContentId;\n  if (isWinningVariant && !isDefaultContent) {\n    parentDiv?.removeAttribute('hidden');\n    parentDiv?.removeAttribute('aria-hidden');\n  } else if (!isWinningVariant && isDefaultContent) {\n    parentDiv?.setAttribute('hidden', 'true');\n    parentDiv?.setAttribute('aria-hidden', 'true');\n  }\n  if (isHydrationTarget) {\n    if (!isWinningVariant) {\n      parentDiv?.remove();\n    }\n    const thisScriptEl = document.currentScript;\n    thisScriptEl?.remove();\n  }\n  return;\n}";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lZC1mbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9jb250ZW50LXZhcmlhbnRzL2lubGluZWQtZm5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQU9IOzs7R0FHRztBQUVIOzs7R0FHRztBQUVILE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUFHLHUvREFBdS9ELENBQUM7QUFDeGlFLE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUFHLGt3Q0FBa3dDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFdBUk5JTkc6IFRoaXMgZmlsZSBjb250YWlucyBmdW5jdGlvbnMgdGhhdCBnZXQgc3RyaW5naWZpZWQgYW5kIGlubGluZWQgaW50byB0aGUgSFRNTCBhdCBidWlsZC10aW1lLlxuICogVGhleSBjYW5ub3QgaW1wb3J0IGFueXRoaW5nLlxuICovXG5cbnR5cGUgVmFyaWFudERhdGEgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHRlc3RSYXRpbz86IG51bWJlcjtcbn07XG5cbi8qKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRoaXMgd29ya3MsXG4gKiBzZWUgb3VyIFtTU1IgQS9CIFRlc3QgRG9jc10oaHR0cHM6Ly9naXRodWIuY29tL0J1aWxkZXJJTy9idWlsZGVyL3RyZWUvbWFpbi9wYWNrYWdlcy9zZGtzL3NyYy9TU1JfQUJfVEVTVC5tZClcbiAqL1xuXG4vKipcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGhvdyB0aGlzIHdvcmtzLFxuICogc2VlIG91ciBbU1NSIEEvQiBUZXN0IERvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9CdWlsZGVySU8vYnVpbGRlci90cmVlL21haW4vcGFja2FnZXMvc2Rrcy9kb2NzL1NTUl9BQl9URVNULm1kKVxuICovXG5cbmV4cG9ydCBjb25zdCBVUERBVEVfQ09PS0lFU19BTkRfU1RZTEVTX1NDUklQVCA9IFwiZnVuY3Rpb24gdXBkYXRlQ29va2llc0FuZFN0eWxlcyhjb250ZW50SWQsIHZhcmlhbnRzLCBpc0h5ZHJhdGlvblRhcmdldCkge1xcbiAgZnVuY3Rpb24gZ2V0QW5kU2V0VmFyaWFudElkKCkge1xcbiAgICBmdW5jdGlvbiBzZXRDb29raWUobmFtZSwgdmFsdWUsIGRheXMpIHtcXG4gICAgICBsZXQgZXhwaXJlcyA9ICcnO1xcbiAgICAgIGlmIChkYXlzKSB7XFxuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcXG4gICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIGRheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcXG4gICAgICAgIGV4cGlyZXMgPSAnOyBleHBpcmVzPScgKyBkYXRlLnRvVVRDU3RyaW5nKCk7XFxuICAgICAgfVxcbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPScgKyAodmFsdWUgfHwgJycpICsgZXhwaXJlcyArICc7IHBhdGg9LycgKyAnOyBTZWN1cmU7IFNhbWVTaXRlPU5vbmUnO1xcbiAgICB9XFxuICAgIGZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7XFxuICAgICAgY29uc3QgbmFtZUVRID0gbmFtZSArICc9JztcXG4gICAgICBjb25zdCBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2EubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIGxldCBjID0gY2FbaV07XFxuICAgICAgICB3aGlsZSAoYy5jaGFyQXQoMCkgPT09ICcgJykgYyA9IGMuc3Vic3RyaW5nKDEsIGMubGVuZ3RoKTtcXG4gICAgICAgIGlmIChjLmluZGV4T2YobmFtZUVRKSA9PT0gMCkgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWVFUS5sZW5ndGgsIGMubGVuZ3RoKTtcXG4gICAgICB9XFxuICAgICAgcmV0dXJuIG51bGw7XFxuICAgIH1cXG4gICAgY29uc3QgY29va2llTmFtZSA9IGBidWlsZGVyLnRlc3RzLiR7Y29udGVudElkfWA7XFxuICAgIGNvbnN0IHZhcmlhbnRJbkNvb2tpZSA9IGdldENvb2tpZShjb29raWVOYW1lKTtcXG4gICAgY29uc3QgYXZhaWxhYmxlSURzID0gdmFyaWFudHMubWFwKHZyID0+IHZyLmlkKS5jb25jYXQoY29udGVudElkKTtcXG4gICAgaWYgKHZhcmlhbnRJbkNvb2tpZSAmJiBhdmFpbGFibGVJRHMuaW5jbHVkZXModmFyaWFudEluQ29va2llKSkge1xcbiAgICAgIHJldHVybiB2YXJpYW50SW5Db29raWU7XFxuICAgIH1cXG4gICAgbGV0IG4gPSAwO1xcbiAgICBjb25zdCByYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhcmlhbnRzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgY29uc3QgdmFyaWFudCA9IHZhcmlhbnRzW2ldO1xcbiAgICAgIGNvbnN0IHRlc3RSYXRpbyA9IHZhcmlhbnQudGVzdFJhdGlvO1xcbiAgICAgIG4gKz0gdGVzdFJhdGlvO1xcbiAgICAgIGlmIChyYW5kb20gPCBuKSB7XFxuICAgICAgICBzZXRDb29raWUoY29va2llTmFtZSwgdmFyaWFudC5pZCk7XFxuICAgICAgICByZXR1cm4gdmFyaWFudC5pZDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgc2V0Q29va2llKGNvb2tpZU5hbWUsIGNvbnRlbnRJZCk7XFxuICAgIHJldHVybiBjb250ZW50SWQ7XFxuICB9XFxuICBjb25zdCB3aW5uaW5nVmFyaWFudElkID0gZ2V0QW5kU2V0VmFyaWFudElkKCk7XFxuICBjb25zdCBzdHlsZUVsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdD8ucHJldmlvdXNFbGVtZW50U2libGluZztcXG4gIGlmIChpc0h5ZHJhdGlvblRhcmdldCkge1xcbiAgICBzdHlsZUVsLnJlbW92ZSgpO1xcbiAgICBjb25zdCB0aGlzU2NyaXB0RWwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0O1xcbiAgICB0aGlzU2NyaXB0RWw/LnJlbW92ZSgpO1xcbiAgfSBlbHNlIHtcXG4gICAgY29uc3QgbmV3U3R5bGVTdHIgPSB2YXJpYW50cy5jb25jYXQoe1xcbiAgICAgIGlkOiBjb250ZW50SWRcXG4gICAgfSkuZmlsdGVyKHZhcmlhbnQgPT4gdmFyaWFudC5pZCAhPT0gd2lubmluZ1ZhcmlhbnRJZCkubWFwKHZhbHVlID0+IHtcXG4gICAgICByZXR1cm4gYC52YXJpYW50LSR7dmFsdWUuaWR9IHsgIGRpc3BsYXk6IG5vbmU7IH1cXG4gICAgICAgIGA7XFxuICAgIH0pLmpvaW4oJycpO1xcbiAgICBzdHlsZUVsLmlubmVySFRNTCA9IG5ld1N0eWxlU3RyO1xcbiAgfVxcbn1cIjtcbmV4cG9ydCBjb25zdCBVUERBVEVfVkFSSUFOVF9WSVNJQklMSVRZX1NDUklQVCA9IFwiZnVuY3Rpb24gdXBkYXRlVmFyaWFudFZpc2liaWxpdHkodmFyaWFudENvbnRlbnRJZCwgZGVmYXVsdENvbnRlbnRJZCwgaXNIeWRyYXRpb25UYXJnZXQpIHtcXG4gIGlmICghbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpIHtcXG4gICAgcmV0dXJuO1xcbiAgfVxcbiAgZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHtcXG4gICAgY29uc3QgbmFtZUVRID0gbmFtZSArICc9JztcXG4gICAgY29uc3QgY2EgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYS5sZW5ndGg7IGkrKykge1xcbiAgICAgIGxldCBjID0gY2FbaV07XFxuICAgICAgd2hpbGUgKGMuY2hhckF0KDApID09PSAnICcpIGMgPSBjLnN1YnN0cmluZygxLCBjLmxlbmd0aCk7XFxuICAgICAgaWYgKGMuaW5kZXhPZihuYW1lRVEpID09PSAwKSByZXR1cm4gYy5zdWJzdHJpbmcobmFtZUVRLmxlbmd0aCwgYy5sZW5ndGgpO1xcbiAgICB9XFxuICAgIHJldHVybiBudWxsO1xcbiAgfVxcbiAgY29uc3QgY29va2llTmFtZSA9IGBidWlsZGVyLnRlc3RzLiR7ZGVmYXVsdENvbnRlbnRJZH1gO1xcbiAgY29uc3Qgd2lubmluZ1ZhcmlhbnQgPSBnZXRDb29raWUoY29va2llTmFtZSk7XFxuICBjb25zdCBwYXJlbnREaXYgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0Py5wYXJlbnRFbGVtZW50O1xcbiAgY29uc3QgaXNEZWZhdWx0Q29udGVudCA9IHZhcmlhbnRDb250ZW50SWQgPT09IGRlZmF1bHRDb250ZW50SWQ7XFxuICBjb25zdCBpc1dpbm5pbmdWYXJpYW50ID0gd2lubmluZ1ZhcmlhbnQgPT09IHZhcmlhbnRDb250ZW50SWQ7XFxuICBpZiAoaXNXaW5uaW5nVmFyaWFudCAmJiAhaXNEZWZhdWx0Q29udGVudCkge1xcbiAgICBwYXJlbnREaXY/LnJlbW92ZUF0dHJpYnV0ZSgnaGlkZGVuJyk7XFxuICAgIHBhcmVudERpdj8ucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xcbiAgfSBlbHNlIGlmICghaXNXaW5uaW5nVmFyaWFudCAmJiBpc0RlZmF1bHRDb250ZW50KSB7XFxuICAgIHBhcmVudERpdj8uc2V0QXR0cmlidXRlKCdoaWRkZW4nLCAndHJ1ZScpO1xcbiAgICBwYXJlbnREaXY/LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xcbiAgfVxcbiAgaWYgKGlzSHlkcmF0aW9uVGFyZ2V0KSB7XFxuICAgIGlmICghaXNXaW5uaW5nVmFyaWFudCkge1xcbiAgICAgIHBhcmVudERpdj8ucmVtb3ZlKCk7XFxuICAgIH1cXG4gICAgY29uc3QgdGhpc1NjcmlwdEVsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdDtcXG4gICAgdGhpc1NjcmlwdEVsPy5yZW1vdmUoKTtcXG4gIH1cXG4gIHJldHVybjtcXG59XCI7Il19
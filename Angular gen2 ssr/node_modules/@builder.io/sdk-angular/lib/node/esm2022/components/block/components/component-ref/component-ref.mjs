import { Component, ViewChild, Input, forwardRef } from "@angular/core";
import { CommonModule } from "@angular/common";
import Block from "../../block";
import InteractiveElement from "../interactive-element";
import { getWrapperProps } from "./component-ref.helpers";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class ComponentRef {
    trackByChild0(_, child) {
        return child.id;
    }
    constructor(vcRef) {
        this.vcRef = vcRef;
        this.Wrapper = null;
        this.node_0_state_Wrapper = null;
        this.mergedInputs_v6przu = {};
    }
    ngOnInit() {
        this.Wrapper = this.isInteractive ? InteractiveElement : this.componentRef;
        this.node_0_state_Wrapper = {
            ...getWrapperProps({
                componentOptions: this.componentOptions,
                builderBlock: this.builderBlock,
                context: this.context,
                componentRef: this.componentRef,
                linkComponent: this.linkComponent,
                includeBlockProps: this.includeBlockProps,
                isInteractive: this.isInteractive,
                contextValue: this.context,
            }),
        };
        this.mergedInputs_v6przu = { ...this.node_0_state_Wrapper };
        const wrapperTemplate = this.vcRef.createEmbeddedView(this.wrapperTemplateRef);
        wrapperTemplate.detectChanges();
        this.myContent = [wrapperTemplate.rootNodes];
    }
    ngOnChanges(changes) {
        if (changes.componentOptions) {
            let foundChange = false;
            for (const key in changes.componentOptions.previousValue) {
                if (changes.componentOptions.previousValue[key] !== changes.componentOptions.currentValue[key]) {
                    foundChange = true;
                    break;
                }
            }
            if (!foundChange) {
                return;
            }
        }
        if (typeof window !== "undefined") {
            this.node_0_state_Wrapper = {
                ...getWrapperProps({
                    componentOptions: this.componentOptions,
                    builderBlock: this.builderBlock,
                    context: this.context,
                    componentRef: this.componentRef,
                    linkComponent: this.linkComponent,
                    includeBlockProps: this.includeBlockProps,
                    isInteractive: this.isInteractive,
                    contextValue: this.context,
                }),
            };
            this.mergedInputs_v6przu = { ...this.node_0_state_Wrapper };
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ComponentRef, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ComponentRef, isStandalone: true, selector: "component-ref", inputs: { componentOptions: "componentOptions", builderBlock: "builderBlock", context: "context", componentRef: "componentRef", linkComponent: "linkComponent", includeBlockProps: "includeBlockProps", isInteractive: "isInteractive", blockChildren: "blockChildren", registeredComponents: "registeredComponents" }, viewQueries: [{ propertyName: "wrapperTemplateRef", first: true, predicate: ["wrapperTemplate"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `
    <ng-template #wrapperTemplate>
      <ng-container *ngIf="componentRef">
<ng-container *ngFor="let child of blockChildren; trackBy: trackByChild0">
        <block
          [block]="child"
          [context]="context"
          [registeredComponents]="registeredComponents"
          [linkComponent]="linkComponent"
        ></block>
      </ng-container>
</ng-container>
    </ng-template>
    <ng-container *ngIf="componentRef">
      <ng-container
        *ngComponentOutlet="
              Wrapper;
              inputs: mergedInputs_v6przu;
              content: myContent;
              "
      ></ng-container>
    </ng-container>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: i0.forwardRef(function () { return CommonModule; }) }, { kind: "directive", type: i0.forwardRef(function () { return i1.NgComponentOutlet; }), selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i0.forwardRef(function () { return i1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i0.forwardRef(function () { return i1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i0.forwardRef(function () { return Block; }), selector: "block", inputs: ["block", "context", "registeredComponents", "linkComponent"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ComponentRef, decorators: [{
            type: Component,
            args: [{ selector: "component-ref", template: `
    <ng-template #wrapperTemplate>
      <ng-container *ngIf="componentRef">
<ng-container *ngFor="let child of blockChildren; trackBy: trackByChild0">
        <block
          [block]="child"
          [context]="context"
          [registeredComponents]="registeredComponents"
          [linkComponent]="linkComponent"
        ></block>
      </ng-container>
</ng-container>
    </ng-template>
    <ng-container *ngIf="componentRef">
      <ng-container
        *ngComponentOutlet="
              Wrapper;
              inputs: mergedInputs_v6przu;
              content: myContent;
              "
      ></ng-container>
    </ng-container>
  `, standalone: true, imports: [CommonModule, forwardRef(() => Block)], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { componentOptions: [{
                type: Input
            }], builderBlock: [{
                type: Input
            }], context: [{
                type: Input
            }], componentRef: [{
                type: Input
            }], linkComponent: [{
                type: Input
            }], includeBlockProps: [{
                type: Input
            }], isInteractive: [{
                type: Input
            }], blockChildren: [{
                type: Input
            }], registeredComponents: [{
                type: Input
            }], wrapperTemplateRef: [{
                type: ViewChild,
                args: ["wrapperTemplate", { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { CommonModule } from '@angular/common';
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { isEmptyElement } from './dynamic-renderer.helpers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class DynamicRenderer {
    useTypeOf(obj) {
        return typeof obj;
    }
    constructor(vcRef) {
        this.vcRef = vcRef;
        this.isEmptyElement = isEmptyElement;
    }
    ngOnInit() {
        if (typeof this.TagName === 'string') {
            switch (this.TagName) {
                case 'a':
                    this.TagName = DynamicA;
                    break;
                case 'button':
                    this.TagName = DynamicButton;
                    break;
                case 'div':
                    this.TagName = DynamicDiv;
                    break;
                case 'span':
                    this.TagName = DynamicSpan;
                    break;
                case 'p':
                    this.TagName = DynamicP;
                    break;
                case 'img':
                    this.TagName = DynamicImg;
                    break;
                case 'input':
                    this.TagName = DynamicInput;
                    break;
                case 'textarea':
                    this.TagName = DynamicTextarea;
                    break;
                case 'select':
                    this.TagName = DynamicSelect;
                    break;
                case 'option':
                    this.TagName = DynamicOption;
                    break;
                case 'form':
                    this.TagName = DynamicForm;
                    break;
                case 'label':
                    this.TagName = DynamicLabel;
                    break;
                case 'ul':
                    this.TagName = DynamicUl;
                    break;
                case 'li':
                    this.TagName = DynamicLi;
                    break;
                case 'table':
                    this.TagName = DynamicTable;
                    break;
                case 'tr':
                    this.TagName = DynamicTr;
                    break;
                case 'td':
                    this.TagName = DynamicTd;
                    break;
                case 'th':
                    this.TagName = DynamicTh;
                    break;
                case 'thead':
                    this.TagName = DynamicThead;
                    break;
                case 'tbody':
                    this.TagName = DynamicTbody;
                    break;
                case 'footer':
                    this.TagName = DynamicFooter;
                    break;
                case 'header':
                    this.TagName = DynamicHeader;
                    break;
                case 'nav':
                    this.TagName = DynamicNav;
                    break;
                case 'section':
                    this.TagName = DynamicSection;
                    break;
                case 'article':
                    this.TagName = DynamicArticle;
                    break;
                case 'aside':
                    this.TagName = DynamicAside;
                    break;
                case 'h1':
                    this.TagName = DynamicH1;
                    break;
                case 'h2':
                    this.TagName = DynamicH2;
                    break;
                case 'h3':
                    this.TagName = DynamicH3;
                    break;
                case 'h4':
                    this.TagName = DynamicH4;
                    break;
                case 'h5':
                    this.TagName = DynamicH5;
                    break;
                case 'h6':
                    this.TagName = DynamicH6;
                    break;
                case 'blockquote':
                    this.TagName = DynamicBlockquote;
                    break;
                case 'code':
                    this.TagName = DynamicCode;
                    break;
                case 'pre':
                    this.TagName = DynamicPre;
                    break;
                case 'figure':
                    this.TagName = DynamicFigure;
                    break;
                case 'figcaption':
                    this.TagName = DynamicFigcaption;
                    break;
                case 'video':
                    this.TagName = DynamicVideo;
                    break;
                case 'audio':
                    this.TagName = DynamicAudio;
                    break;
                case 'canvas':
                    this.TagName = DynamicCanvas;
                    break;
                case 'iframe':
                    this.TagName = DynamicIframe;
                    break;
                default:
                    break;
            }
        }
        this.myContent = [this.vcRef.createEmbeddedView(this.tagnameTemplateRef).rootNodes];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicRenderer, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicRenderer, isStandalone: true, selector: "dynamic-renderer, DynamicRenderer", inputs: { TagName: "TagName", attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "tagnameTemplateRef", first: true, predicate: ["tagnameTemplate"], descendants: true, static: true }], ngImport: i0, template: `
    <ng-template #tagnameTemplate><ng-content></ng-content></ng-template>
    <ng-container *ngIf="!isEmptyElement(TagName)">
      <ng-container *ngIf="useTypeOf(TagName) === 'string'">
        <ng-container
          *ngComponentOutlet="
            TagName;
            inputs: {
              attributes: attributes,
              actionAttributes: actionAttributes
            };
            content: myContent
          "
        ></ng-container>
      </ng-container>
      <ng-container *ngIf="!(useTypeOf(TagName) === 'string')">
        <ng-container
          *ngComponentOutlet="
            TagName;
            inputs: {
              attributes: attributes,
              actionAttributes: actionAttributes
            };
            content: myContent
          "
        ></ng-container>
      </ng-container>
    </ng-container>
    <ng-container *ngIf="!!isEmptyElement(TagName)">
      <ng-container
        *ngComponentOutlet="
          TagName;
          inputs: {
            attributes: attributes,
            actionAttributes: actionAttributes
          };
          content: myContent
        "
      ></ng-container>
    </ng-container>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicRenderer, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-renderer, DynamicRenderer', template: `
    <ng-template #tagnameTemplate><ng-content></ng-content></ng-template>
    <ng-container *ngIf="!isEmptyElement(TagName)">
      <ng-container *ngIf="useTypeOf(TagName) === 'string'">
        <ng-container
          *ngComponentOutlet="
            TagName;
            inputs: {
              attributes: attributes,
              actionAttributes: actionAttributes
            };
            content: myContent
          "
        ></ng-container>
      </ng-container>
      <ng-container *ngIf="!(useTypeOf(TagName) === 'string')">
        <ng-container
          *ngComponentOutlet="
            TagName;
            inputs: {
              attributes: attributes,
              actionAttributes: actionAttributes
            };
            content: myContent
          "
        ></ng-container>
      </ng-container>
    </ng-container>
    <ng-container *ngIf="!!isEmptyElement(TagName)">
      <ng-container
        *ngComponentOutlet="
          TagName;
          inputs: {
            attributes: attributes,
            actionAttributes: actionAttributes
          };
          content: myContent
        "
      ></ng-container>
    </ng-container>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { TagName: [{
                type: Input
            }], attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], tagnameTemplateRef: [{
                type: ViewChild,
                args: ['tagnameTemplate', { static: true }]
            }] } });
export class DynamicA {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicA, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicA, isStandalone: true, selector: "dynamic-a, DynamicA", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <a #v ><ng-content></ng-content></a> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicA, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-a, DynamicA', template: ` <a #v ><ng-content></ng-content></a> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicButton {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicButton, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicButton, isStandalone: true, selector: "dynamic-button, DynamicButton", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <button #v ><ng-content></ng-content></button> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicButton, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-button, DynamicButton', template: ` <button #v ><ng-content></ng-content></button> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicDiv {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicDiv, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicDiv, isStandalone: true, selector: "dynamic-div, DynamicDiv", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <div #v ><ng-content></ng-content></div> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicDiv, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-div, DynamicDiv', template: ` <div #v ><ng-content></ng-content></div> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicSpan {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicSpan, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicSpan, isStandalone: true, selector: "dynamic-span, DynamicSpan", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <span #v ><ng-content></ng-content></span> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicSpan, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-span, DynamicSpan', template: ` <span #v ><ng-content></ng-content></span> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicP {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicP, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicP, isStandalone: true, selector: "dynamic-p, DynamicP", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <p #v ><ng-content></ng-content></p> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicP, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-p, DynamicP', template: ` <p #v ><ng-content></ng-content></p> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicImg {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicImg, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicImg, isStandalone: true, selector: "dynamic-img, DynamicImg", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <img #v /> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicImg, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-img, DynamicImg', template: ` <img #v /> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicInput {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicInput, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicInput, isStandalone: true, selector: "dynamic-input, DynamicInput", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <input #v /> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicInput, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-input, DynamicInput', template: ` <input #v /> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicTextarea {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTextarea, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicTextarea, isStandalone: true, selector: "dynamic-textarea, DynamicTextarea", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <textarea #v ><ng-content></ng-content></textarea> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTextarea, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-textarea, DynamicTextarea', template: ` <textarea #v ><ng-content></ng-content></textarea> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicSelect {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicSelect, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicSelect, isStandalone: true, selector: "dynamic-select, DynamicSelect", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <select #v ><ng-content></ng-content></select> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicSelect, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-select, DynamicSelect', template: ` <select #v ><ng-content></ng-content></select> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicOption {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicOption, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicOption, isStandalone: true, selector: "dynamic-option, DynamicOption", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <option #v ><ng-content></ng-content></option> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicOption, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-option, DynamicOption', template: ` <option #v ><ng-content></ng-content></option> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicForm {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicForm, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicForm, isStandalone: true, selector: "dynamic-form, DynamicForm", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <form #v ><ng-content></ng-content></form> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicForm, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-form, DynamicForm', template: ` <form #v ><ng-content></ng-content></form> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicLabel {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicLabel, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicLabel, isStandalone: true, selector: "dynamic-label, DynamicLabel", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <label #v ><ng-content></ng-content></label> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicLabel, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-label, DynamicLabel', template: ` <label #v ><ng-content></ng-content></label> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicUl {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicUl, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicUl, isStandalone: true, selector: "dynamic-ul, DynamicUl", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <ul #v ><ng-content></ng-content></ul> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicUl, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-ul, DynamicUl', template: ` <ul #v ><ng-content></ng-content></ul> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicLi {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicLi, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicLi, isStandalone: true, selector: "dynamic-li, DynamicLi", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <li #v ><ng-content></ng-content></li> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicLi, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-li, DynamicLi', template: ` <li #v ><ng-content></ng-content></li> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicTable {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTable, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicTable, isStandalone: true, selector: "dynamic-table, DynamicTable", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <table #v ><ng-content></ng-content></table> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTable, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-table, DynamicTable', template: ` <table #v ><ng-content></ng-content></table> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicTr {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTr, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicTr, isStandalone: true, selector: "dynamic-tr, DynamicTr", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <tr #v ><ng-content></ng-content></tr> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTr, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-tr, DynamicTr', template: ` <tr #v ><ng-content></ng-content></tr> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicTd {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTd, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicTd, isStandalone: true, selector: "dynamic-td, DynamicTd", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <td #v ><ng-content></ng-content></td> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTd, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-td, DynamicTd', template: ` <td #v ><ng-content></ng-content></td> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicTh {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTh, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicTh, isStandalone: true, selector: "dynamic-th, DynamicTh", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <th #v ><ng-content></ng-content></th> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTh, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-th, DynamicTh', template: ` <th #v ><ng-content></ng-content></th> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicThead {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicThead, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicThead, isStandalone: true, selector: "dynamic-thead, DynamicThead", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <thead #v ><ng-content></ng-content></thead> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicThead, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-thead, DynamicThead', template: ` <thead #v ><ng-content></ng-content></thead> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicTbody {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTbody, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicTbody, isStandalone: true, selector: "dynamic-tbody, DynamicTbody", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <tbody #v ><ng-content></ng-content></tbody> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicTbody, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-tbody, DynamicTbody', template: ` <tbody #v ><ng-content></ng-content></tbody> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicFooter {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicFooter, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicFooter, isStandalone: true, selector: "dynamic-footer, DynamicFooter", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <footer #v ><ng-content></ng-content></footer> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicFooter, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-footer, DynamicFooter', template: ` <footer #v ><ng-content></ng-content></footer> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicHeader {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicHeader, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicHeader, isStandalone: true, selector: "dynamic-header, DynamicHeader", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <header #v ><ng-content></ng-content></header> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicHeader, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-header, DynamicHeader', template: ` <header #v ><ng-content></ng-content></header> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicNav {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicNav, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicNav, isStandalone: true, selector: "dynamic-nav, DynamicNav", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <nav #v ><ng-content></ng-content></nav> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicNav, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-nav, DynamicNav', template: ` <nav #v ><ng-content></ng-content></nav> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicSection {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicSection, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicSection, isStandalone: true, selector: "dynamic-section, DynamicSection", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <section #v ><ng-content></ng-content></section> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicSection, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-section, DynamicSection', template: ` <section #v ><ng-content></ng-content></section> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicArticle {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicArticle, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicArticle, isStandalone: true, selector: "dynamic-article, DynamicArticle", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <article #v ><ng-content></ng-content></article> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicArticle, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-article, DynamicArticle', template: ` <article #v ><ng-content></ng-content></article> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicAside {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicAside, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicAside, isStandalone: true, selector: "dynamic-aside, DynamicAside", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <aside #v ><ng-content></ng-content></aside> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicAside, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-aside, DynamicAside', template: ` <aside #v ><ng-content></ng-content></aside> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicH1 {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH1, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicH1, isStandalone: true, selector: "dynamic-h1, DynamicH1", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <h1 #v ><ng-content></ng-content></h1> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH1, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-h1, DynamicH1', template: ` <h1 #v ><ng-content></ng-content></h1> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicH2 {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH2, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicH2, isStandalone: true, selector: "dynamic-h2, DynamicH2", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <h2 #v ><ng-content></ng-content></h2> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH2, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-h2, DynamicH2', template: ` <h2 #v ><ng-content></ng-content></h2> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicH3 {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH3, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicH3, isStandalone: true, selector: "dynamic-h3, DynamicH3", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <h3 #v ><ng-content></ng-content></h3> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH3, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-h3, DynamicH3', template: ` <h3 #v ><ng-content></ng-content></h3> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicH4 {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH4, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicH4, isStandalone: true, selector: "dynamic-h4, DynamicH4", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <h4 #v ><ng-content></ng-content></h4> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH4, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-h4, DynamicH4', template: ` <h4 #v ><ng-content></ng-content></h4> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicH5 {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH5, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicH5, isStandalone: true, selector: "dynamic-h5, DynamicH5", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <h5 #v ><ng-content></ng-content></h5> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH5, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-h5, DynamicH5', template: ` <h5 #v ><ng-content></ng-content></h5> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicH6 {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH6, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicH6, isStandalone: true, selector: "dynamic-h6, DynamicH6", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <h6 #v ><ng-content></ng-content></h6> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicH6, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-h6, DynamicH6', template: ` <h6 #v ><ng-content></ng-content></h6> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicBlockquote {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicBlockquote, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicBlockquote, isStandalone: true, selector: "dynamic-blockquote, DynamicBlockquote", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <blockquote #v ><ng-content></ng-content></blockquote> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicBlockquote, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-blockquote, DynamicBlockquote', template: ` <blockquote #v ><ng-content></ng-content></blockquote> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicCode {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicCode, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicCode, isStandalone: true, selector: "dynamic-code, DynamicCode", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <code #v ><ng-content></ng-content></code> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicCode, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-code, DynamicCode', template: ` <code #v ><ng-content></ng-content></code> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicPre {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicPre, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicPre, isStandalone: true, selector: "dynamic-pre, DynamicPre", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <pre #v ><ng-content></ng-content></pre> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicPre, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-pre, DynamicPre', template: ` <pre #v ><ng-content></ng-content></pre> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicFigure {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicFigure, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicFigure, isStandalone: true, selector: "dynamic-figure, DynamicFigure", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <figure #v ><ng-content></ng-content></figure> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicFigure, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-figure, DynamicFigure', template: ` <figure #v ><ng-content></ng-content></figure> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicFigcaption {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicFigcaption, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicFigcaption, isStandalone: true, selector: "dynamic-figcaption, DynamicFigcaption", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <figcaption #v ><ng-content></ng-content></figcaption> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicFigcaption, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-figcaption, DynamicFigcaption', template: ` <figcaption #v ><ng-content></ng-content></figcaption> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicVideo {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicVideo, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicVideo, isStandalone: true, selector: "dynamic-video, DynamicVideo", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <video #v ><ng-content></ng-content></video> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicVideo, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-video, DynamicVideo', template: ` <video #v ><ng-content></ng-content></video> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicAudio {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicAudio, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicAudio, isStandalone: true, selector: "dynamic-audio, DynamicAudio", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <audio #v ><ng-content></ng-content></audio> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicAudio, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-audio, DynamicAudio', template: ` <audio #v ><ng-content></ng-content></audio> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicCanvas {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicCanvas, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicCanvas, isStandalone: true, selector: "dynamic-canvas, DynamicCanvas", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <canvas #v ><ng-content></ng-content></canvas> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicCanvas, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-canvas, DynamicCanvas', template: ` <canvas #v ><ng-content></ng-content></canvas> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
export class DynamicIframe {
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
    }
    setAttributes(el, value, changes) {
        if (!el)
            return;
        const target = changes ? changes : value;
        Object.keys(target).forEach((key) => {
            if (key.startsWith('on')) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace('on', '').toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key, target[key] ?? '');
            }
        });
    }
    ngAfterViewInit() {
        this.setAttributes(this.v?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (changes.attributes) {
            this.setAttributes(this.v?.nativeElement, this.attributes, changes.attributes.currentValue);
        }
    }
    ngOnDestroy() {
        this._listenerFns.forEach(fn => fn());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicIframe, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DynamicIframe, isStandalone: true, selector: "dynamic-iframe, DynamicIframe", inputs: { attributes: "attributes", actionAttributes: "actionAttributes" }, viewQueries: [{ propertyName: "v", first: true, predicate: ["v"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: ` <iframe #v ><ng-content></ng-content></iframe> `, isInline: true, styles: [":host{display:contents}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DynamicIframe, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-iframe, DynamicIframe', template: ` <iframe #v ><ng-content></ng-content></iframe> `, standalone: true, styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], actionAttributes: [{
                type: Input
            }], v: [{
                type: ViewChild,
                args: ['v', { read: ElementRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1yZW5kZXJlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2R5bmFtaWMtcmVuZGVyZXIvZHluYW1pYy1yZW5kZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUF5QyxTQUFTLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQ2pJLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBa0Q1RCxNQUFNLENBQUMsT0FBTyxPQUFPLGVBQWU7SUFXbEMsU0FBUyxDQUFDLEdBQVE7UUFDaEIsT0FBTyxPQUFPLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBRUQsWUFBb0IsS0FBdUI7UUFBdkIsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFkM0MsbUJBQWMsR0FBRyxjQUFjLENBQUM7SUFjYyxDQUFDO0lBRS9DLFFBQVE7UUFDTixJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDcEMsUUFBUSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNwQixLQUFLLEdBQUc7b0JBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7b0JBQUMsTUFBTTtnQkFDekMsS0FBSyxRQUFRO29CQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDO29CQUFDLE1BQU07Z0JBQ25ELEtBQUssS0FBSztvQkFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztvQkFBQyxNQUFNO2dCQUM3QyxLQUFLLE1BQU07b0JBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUM7b0JBQUMsTUFBTTtnQkFDL0MsS0FBSyxHQUFHO29CQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO29CQUFDLE1BQU07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TCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUN4RDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUM3RjtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7K0dBdENVLGFBQWE7bUdBQWIsYUFBYSx3T0FJQSxVQUFVLGtEQVJ4QixrREFBa0Q7OzRGQUlqRCxhQUFhO2tCQU56QixTQUFTOytCQUNFLCtCQUErQixZQUMvQixrREFBa0QsY0FDaEQsSUFBSTtnR0FJUCxVQUFVO3NCQUFsQixLQUFLO2dCQUNHLGdCQUFnQjtzQkFBeEIsS0FBSztnQkFFZ0MsQ0FBQztzQkFBdEMsU0FBUzt1QkFBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNFbXB0eUVsZW1lbnQgfSBmcm9tICcuL2R5bmFtaWMtcmVuZGVyZXIuaGVscGVycyc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1yZW5kZXJlciwgRHluYW1pY1JlbmRlcmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctdGVtcGxhdGUgI3RhZ25hbWVUZW1wbGF0ZT48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9uZy10ZW1wbGF0ZT5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWlzRW1wdHlFbGVtZW50KFRhZ05hbWUpXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwidXNlVHlwZU9mKFRhZ05hbWUpID09PSAnc3RyaW5nJ1wiPlxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgKm5nQ29tcG9uZW50T3V0bGV0PVwiXG4gICAgICAgICAgICBUYWdOYW1lO1xuICAgICAgICAgICAgaW5wdXRzOiB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgIGFjdGlvbkF0dHJpYnV0ZXM6IGFjdGlvbkF0dHJpYnV0ZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb250ZW50OiBteUNvbnRlbnRcbiAgICAgICAgICBcIlxuICAgICAgICA+PC9uZy1jb250YWluZXI+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhKHVzZVR5cGVPZihUYWdOYW1lKSA9PT0gJ3N0cmluZycpXCI+XG4gICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAqbmdDb21wb25lbnRPdXRsZXQ9XCJcbiAgICAgICAgICAgIFRhZ05hbWU7XG4gICAgICAgICAgICBpbnB1dHM6IHtcbiAgICAgICAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgYWN0aW9uQXR0cmlidXRlczogYWN0aW9uQXR0cmlidXRlc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG15Q29udGVudFxuICAgICAgICAgIFwiXG4gICAgICAgID48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhIWlzRW1wdHlFbGVtZW50KFRhZ05hbWUpXCI+XG4gICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICpuZ0NvbXBvbmVudE91dGxldD1cIlxuICAgICAgICAgIFRhZ05hbWU7XG4gICAgICAgICAgaW5wdXRzOiB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgYWN0aW9uQXR0cmlidXRlczogYWN0aW9uQXR0cmlidXRlc1xuICAgICAgICAgIH07XG4gICAgICAgICAgY29udGVudDogbXlDb250ZW50XG4gICAgICAgIFwiXG4gICAgICA+PC9uZy1jb250YWluZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIER5bmFtaWNSZW5kZXJlciB7XG4gIGlzRW1wdHlFbGVtZW50ID0gaXNFbXB0eUVsZW1lbnQ7XG5cbiAgQElucHV0KCkgVGFnTmFtZSE6IGFueTtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcyE6IGFueTtcblxuICBAVmlld0NoaWxkKCd0YWduYW1lVGVtcGxhdGUnLCB7IHN0YXRpYzogdHJ1ZSB9KSB0YWduYW1lVGVtcGxhdGVSZWYhOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIG15Q29udGVudD86IGFueVtdW107XG5cbiAgdXNlVHlwZU9mKG9iajogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLlRhZ05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuVGFnTmFtZSkge1xuICAgICAgICBjYXNlICdhJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY0E7IGJyZWFrO1xuICAgICAgICBjYXNlICdidXR0b24nOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljQnV0dG9uOyBicmVhaztcbiAgICAgICAgY2FzZSAnZGl2JzogdGhpcy5UYWdOYW1lID0gRHluYW1pY0RpdjsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NwYW4nOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljU3BhbjsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3AnOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljUDsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2ltZyc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNJbWc7IGJyZWFrO1xuICAgICAgICBjYXNlICdpbnB1dCc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNJbnB1dDsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RleHRhcmVhJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY1RleHRhcmVhOyBicmVhaztcbiAgICAgICAgY2FzZSAnc2VsZWN0JzogdGhpcy5UYWdOYW1lID0gRHluYW1pY1NlbGVjdDsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ29wdGlvbic6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNPcHRpb247IGJyZWFrO1xuICAgICAgICBjYXNlICdmb3JtJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY0Zvcm07IGJyZWFrO1xuICAgICAgICBjYXNlICdsYWJlbCc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNMYWJlbDsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3VsJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY1VsOyBicmVhaztcbiAgICAgICAgY2FzZSAnbGknOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljTGk7IGJyZWFrO1xuICAgICAgICBjYXNlICd0YWJsZSc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNUYWJsZTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RyJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY1RyOyBicmVhaztcbiAgICAgICAgY2FzZSAndGQnOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljVGQ7IGJyZWFrO1xuICAgICAgICBjYXNlICd0aCc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNUaDsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RoZWFkJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY1RoZWFkOyBicmVhaztcbiAgICAgICAgY2FzZSAndGJvZHknOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljVGJvZHk7IGJyZWFrO1xuICAgICAgICBjYXNlICdmb290ZXInOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljRm9vdGVyOyBicmVhaztcbiAgICAgICAgY2FzZSAnaGVhZGVyJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY0hlYWRlcjsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ25hdic6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNOYXY7IGJyZWFrO1xuICAgICAgICBjYXNlICdzZWN0aW9uJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY1NlY3Rpb247IGJyZWFrO1xuICAgICAgICBjYXNlICdhcnRpY2xlJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY0FydGljbGU7IGJyZWFrO1xuICAgICAgICBjYXNlICdhc2lkZSc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNBc2lkZTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2gxJzogdGhpcy5UYWdOYW1lID0gRHluYW1pY0gxOyBicmVhaztcbiAgICAgICAgY2FzZSAnaDInOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljSDI7IGJyZWFrO1xuICAgICAgICBjYXNlICdoMyc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNIMzsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2g0JzogdGhpcy5UYWdOYW1lID0gRHluYW1pY0g0OyBicmVhaztcbiAgICAgICAgY2FzZSAnaDUnOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljSDU7IGJyZWFrO1xuICAgICAgICBjYXNlICdoNic6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNINjsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Jsb2NrcXVvdGUnOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljQmxvY2txdW90ZTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NvZGUnOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljQ29kZTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ByZSc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNQcmU7IGJyZWFrO1xuICAgICAgICBjYXNlICdmaWd1cmUnOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljRmlndXJlOyBicmVhaztcbiAgICAgICAgY2FzZSAnZmlnY2FwdGlvbic6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNGaWdjYXB0aW9uOyBicmVhaztcbiAgICAgICAgY2FzZSAndmlkZW8nOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljVmlkZW87IGJyZWFrO1xuICAgICAgICBjYXNlICdhdWRpbyc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNBdWRpbzsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NhbnZhcyc6IHRoaXMuVGFnTmFtZSA9IER5bmFtaWNDYW52YXM7IGJyZWFrO1xuICAgICAgICBjYXNlICdpZnJhbWUnOiB0aGlzLlRhZ05hbWUgPSBEeW5hbWljSWZyYW1lOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5teUNvbnRlbnQgPSBbdGhpcy52Y1JlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50YWduYW1lVGVtcGxhdGVSZWYpLnJvb3ROb2Rlc107XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1hLCBEeW5hbWljQScsXG4gIHRlbXBsYXRlOiBgIDxhICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9hPiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljQSB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWJ1dHRvbiwgRHluYW1pY0J1dHRvbicsXG4gIHRlbXBsYXRlOiBgIDxidXR0b24gI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2J1dHRvbj4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0J1dHRvbiB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWRpdiwgRHluYW1pY0RpdicsXG4gIHRlbXBsYXRlOiBgIDxkaXYgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2Rpdj4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0RpdiB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLXNwYW4sIER5bmFtaWNTcGFuJyxcbiAgdGVtcGxhdGU6IGAgPHNwYW4gI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L3NwYW4+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNTcGFuIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcz86IGFueTtcblxuICBAVmlld0NoaWxkKCd2JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHYhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBzZXRBdHRyaWJ1dGVzKGVsOiBhbnksIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjaGFuZ2VzID8gY2hhbmdlcyA6IHZhbHVlO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KGtleSwgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsIGtleS5yZXBsYWNlKCdvbicsICcnKS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleSwgdGFyZ2V0W2tleV0gPz8gJycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzLCBjaGFuZ2VzLmF0dHJpYnV0ZXMuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lckZucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R5bmFtaWMtcCwgRHluYW1pY1AnLFxuICB0ZW1wbGF0ZTogYCA8cCAjdiA+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvcD4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1Age1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1pbWcsIER5bmFtaWNJbWcnLFxuICB0ZW1wbGF0ZTogYCA8aW1nICN2IC8+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNJbWcge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1pbnB1dCwgRHluYW1pY0lucHV0JyxcbiAgdGVtcGxhdGU6IGAgPGlucHV0ICN2IC8+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNJbnB1dCB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLXRleHRhcmVhLCBEeW5hbWljVGV4dGFyZWEnLFxuICB0ZW1wbGF0ZTogYCA8dGV4dGFyZWEgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L3RleHRhcmVhPiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljVGV4dGFyZWEge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1zZWxlY3QsIER5bmFtaWNTZWxlY3QnLFxuICB0ZW1wbGF0ZTogYCA8c2VsZWN0ICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9zZWxlY3Q+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNTZWxlY3Qge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1vcHRpb24sIER5bmFtaWNPcHRpb24nLFxuICB0ZW1wbGF0ZTogYCA8b3B0aW9uICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9vcHRpb24+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNPcHRpb24ge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1mb3JtLCBEeW5hbWljRm9ybScsXG4gIHRlbXBsYXRlOiBgIDxmb3JtICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9mb3JtPiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybSB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWxhYmVsLCBEeW5hbWljTGFiZWwnLFxuICB0ZW1wbGF0ZTogYCA8bGFiZWwgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2xhYmVsPiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljTGFiZWwge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy11bCwgRHluYW1pY1VsJyxcbiAgdGVtcGxhdGU6IGAgPHVsICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC91bD4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1VsIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcz86IGFueTtcblxuICBAVmlld0NoaWxkKCd2JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHYhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBzZXRBdHRyaWJ1dGVzKGVsOiBhbnksIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjaGFuZ2VzID8gY2hhbmdlcyA6IHZhbHVlO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KGtleSwgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsIGtleS5yZXBsYWNlKCdvbicsICcnKS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleSwgdGFyZ2V0W2tleV0gPz8gJycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzLCBjaGFuZ2VzLmF0dHJpYnV0ZXMuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lckZucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R5bmFtaWMtbGksIER5bmFtaWNMaScsXG4gIHRlbXBsYXRlOiBgIDxsaSAjdiA+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbGk+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNMaSB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLXRhYmxlLCBEeW5hbWljVGFibGUnLFxuICB0ZW1wbGF0ZTogYCA8dGFibGUgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L3RhYmxlPiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljVGFibGUge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy10ciwgRHluYW1pY1RyJyxcbiAgdGVtcGxhdGU6IGAgPHRyICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC90cj4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1RyIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcz86IGFueTtcblxuICBAVmlld0NoaWxkKCd2JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHYhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBzZXRBdHRyaWJ1dGVzKGVsOiBhbnksIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjaGFuZ2VzID8gY2hhbmdlcyA6IHZhbHVlO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KGtleSwgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsIGtleS5yZXBsYWNlKCdvbicsICcnKS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleSwgdGFyZ2V0W2tleV0gPz8gJycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzLCBjaGFuZ2VzLmF0dHJpYnV0ZXMuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lckZucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R5bmFtaWMtdGQsIER5bmFtaWNUZCcsXG4gIHRlbXBsYXRlOiBgIDx0ZCAjdiA+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvdGQ+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNUZCB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLXRoLCBEeW5hbWljVGgnLFxuICB0ZW1wbGF0ZTogYCA8dGggI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L3RoPiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljVGgge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy10aGVhZCwgRHluYW1pY1RoZWFkJyxcbiAgdGVtcGxhdGU6IGAgPHRoZWFkICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC90aGVhZD4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1RoZWFkIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcz86IGFueTtcblxuICBAVmlld0NoaWxkKCd2JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHYhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBzZXRBdHRyaWJ1dGVzKGVsOiBhbnksIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjaGFuZ2VzID8gY2hhbmdlcyA6IHZhbHVlO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KGtleSwgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsIGtleS5yZXBsYWNlKCdvbicsICcnKS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleSwgdGFyZ2V0W2tleV0gPz8gJycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzLCBjaGFuZ2VzLmF0dHJpYnV0ZXMuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lckZucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R5bmFtaWMtdGJvZHksIER5bmFtaWNUYm9keScsXG4gIHRlbXBsYXRlOiBgIDx0Ym9keSAjdiA+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvdGJvZHk+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNUYm9keSB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWZvb3RlciwgRHluYW1pY0Zvb3RlcicsXG4gIHRlbXBsYXRlOiBgIDxmb290ZXIgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2Zvb3Rlcj4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvb3RlciB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWhlYWRlciwgRHluYW1pY0hlYWRlcicsXG4gIHRlbXBsYXRlOiBgIDxoZWFkZXIgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2hlYWRlcj4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0hlYWRlciB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLW5hdiwgRHluYW1pY05hdicsXG4gIHRlbXBsYXRlOiBgIDxuYXYgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L25hdj4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY05hdiB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLXNlY3Rpb24sIER5bmFtaWNTZWN0aW9uJyxcbiAgdGVtcGxhdGU6IGAgPHNlY3Rpb24gI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L3NlY3Rpb24+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNTZWN0aW9uIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcz86IGFueTtcblxuICBAVmlld0NoaWxkKCd2JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHYhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBzZXRBdHRyaWJ1dGVzKGVsOiBhbnksIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjaGFuZ2VzID8gY2hhbmdlcyA6IHZhbHVlO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KGtleSwgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsIGtleS5yZXBsYWNlKCdvbicsICcnKS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleSwgdGFyZ2V0W2tleV0gPz8gJycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzLCBjaGFuZ2VzLmF0dHJpYnV0ZXMuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lckZucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R5bmFtaWMtYXJ0aWNsZSwgRHluYW1pY0FydGljbGUnLFxuICB0ZW1wbGF0ZTogYCA8YXJ0aWNsZSAjdiA+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvYXJ0aWNsZT4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0FydGljbGUge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1hc2lkZSwgRHluYW1pY0FzaWRlJyxcbiAgdGVtcGxhdGU6IGAgPGFzaWRlICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9hc2lkZT4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0FzaWRlIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcz86IGFueTtcblxuICBAVmlld0NoaWxkKCd2JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHYhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBzZXRBdHRyaWJ1dGVzKGVsOiBhbnksIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjaGFuZ2VzID8gY2hhbmdlcyA6IHZhbHVlO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KGtleSwgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsIGtleS5yZXBsYWNlKCdvbicsICcnKS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleSwgdGFyZ2V0W2tleV0gPz8gJycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzLCBjaGFuZ2VzLmF0dHJpYnV0ZXMuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lckZucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R5bmFtaWMtaDEsIER5bmFtaWNIMScsXG4gIHRlbXBsYXRlOiBgIDxoMSAjdiA+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvaDE+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNIMSB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWgyLCBEeW5hbWljSDInLFxuICB0ZW1wbGF0ZTogYCA8aDIgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2gyPiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljSDIge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1oMywgRHluYW1pY0gzJyxcbiAgdGVtcGxhdGU6IGAgPGgzICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9oMz4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0gzIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcz86IGFueTtcblxuICBAVmlld0NoaWxkKCd2JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHYhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBzZXRBdHRyaWJ1dGVzKGVsOiBhbnksIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjaGFuZ2VzID8gY2hhbmdlcyA6IHZhbHVlO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KGtleSwgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsIGtleS5yZXBsYWNlKCdvbicsICcnKS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleSwgdGFyZ2V0W2tleV0gPz8gJycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzLCBjaGFuZ2VzLmF0dHJpYnV0ZXMuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lckZucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R5bmFtaWMtaDQsIER5bmFtaWNINCcsXG4gIHRlbXBsYXRlOiBgIDxoNCAjdiA+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvaDQ+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNINCB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWg1LCBEeW5hbWljSDUnLFxuICB0ZW1wbGF0ZTogYCA8aDUgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2g1PiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljSDUge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1oNiwgRHluYW1pY0g2JyxcbiAgdGVtcGxhdGU6IGAgPGg2ICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9oNj4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0g2IHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcz86IGFueTtcblxuICBAVmlld0NoaWxkKCd2JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHYhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBzZXRBdHRyaWJ1dGVzKGVsOiBhbnksIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjaGFuZ2VzID8gY2hhbmdlcyA6IHZhbHVlO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KGtleSwgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsIGtleS5yZXBsYWNlKCdvbicsICcnKS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleSwgdGFyZ2V0W2tleV0gPz8gJycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzLCBjaGFuZ2VzLmF0dHJpYnV0ZXMuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lckZucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R5bmFtaWMtYmxvY2txdW90ZSwgRHluYW1pY0Jsb2NrcXVvdGUnLFxuICB0ZW1wbGF0ZTogYCA8YmxvY2txdW90ZSAjdiA+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvYmxvY2txdW90ZT4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0Jsb2NrcXVvdGUge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1jb2RlLCBEeW5hbWljQ29kZScsXG4gIHRlbXBsYXRlOiBgIDxjb2RlICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9jb2RlPiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljQ29kZSB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLXByZSwgRHluYW1pY1ByZScsXG4gIHRlbXBsYXRlOiBgIDxwcmUgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L3ByZT4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1ByZSB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWZpZ3VyZSwgRHluYW1pY0ZpZ3VyZScsXG4gIHRlbXBsYXRlOiBgIDxmaWd1cmUgI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2ZpZ3VyZT4gYCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogY29udGVudHM7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0ZpZ3VyZSB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWZpZ2NhcHRpb24sIER5bmFtaWNGaWdjYXB0aW9uJyxcbiAgdGVtcGxhdGU6IGAgPGZpZ2NhcHRpb24gI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2ZpZ2NhcHRpb24+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNGaWdjYXB0aW9uIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IGFueTtcbiAgQElucHV0KCkgYWN0aW9uQXR0cmlidXRlcz86IGFueTtcblxuICBAVmlld0NoaWxkKCd2JywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHYhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBzZXRBdHRyaWJ1dGVzKGVsOiBhbnksIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjaGFuZ2VzID8gY2hhbmdlcyA6IHZhbHVlO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KGtleSwgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsIGtleS5yZXBsYWNlKCdvbicsICcnKS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleSwgdGFyZ2V0W2tleV0gPz8gJycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzLCBjaGFuZ2VzLmF0dHJpYnV0ZXMuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9saXN0ZW5lckZucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R5bmFtaWMtdmlkZW8sIER5bmFtaWNWaWRlbycsXG4gIHRlbXBsYXRlOiBgIDx2aWRlbyAjdiA+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvdmlkZW8+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNWaWRlbyB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBhbnk7XG4gIEBJbnB1dCgpIGFjdGlvbkF0dHJpYnV0ZXM/OiBhbnk7XG5cbiAgQFZpZXdDaGlsZCgndicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB2ITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgc2V0QXR0cmlidXRlcyhlbDogYW55LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hhbmdlcyA/IGNoYW5nZXMgOiB2YWx1ZTtcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChrZXksIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCBrZXkucmVwbGFjZSgnb24nLCAnJykudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXksIHRhcmdldFtrZXldID8/ICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnY/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcywgY2hhbmdlcy5hdHRyaWJ1dGVzLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJGbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWF1ZGlvLCBEeW5hbWljQXVkaW8nLFxuICB0ZW1wbGF0ZTogYCA8YXVkaW8gI3YgPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2F1ZGlvPiBgLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBjb250ZW50czsgfSddLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljQXVkaW8ge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1jYW52YXMsIER5bmFtaWNDYW52YXMnLFxuICB0ZW1wbGF0ZTogYCA8Y2FudmFzICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9jYW52YXM+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNDYW52YXMge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHluYW1pYy1pZnJhbWUsIER5bmFtaWNJZnJhbWUnLFxuICB0ZW1wbGF0ZTogYCA8aWZyYW1lICN2ID48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9pZnJhbWU+IGAsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGNvbnRlbnRzOyB9J10sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNJZnJhbWUge1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogYW55O1xuICBASW5wdXQoKSBhY3Rpb25BdHRyaWJ1dGVzPzogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ3YnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgdiE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIHNldEF0dHJpYnV0ZXMoZWw6IGFueSwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHRhcmdldCA9IGNoYW5nZXMgPyBjaGFuZ2VzIDogdmFsdWU7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoa2V5LCB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwga2V5LnJlcGxhY2UoJ29uJywgJycpLnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LCB0YXJnZXRba2V5XSA/PyAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudj8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy52Py5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMsIGNoYW5nZXMuYXR0cmlidXRlcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2xpc3RlbmVyRm5zLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gIH1cbn1cbiJdfQ==
/**
 * These are in a separate file because React Native does not support them (yet).
 * Having them in a separate file allows us to override it to be empty in the
 * React Native SDK.
 */
import { componentInfo as customCodeInfo } from '../blocks/custom-code/component-info';
import { default as customCode } from '../blocks/custom-code/index';
import { componentInfo as embedComponentInfo } from '../blocks/embed/component-info';
import { default as embed } from '../blocks/embed/index';
import { componentInfo as formComponentInfo } from '../blocks/form/form/component-info';
import { default as Form } from '../blocks/form/form/index';
import { componentInfo as formInputComponentInfo } from '../blocks/form/input/component-info';
import { default as FormInput } from '../blocks/form/input/index';
import { componentInfo as formSelectComponentInfo } from '../blocks/form/select/component-info';
import { default as FormSelect } from '../blocks/form/select/index';
import { componentInfo as formSubmitButtonComponentInfo } from '../blocks/form/submit-button/component-info';
import { default as FormSubmitButton } from '../blocks/form/submit-button/index';
import { componentInfo as textAreaComponentInfo } from '../blocks/form/textarea/component-info';
import { default as Textarea } from '../blocks/form/textarea/index';
import { componentInfo as imgComponentInfo } from '../blocks/img/component-info';
import { default as Img } from '../blocks/img/index';
import { componentInfo as videoComponentInfo } from '../blocks/video/component-info';
import { default as Video } from '../blocks/video/index';
import { TARGET } from './target';
export const getExtraComponents = () => [{
        component: customCode,
        ...customCodeInfo
    }, {
        component: embed,
        ...embedComponentInfo
    }, ...(TARGET === 'rsc' ? [] : [{
            component: Form,
            ...formComponentInfo
        }, {
            component: FormInput,
            ...formInputComponentInfo
        }, {
            component: FormSubmitButton,
            ...formSubmitButtonComponentInfo
        }, {
            component: FormSelect,
            ...formSelectComponentInfo
        }, {
            component: Textarea,
            ...textAreaComponentInfo
        }]), {
        component: Img,
        ...imgComponentInfo
    }, {
        component: Video,
        ...videoComponentInfo
    }];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEtY29tcG9uZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb25zdGFudHMvZXh0cmEtY29tcG9uZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLGFBQWEsSUFBSSxjQUFjLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RixPQUFPLEVBQUUsT0FBTyxJQUFJLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLElBQUksa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsT0FBTyxJQUFJLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLElBQUksaUJBQWlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN4RixPQUFPLEVBQUUsT0FBTyxJQUFJLElBQUksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzVELE9BQU8sRUFBRSxhQUFhLElBQUksc0JBQXNCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM5RixPQUFPLEVBQUUsT0FBTyxJQUFJLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxhQUFhLElBQUksdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNoRyxPQUFPLEVBQUUsT0FBTyxJQUFJLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLElBQUksNkJBQTZCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUM3RyxPQUFPLEVBQUUsT0FBTyxJQUFJLGdCQUFnQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsSUFBSSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxPQUFPLElBQUksUUFBUSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGFBQWEsSUFBSSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxPQUFPLElBQUksR0FBRyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsSUFBSSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxPQUFPLElBQUksS0FBSyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBZ0MsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNwRSxTQUFTLEVBQUUsVUFBVTtRQUNyQixHQUFHLGNBQWM7S0FDbEIsRUFBRTtRQUNELFNBQVMsRUFBRSxLQUFLO1FBQ2hCLEdBQUcsa0JBQWtCO0tBQ3RCLEVBQUUsR0FBRyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixTQUFTLEVBQUUsSUFBSTtZQUNmLEdBQUcsaUJBQWlCO1NBQ3JCLEVBQUU7WUFDRCxTQUFTLEVBQUUsU0FBUztZQUNwQixHQUFHLHNCQUFzQjtTQUMxQixFQUFFO1lBQ0QsU0FBUyxFQUFFLGdCQUFnQjtZQUMzQixHQUFHLDZCQUE2QjtTQUNqQyxFQUFFO1lBQ0QsU0FBUyxFQUFFLFVBQVU7WUFDckIsR0FBRyx1QkFBdUI7U0FDM0IsRUFBRTtZQUNELFNBQVMsRUFBRSxRQUFRO1lBQ25CLEdBQUcscUJBQXFCO1NBQ3pCLENBQUMsQ0FBQyxFQUFFO1FBQ0gsU0FBUyxFQUFFLEdBQUc7UUFDZCxHQUFHLGdCQUFnQjtLQUNwQixFQUFFO1FBQ0QsU0FBUyxFQUFFLEtBQUs7UUFDaEIsR0FBRyxrQkFBa0I7S0FDdEIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGVzZSBhcmUgaW4gYSBzZXBhcmF0ZSBmaWxlIGJlY2F1c2UgUmVhY3QgTmF0aXZlIGRvZXMgbm90IHN1cHBvcnQgdGhlbSAoeWV0KS5cbiAqIEhhdmluZyB0aGVtIGluIGEgc2VwYXJhdGUgZmlsZSBhbGxvd3MgdXMgdG8gb3ZlcnJpZGUgaXQgdG8gYmUgZW1wdHkgaW4gdGhlXG4gKiBSZWFjdCBOYXRpdmUgU0RLLlxuICovXG5cbmltcG9ydCB7IGNvbXBvbmVudEluZm8gYXMgY3VzdG9tQ29kZUluZm8gfSBmcm9tICcuLi9ibG9ja3MvY3VzdG9tLWNvZGUvY29tcG9uZW50LWluZm8nO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBjdXN0b21Db2RlIH0gZnJvbSAnLi4vYmxvY2tzL2N1c3RvbS1jb2RlL2luZGV4JztcbmltcG9ydCB7IGNvbXBvbmVudEluZm8gYXMgZW1iZWRDb21wb25lbnRJbmZvIH0gZnJvbSAnLi4vYmxvY2tzL2VtYmVkL2NvbXBvbmVudC1pbmZvJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgZW1iZWQgfSBmcm9tICcuLi9ibG9ja3MvZW1iZWQvaW5kZXgnO1xuaW1wb3J0IHsgY29tcG9uZW50SW5mbyBhcyBmb3JtQ29tcG9uZW50SW5mbyB9IGZyb20gJy4uL2Jsb2Nrcy9mb3JtL2Zvcm0vY29tcG9uZW50LWluZm8nO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBGb3JtIH0gZnJvbSAnLi4vYmxvY2tzL2Zvcm0vZm9ybS9pbmRleCc7XG5pbXBvcnQgeyBjb21wb25lbnRJbmZvIGFzIGZvcm1JbnB1dENvbXBvbmVudEluZm8gfSBmcm9tICcuLi9ibG9ja3MvZm9ybS9pbnB1dC9jb21wb25lbnQtaW5mbyc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEZvcm1JbnB1dCB9IGZyb20gJy4uL2Jsb2Nrcy9mb3JtL2lucHV0L2luZGV4JztcbmltcG9ydCB7IGNvbXBvbmVudEluZm8gYXMgZm9ybVNlbGVjdENvbXBvbmVudEluZm8gfSBmcm9tICcuLi9ibG9ja3MvZm9ybS9zZWxlY3QvY29tcG9uZW50LWluZm8nO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBGb3JtU2VsZWN0IH0gZnJvbSAnLi4vYmxvY2tzL2Zvcm0vc2VsZWN0L2luZGV4JztcbmltcG9ydCB7IGNvbXBvbmVudEluZm8gYXMgZm9ybVN1Ym1pdEJ1dHRvbkNvbXBvbmVudEluZm8gfSBmcm9tICcuLi9ibG9ja3MvZm9ybS9zdWJtaXQtYnV0dG9uL2NvbXBvbmVudC1pbmZvJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgRm9ybVN1Ym1pdEJ1dHRvbiB9IGZyb20gJy4uL2Jsb2Nrcy9mb3JtL3N1Ym1pdC1idXR0b24vaW5kZXgnO1xuaW1wb3J0IHsgY29tcG9uZW50SW5mbyBhcyB0ZXh0QXJlYUNvbXBvbmVudEluZm8gfSBmcm9tICcuLi9ibG9ja3MvZm9ybS90ZXh0YXJlYS9jb21wb25lbnQtaW5mbyc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRleHRhcmVhIH0gZnJvbSAnLi4vYmxvY2tzL2Zvcm0vdGV4dGFyZWEvaW5kZXgnO1xuaW1wb3J0IHsgY29tcG9uZW50SW5mbyBhcyBpbWdDb21wb25lbnRJbmZvIH0gZnJvbSAnLi4vYmxvY2tzL2ltZy9jb21wb25lbnQtaW5mbyc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEltZyB9IGZyb20gJy4uL2Jsb2Nrcy9pbWcvaW5kZXgnO1xuaW1wb3J0IHsgY29tcG9uZW50SW5mbyBhcyB2aWRlb0NvbXBvbmVudEluZm8gfSBmcm9tICcuLi9ibG9ja3MvdmlkZW8vY29tcG9uZW50LWluZm8nO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBWaWRlbyB9IGZyb20gJy4uL2Jsb2Nrcy92aWRlby9pbmRleCc7XG5pbXBvcnQgdHlwZSB7IFJlZ2lzdGVyZWRDb21wb25lbnQgfSBmcm9tICcuLi9jb250ZXh0L3R5cGVzJztcbmltcG9ydCB7IFRBUkdFVCB9IGZyb20gJy4vdGFyZ2V0JztcbmV4cG9ydCBjb25zdCBnZXRFeHRyYUNvbXBvbmVudHM6ICgpID0+IFJlZ2lzdGVyZWRDb21wb25lbnRbXSA9ICgpID0+IFt7XG4gIGNvbXBvbmVudDogY3VzdG9tQ29kZSxcbiAgLi4uY3VzdG9tQ29kZUluZm9cbn0sIHtcbiAgY29tcG9uZW50OiBlbWJlZCxcbiAgLi4uZW1iZWRDb21wb25lbnRJbmZvXG59LCAuLi4oVEFSR0VUID09PSAncnNjJyA/IFtdIDogW3tcbiAgY29tcG9uZW50OiBGb3JtLFxuICAuLi5mb3JtQ29tcG9uZW50SW5mb1xufSwge1xuICBjb21wb25lbnQ6IEZvcm1JbnB1dCxcbiAgLi4uZm9ybUlucHV0Q29tcG9uZW50SW5mb1xufSwge1xuICBjb21wb25lbnQ6IEZvcm1TdWJtaXRCdXR0b24sXG4gIC4uLmZvcm1TdWJtaXRCdXR0b25Db21wb25lbnRJbmZvXG59LCB7XG4gIGNvbXBvbmVudDogRm9ybVNlbGVjdCxcbiAgLi4uZm9ybVNlbGVjdENvbXBvbmVudEluZm9cbn0sIHtcbiAgY29tcG9uZW50OiBUZXh0YXJlYSxcbiAgLi4udGV4dEFyZWFDb21wb25lbnRJbmZvXG59XSksIHtcbiAgY29tcG9uZW50OiBJbWcsXG4gIC4uLmltZ0NvbXBvbmVudEluZm9cbn0sIHtcbiAgY29tcG9uZW50OiBWaWRlbyxcbiAgLi4udmlkZW9Db21wb25lbnRJbmZvXG59XSJdfQ==
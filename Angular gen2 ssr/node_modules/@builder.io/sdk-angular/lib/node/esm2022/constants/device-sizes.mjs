import { fastClone } from '../functions/fast-clone';
const SIZES = {
    xsmall: {
        min: 0,
        default: 160,
        max: 320
    },
    small: {
        min: 321,
        default: 321,
        max: 640
    },
    medium: {
        min: 641,
        default: 642,
        max: 991
    },
    large: {
        min: 990,
        default: 991,
        max: 1200
    }
};
export const getMaxWidthQueryForSize = (size, sizeValues = SIZES) => `@media (max-width: ${sizeValues[size].max}px)`;
export const getSizesForBreakpoints = (breakpoints) => {
    const newSizes = fastClone(SIZES); // Note: this helps to get a deep clone of fields like small, medium etc
    if (!breakpoints) {
        return newSizes;
    }
    const { xsmall, small, medium } = breakpoints;
    if (xsmall) {
        const xsmallMin = Math.floor(xsmall / 2);
        newSizes.xsmall = {
            max: xsmall,
            min: xsmallMin,
            default: xsmallMin + 1
        };
    }
    if (!small || !medium) {
        return newSizes;
    }
    const smallMin = xsmall ? newSizes.xsmall.max + 1 : Math.floor(small / 2);
    newSizes.small = {
        max: small,
        min: smallMin,
        default: smallMin + 1
    };
    const mediumMin = newSizes.small.max + 1;
    newSizes.medium = {
        max: medium,
        min: mediumMin,
        default: mediumMin + 1
    };
    const largeMin = newSizes.medium.max + 1;
    newSizes.large = {
        max: 2000,
        // TODO: decide upper limit
        min: largeMin,
        default: largeMin + 1
    };
    return newSizes;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXNpemVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbnN0YW50cy9kZXZpY2Utc2l6ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBT3BELE1BQU0sS0FBSyxHQUEyQjtJQUNwQyxNQUFNLEVBQUU7UUFDTixHQUFHLEVBQUUsQ0FBQztRQUNOLE9BQU8sRUFBRSxHQUFHO1FBQ1osR0FBRyxFQUFFLEdBQUc7S0FDVDtJQUNELEtBQUssRUFBRTtRQUNMLEdBQUcsRUFBRSxHQUFHO1FBQ1IsT0FBTyxFQUFFLEdBQUc7UUFDWixHQUFHLEVBQUUsR0FBRztLQUNUO0lBQ0QsTUFBTSxFQUFFO1FBQ04sR0FBRyxFQUFFLEdBQUc7UUFDUixPQUFPLEVBQUUsR0FBRztRQUNaLEdBQUcsRUFBRSxHQUFHO0tBQ1Q7SUFDRCxLQUFLLEVBQUU7UUFDTCxHQUFHLEVBQUUsR0FBRztRQUNSLE9BQU8sRUFBRSxHQUFHO1FBQ1osR0FBRyxFQUFFLElBQUk7S0FDVjtDQUNGLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLElBQWMsRUFBRSxVQUFVLEdBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBTS9ILE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsV0FBd0IsRUFBRSxFQUFFO0lBQ2pFLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHdFQUF3RTtJQUUzRyxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2hCLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsTUFBTSxFQUNKLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNQLEdBQUcsV0FBVyxDQUFDO0lBQ2hCLElBQUksTUFBTSxFQUFFO1FBQ1YsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekMsUUFBUSxDQUFDLE1BQU0sR0FBRztZQUNoQixHQUFHLEVBQUUsTUFBTTtZQUNYLEdBQUcsRUFBRSxTQUFTO1lBQ2QsT0FBTyxFQUFFLFNBQVMsR0FBRyxDQUFDO1NBQ3ZCLENBQUM7S0FDSDtJQUNELElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDckIsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFDRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUUsUUFBUSxDQUFDLEtBQUssR0FBRztRQUNmLEdBQUcsRUFBRSxLQUFLO1FBQ1YsR0FBRyxFQUFFLFFBQVE7UUFDYixPQUFPLEVBQUUsUUFBUSxHQUFHLENBQUM7S0FDdEIsQ0FBQztJQUNGLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN6QyxRQUFRLENBQUMsTUFBTSxHQUFHO1FBQ2hCLEdBQUcsRUFBRSxNQUFNO1FBQ1gsR0FBRyxFQUFFLFNBQVM7UUFDZCxPQUFPLEVBQUUsU0FBUyxHQUFHLENBQUM7S0FDdkIsQ0FBQztJQUNGLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN6QyxRQUFRLENBQUMsS0FBSyxHQUFHO1FBQ2YsR0FBRyxFQUFFLElBQUk7UUFDVCwyQkFBMkI7UUFDM0IsR0FBRyxFQUFFLFFBQVE7UUFDYixPQUFPLEVBQUUsUUFBUSxHQUFHLENBQUM7S0FDdEIsQ0FBQztJQUNGLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZhc3RDbG9uZSB9IGZyb20gJy4uL2Z1bmN0aW9ucy9mYXN0LWNsb25lJztcbmV4cG9ydCB0eXBlIFNpemVOYW1lID0gJ2xhcmdlJyB8ICdtZWRpdW0nIHwgJ3NtYWxsJyB8ICd4c21hbGwnO1xuaW50ZXJmYWNlIFNpemUge1xuICBtaW46IG51bWJlcjtcbiAgZGVmYXVsdDogbnVtYmVyO1xuICBtYXg6IG51bWJlcjtcbn1cbmNvbnN0IFNJWkVTOiBSZWNvcmQ8U2l6ZU5hbWUsIFNpemU+ID0ge1xuICB4c21hbGw6IHtcbiAgICBtaW46IDAsXG4gICAgZGVmYXVsdDogMTYwLFxuICAgIG1heDogMzIwXG4gIH0sXG4gIHNtYWxsOiB7XG4gICAgbWluOiAzMjEsXG4gICAgZGVmYXVsdDogMzIxLFxuICAgIG1heDogNjQwXG4gIH0sXG4gIG1lZGl1bToge1xuICAgIG1pbjogNjQxLFxuICAgIGRlZmF1bHQ6IDY0MixcbiAgICBtYXg6IDk5MVxuICB9LFxuICBsYXJnZToge1xuICAgIG1pbjogOTkwLFxuICAgIGRlZmF1bHQ6IDk5MSxcbiAgICBtYXg6IDEyMDBcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBnZXRNYXhXaWR0aFF1ZXJ5Rm9yU2l6ZSA9IChzaXplOiBTaXplTmFtZSwgc2l6ZVZhbHVlcyA9IFNJWkVTKSA9PiBgQG1lZGlhIChtYXgtd2lkdGg6ICR7c2l6ZVZhbHVlc1tzaXplXS5tYXh9cHgpYDtcbmludGVyZmFjZSBCcmVha3BvaW50cyB7XG4gIHhzbWFsbD86IG51bWJlcjtcbiAgc21hbGw/OiBudW1iZXI7XG4gIG1lZGl1bT86IG51bWJlcjtcbn1cbmV4cG9ydCBjb25zdCBnZXRTaXplc0ZvckJyZWFrcG9pbnRzID0gKGJyZWFrcG9pbnRzOiBCcmVha3BvaW50cykgPT4ge1xuICBjb25zdCBuZXdTaXplcyA9IGZhc3RDbG9uZShTSVpFUyk7IC8vIE5vdGU6IHRoaXMgaGVscHMgdG8gZ2V0IGEgZGVlcCBjbG9uZSBvZiBmaWVsZHMgbGlrZSBzbWFsbCwgbWVkaXVtIGV0Y1xuXG4gIGlmICghYnJlYWtwb2ludHMpIHtcbiAgICByZXR1cm4gbmV3U2l6ZXM7XG4gIH1cbiAgY29uc3Qge1xuICAgIHhzbWFsbCxcbiAgICBzbWFsbCxcbiAgICBtZWRpdW1cbiAgfSA9IGJyZWFrcG9pbnRzO1xuICBpZiAoeHNtYWxsKSB7XG4gICAgY29uc3QgeHNtYWxsTWluID0gTWF0aC5mbG9vcih4c21hbGwgLyAyKTtcbiAgICBuZXdTaXplcy54c21hbGwgPSB7XG4gICAgICBtYXg6IHhzbWFsbCxcbiAgICAgIG1pbjogeHNtYWxsTWluLFxuICAgICAgZGVmYXVsdDogeHNtYWxsTWluICsgMVxuICAgIH07XG4gIH1cbiAgaWYgKCFzbWFsbCB8fCAhbWVkaXVtKSB7XG4gICAgcmV0dXJuIG5ld1NpemVzO1xuICB9XG4gIGNvbnN0IHNtYWxsTWluID0geHNtYWxsID8gbmV3U2l6ZXMueHNtYWxsLm1heCArIDEgOiBNYXRoLmZsb29yKHNtYWxsIC8gMik7XG4gIG5ld1NpemVzLnNtYWxsID0ge1xuICAgIG1heDogc21hbGwsXG4gICAgbWluOiBzbWFsbE1pbixcbiAgICBkZWZhdWx0OiBzbWFsbE1pbiArIDFcbiAgfTtcbiAgY29uc3QgbWVkaXVtTWluID0gbmV3U2l6ZXMuc21hbGwubWF4ICsgMTtcbiAgbmV3U2l6ZXMubWVkaXVtID0ge1xuICAgIG1heDogbWVkaXVtLFxuICAgIG1pbjogbWVkaXVtTWluLFxuICAgIGRlZmF1bHQ6IG1lZGl1bU1pbiArIDFcbiAgfTtcbiAgY29uc3QgbGFyZ2VNaW4gPSBuZXdTaXplcy5tZWRpdW0ubWF4ICsgMTtcbiAgbmV3U2l6ZXMubGFyZ2UgPSB7XG4gICAgbWF4OiAyMDAwLFxuICAgIC8vIFRPRE86IGRlY2lkZSB1cHBlciBsaW1pdFxuICAgIG1pbjogbGFyZ2VNaW4sXG4gICAgZGVmYXVsdDogbGFyZ2VNaW4gKyAxXG4gIH07XG4gIHJldHVybiBuZXdTaXplcztcbn0iXX0=
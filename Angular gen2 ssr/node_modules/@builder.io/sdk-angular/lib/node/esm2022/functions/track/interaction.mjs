function round(num) {
    return Math.round(num * 1000) / 1000;
}
const findParentElement = (target, callback, checkElement = true) => {
    if (!(target instanceof HTMLElement)) {
        return null;
    }
    let parent = checkElement ? target : target.parentElement;
    do {
        if (!parent) {
            return null;
        }
        const matches = callback(parent);
        if (matches) {
            return parent;
        }
    } while (parent = parent.parentElement);
    return null;
};
const findBuilderParent = (target) => findParentElement(target, el => {
    const id = el.getAttribute('builder-id') || el.id;
    return Boolean(id?.indexOf('builder-') === 0);
});
const computeOffset = ({ event, target }) => {
    const targetRect = target.getBoundingClientRect();
    const xOffset = event.clientX - targetRect.left;
    const yOffset = event.clientY - targetRect.top;
    const xRatio = round(xOffset / targetRect.width);
    const yRatio = round(yOffset / targetRect.height);
    return {
        x: xRatio,
        y: yRatio
    };
};
export const getInteractionPropertiesForEvent = (event) => {
    const target = event.target;
    const targetBuilderElement = target && findBuilderParent(target);
    const builderId = targetBuilderElement?.getAttribute('builder-id') || targetBuilderElement?.id;
    return {
        targetBuilderElement: builderId || undefined,
        metadata: {
            targetOffset: target ? computeOffset({
                event,
                target
            }) : undefined,
            builderTargetOffset: targetBuilderElement ? computeOffset({
                event,
                target: targetBuilderElement
            }) : undefined,
            builderElementIndex: targetBuilderElement && builderId ? [].slice.call(document.getElementsByClassName(builderId)).indexOf(targetBuilderElement) : undefined
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnVuY3Rpb25zL3RyYWNrL2ludGVyYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsS0FBSyxDQUFDLEdBQVc7SUFDeEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDdkMsQ0FBQztBQUNELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxNQUFtQixFQUFFLFFBQTJDLEVBQUUsWUFBWSxHQUFHLElBQUksRUFBc0IsRUFBRTtJQUN0SSxJQUFJLENBQUMsQ0FBQyxNQUFNLFlBQVksV0FBVyxDQUFDLEVBQUU7UUFDcEMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELElBQUksTUFBTSxHQUF1QixZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztJQUM5RSxHQUFHO1FBQ0QsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakMsSUFBSSxPQUFPLEVBQUU7WUFDWCxPQUFPLE1BQU0sQ0FBQztTQUNmO0tBQ0YsUUFBUSxNQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsRUFBRTtJQUN4QyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUNGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxNQUFtQixFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7SUFDaEYsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2xELE9BQU8sT0FBTyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQyxDQUFDLENBQUM7QUFLSCxNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQ3JCLEtBQUssRUFDTCxNQUFNLEVBSVAsRUFBVSxFQUFFO0lBQ1gsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDbEQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO0lBQ2hELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQztJQUMvQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRCxPQUFPO1FBQ0wsQ0FBQyxFQUFFLE1BQU07UUFDVCxDQUFDLEVBQUUsTUFBTTtLQUNWLENBQUM7QUFDSixDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUNwRSxNQUFNLE1BQU0sR0FBSSxLQUFLLENBQUMsTUFBNkIsQ0FBQztJQUNwRCxNQUFNLG9CQUFvQixHQUFHLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRSxNQUFNLFNBQVMsR0FBRyxvQkFBb0IsRUFBRSxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksb0JBQW9CLEVBQUUsRUFBRSxDQUFDO0lBQy9GLE9BQU87UUFDTCxvQkFBb0IsRUFBRSxTQUFTLElBQUksU0FBUztRQUM1QyxRQUFRLEVBQUU7WUFDUixZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7Z0JBQ25DLEtBQUs7Z0JBQ0wsTUFBTTthQUNQLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztZQUNkLG1CQUFtQixFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7Z0JBQ3hELEtBQUs7Z0JBQ0wsTUFBTSxFQUFFLG9CQUFvQjthQUM3QixDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDZCxtQkFBbUIsRUFBRSxvQkFBb0IsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFFLEVBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztTQUM1SztLQUNGLENBQUM7QUFDSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByb3VuZChudW06IG51bWJlcikge1xuICByZXR1cm4gTWF0aC5yb3VuZChudW0gKiAxMDAwKSAvIDEwMDA7XG59XG5jb25zdCBmaW5kUGFyZW50RWxlbWVudCA9ICh0YXJnZXQ6IEhUTUxFbGVtZW50LCBjYWxsYmFjazogKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiBib29sZWFuLCBjaGVja0VsZW1lbnQgPSB0cnVlKTogSFRNTEVsZW1lbnQgfCBudWxsID0+IHtcbiAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGV0IHBhcmVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gY2hlY2tFbGVtZW50ID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gIGRvIHtcbiAgICBpZiAoIXBhcmVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoZXMgPSBjYWxsYmFjayhwYXJlbnQpO1xuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cbiAgfSB3aGlsZSAocGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQpO1xuICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCBmaW5kQnVpbGRlclBhcmVudCA9ICh0YXJnZXQ6IEhUTUxFbGVtZW50KSA9PiBmaW5kUGFyZW50RWxlbWVudCh0YXJnZXQsIGVsID0+IHtcbiAgY29uc3QgaWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2J1aWxkZXItaWQnKSB8fCBlbC5pZDtcbiAgcmV0dXJuIEJvb2xlYW4oaWQ/LmluZGV4T2YoJ2J1aWxkZXItJykgPT09IDApO1xufSk7XG50eXBlIE9mZnNldCA9IHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG59O1xuY29uc3QgY29tcHV0ZU9mZnNldCA9ICh7XG4gIGV2ZW50LFxuICB0YXJnZXRcbn06IHtcbiAgZXZlbnQ6IE1vdXNlRXZlbnQ7XG4gIHRhcmdldDogSFRNTEVsZW1lbnQ7XG59KTogT2Zmc2V0ID0+IHtcbiAgY29uc3QgdGFyZ2V0UmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgeE9mZnNldCA9IGV2ZW50LmNsaWVudFggLSB0YXJnZXRSZWN0LmxlZnQ7XG4gIGNvbnN0IHlPZmZzZXQgPSBldmVudC5jbGllbnRZIC0gdGFyZ2V0UmVjdC50b3A7XG4gIGNvbnN0IHhSYXRpbyA9IHJvdW5kKHhPZmZzZXQgLyB0YXJnZXRSZWN0LndpZHRoKTtcbiAgY29uc3QgeVJhdGlvID0gcm91bmQoeU9mZnNldCAvIHRhcmdldFJlY3QuaGVpZ2h0KTtcbiAgcmV0dXJuIHtcbiAgICB4OiB4UmF0aW8sXG4gICAgeTogeVJhdGlvXG4gIH07XG59O1xuZXhwb3J0IGNvbnN0IGdldEludGVyYWN0aW9uUHJvcGVydGllc0ZvckV2ZW50ID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gIGNvbnN0IHRhcmdldCA9IChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQgfCBudWxsKTtcbiAgY29uc3QgdGFyZ2V0QnVpbGRlckVsZW1lbnQgPSB0YXJnZXQgJiYgZmluZEJ1aWxkZXJQYXJlbnQodGFyZ2V0KTtcbiAgY29uc3QgYnVpbGRlcklkID0gdGFyZ2V0QnVpbGRlckVsZW1lbnQ/LmdldEF0dHJpYnV0ZSgnYnVpbGRlci1pZCcpIHx8IHRhcmdldEJ1aWxkZXJFbGVtZW50Py5pZDtcbiAgcmV0dXJuIHtcbiAgICB0YXJnZXRCdWlsZGVyRWxlbWVudDogYnVpbGRlcklkIHx8IHVuZGVmaW5lZCxcbiAgICBtZXRhZGF0YToge1xuICAgICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXQgPyBjb21wdXRlT2Zmc2V0KHtcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIHRhcmdldFxuICAgICAgfSkgOiB1bmRlZmluZWQsXG4gICAgICBidWlsZGVyVGFyZ2V0T2Zmc2V0OiB0YXJnZXRCdWlsZGVyRWxlbWVudCA/IGNvbXB1dGVPZmZzZXQoe1xuICAgICAgICBldmVudCxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRCdWlsZGVyRWxlbWVudFxuICAgICAgfSkgOiB1bmRlZmluZWQsXG4gICAgICBidWlsZGVyRWxlbWVudEluZGV4OiB0YXJnZXRCdWlsZGVyRWxlbWVudCAmJiBidWlsZGVySWQgPyAoW10gYXMgRWxlbWVudFtdKS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYnVpbGRlcklkKSkuaW5kZXhPZih0YXJnZXRCdWlsZGVyRWxlbWVudCkgOiB1bmRlZmluZWRcbiAgICB9XG4gIH07XG59Il19
/*
 * THIS FILE IS EXPECTED TO EXIST WITH THIS EXACT NAME BY SUBSEQUENT BUNDLE STEPS THAT TRANSFORM IT.
 * DO NOT RENAME THIS FILE.
 */
import { isBrowser } from '../is-browser';
import { runInBrowser } from './browser-runtime/browser';
/**
 * THIS IS A MAGICAL IMPORT. It is aliased by the build process of every SDK configuration, so that
 * it points to the correct runtime for that configuration, which are expected to live exactly at:
 *  - ./browser-runtime/index.js
 *  - ./node-runtime/index.js
 *  - ./edge-runtime/index.js
 *
 * We have code in `/output-generation` that does this aliasing, and is re-used by each SDK.
 * Also, each individual `tsconfig.json` aliases this import to the browser runtime so that the
 * types can be resolved correctly.
 */
import { evaluator } from "./node-runtime/index";
import { shouldForceBrowserRuntimeInNode } from './should-force-browser-runtime-in-node';
/**
 * Even though we have separate runtimes for browser/node/edge, sometimes frameworks will
 * end up sending the server runtime code to the browser (most notably in dev mode).
 */
export const chooseBrowserOrServerEval = (args) => isBrowser() || shouldForceBrowserRuntimeInNode({
    shouldLogWarning: true
}) ? runInBrowser(args) : evaluator(args);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hvb3NlLWV2YWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnVuY3Rpb25zL2V2YWx1YXRlL2Nob29zZS1ldmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR3pEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFekY7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxJQUFrQixFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSwrQkFBK0IsQ0FBQztJQUM5RyxnQkFBZ0IsRUFBRSxJQUFJO0NBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVEhJUyBGSUxFIElTIEVYUEVDVEVEIFRPIEVYSVNUIFdJVEggVEhJUyBFWEFDVCBOQU1FIEJZIFNVQlNFUVVFTlQgQlVORExFIFNURVBTIFRIQVQgVFJBTlNGT1JNIElULlxuICogRE8gTk9UIFJFTkFNRSBUSElTIEZJTEUuXG4gKi9cbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4uL2lzLWJyb3dzZXInO1xuaW1wb3J0IHsgcnVuSW5Ccm93c2VyIH0gZnJvbSAnLi9icm93c2VyLXJ1bnRpbWUvYnJvd3Nlcic7XG5pbXBvcnQgdHlwZSB7IEV4ZWN1dG9yQXJncyB9IGZyb20gJy4vaGVscGVycyc7XG5cbi8qKlxuICogVEhJUyBJUyBBIE1BR0lDQUwgSU1QT1JULiBJdCBpcyBhbGlhc2VkIGJ5IHRoZSBidWlsZCBwcm9jZXNzIG9mIGV2ZXJ5IFNESyBjb25maWd1cmF0aW9uLCBzbyB0aGF0XG4gKiBpdCBwb2ludHMgdG8gdGhlIGNvcnJlY3QgcnVudGltZSBmb3IgdGhhdCBjb25maWd1cmF0aW9uLCB3aGljaCBhcmUgZXhwZWN0ZWQgdG8gbGl2ZSBleGFjdGx5IGF0OlxuICogIC0gLi9icm93c2VyLXJ1bnRpbWUvaW5kZXguanNcbiAqICAtIC4vbm9kZS1ydW50aW1lL2luZGV4LmpzXG4gKiAgLSAuL2VkZ2UtcnVudGltZS9pbmRleC5qc1xuICpcbiAqIFdlIGhhdmUgY29kZSBpbiBgL291dHB1dC1nZW5lcmF0aW9uYCB0aGF0IGRvZXMgdGhpcyBhbGlhc2luZywgYW5kIGlzIHJlLXVzZWQgYnkgZWFjaCBTREsuXG4gKiBBbHNvLCBlYWNoIGluZGl2aWR1YWwgYHRzY29uZmlnLmpzb25gIGFsaWFzZXMgdGhpcyBpbXBvcnQgdG8gdGhlIGJyb3dzZXIgcnVudGltZSBzbyB0aGF0IHRoZVxuICogdHlwZXMgY2FuIGJlIHJlc29sdmVkIGNvcnJlY3RseS5cbiAqL1xuaW1wb3J0IHsgZXZhbHVhdG9yIH0gZnJvbSBcIi4vbm9kZS1ydW50aW1lL2luZGV4XCI7XG5pbXBvcnQgeyBzaG91bGRGb3JjZUJyb3dzZXJSdW50aW1lSW5Ob2RlIH0gZnJvbSAnLi9zaG91bGQtZm9yY2UtYnJvd3Nlci1ydW50aW1lLWluLW5vZGUnO1xuXG4vKipcbiAqIEV2ZW4gdGhvdWdoIHdlIGhhdmUgc2VwYXJhdGUgcnVudGltZXMgZm9yIGJyb3dzZXIvbm9kZS9lZGdlLCBzb21ldGltZXMgZnJhbWV3b3JrcyB3aWxsXG4gKiBlbmQgdXAgc2VuZGluZyB0aGUgc2VydmVyIHJ1bnRpbWUgY29kZSB0byB0aGUgYnJvd3NlciAobW9zdCBub3RhYmx5IGluIGRldiBtb2RlKS5cbiAqL1xuZXhwb3J0IGNvbnN0IGNob29zZUJyb3dzZXJPclNlcnZlckV2YWwgPSAoYXJnczogRXhlY3V0b3JBcmdzKSA9PiBpc0Jyb3dzZXIoKSB8fCBzaG91bGRGb3JjZUJyb3dzZXJSdW50aW1lSW5Ob2RlKHtcbiAgc2hvdWxkTG9nV2FybmluZzogdHJ1ZVxufSkgPyBydW5JbkJyb3dzZXIoYXJncykgOiBldmFsdWF0b3IoYXJncyk7Il19
import { traverse } from './traverse';
function isLocalizedField(value) {
    return value && typeof value === 'object' && value['@type'] === '@builder.io/core:LocalizedValue';
}
function containsLocalizedValues(data) {
    if (!data || !Object.getOwnPropertyNames(data).length) {
        return false;
    }
    let hasLocalizedValues = false;
    traverse(data, value => {
        if (isLocalizedField(value)) {
            hasLocalizedValues = true;
            return;
        }
    });
    return hasLocalizedValues;
}
function extractLocalizedValues(data, locale) {
    if (!data || !Object.getOwnPropertyNames(data).length) {
        return {};
    }
    traverse(data, (value, update) => {
        if (isLocalizedField(value)) {
            update(value[locale] ?? undefined);
        }
    });
    return data;
}
export function resolveLocalizedValues(block, locale) {
    if (block.component?.options && containsLocalizedValues(block.component?.options)) {
        if (!locale) {
            console.warn('[Builder.io] In order to use localized fields in Builder, you must pass a locale prop to the BuilderComponent or to options object while fetching the content to resolve localized fields. Learn more: https://www.builder.io/c/docs/localization-inline#targeting-and-inline-localization');
        }
        block.component.options = extractLocalizedValues(block.component.options, locale ?? 'Default');
    }
    return block;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdC1sb2NhbGl6ZWQtdmFsdWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Z1bmN0aW9ucy9leHRyYWN0LWxvY2FsaXplZC12YWx1ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxTQUFTLGdCQUFnQixDQUFDLEtBQVU7SUFDbEMsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxpQ0FBaUMsQ0FBQztBQUNwRyxDQUFDO0FBQ0QsU0FBUyx1QkFBdUIsQ0FBQyxJQUF5QjtJQUN4RCxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUNyRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSSxrQkFBa0IsR0FBRyxLQUFLLENBQUM7SUFDL0IsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRTtRQUNyQixJQUFJLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNCLGtCQUFrQixHQUFHLElBQUksQ0FBQztZQUMxQixPQUFPO1NBQ1I7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sa0JBQWtCLENBQUM7QUFDNUIsQ0FBQztBQUNELFNBQVMsc0JBQXNCLENBQUMsSUFBeUIsRUFBRSxNQUFjO0lBQ3ZFLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQ3JELE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQy9CLElBQUksZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBQ0QsTUFBTSxVQUFVLHNCQUFzQixDQUFDLEtBQW1CLEVBQUUsTUFBMEI7SUFDcEYsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFLE9BQU8sSUFBSSx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUFFO1FBQ2pGLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPLENBQUMsSUFBSSxDQUFDLDRSQUE0UixDQUFDLENBQUM7U0FDNVM7UUFDRCxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLENBQUM7S0FDaEc7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJ1aWxkZXJCbG9jayB9IGZyb20gJy4uL3R5cGVzL2J1aWxkZXItYmxvY2snO1xuaW1wb3J0IHsgdHJhdmVyc2UgfSBmcm9tICcuL3RyYXZlcnNlJztcbmZ1bmN0aW9uIGlzTG9jYWxpemVkRmllbGQodmFsdWU6IGFueSkge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZVsnQHR5cGUnXSA9PT0gJ0BidWlsZGVyLmlvL2NvcmU6TG9jYWxpemVkVmFsdWUnO1xufVxuZnVuY3Rpb24gY29udGFpbnNMb2NhbGl6ZWRWYWx1ZXMoZGF0YTogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICBpZiAoIWRhdGEgfHwgIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRhdGEpLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgaGFzTG9jYWxpemVkVmFsdWVzID0gZmFsc2U7XG4gIHRyYXZlcnNlKGRhdGEsIHZhbHVlID0+IHtcbiAgICBpZiAoaXNMb2NhbGl6ZWRGaWVsZCh2YWx1ZSkpIHtcbiAgICAgIGhhc0xvY2FsaXplZFZhbHVlcyA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGhhc0xvY2FsaXplZFZhbHVlcztcbn1cbmZ1bmN0aW9uIGV4dHJhY3RMb2NhbGl6ZWRWYWx1ZXMoZGF0YTogUmVjb3JkPHN0cmluZywgYW55PiwgbG9jYWxlOiBzdHJpbmcpIHtcbiAgaWYgKCFkYXRhIHx8ICFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkYXRhKS5sZW5ndGgpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgdHJhdmVyc2UoZGF0YSwgKHZhbHVlLCB1cGRhdGUpID0+IHtcbiAgICBpZiAoaXNMb2NhbGl6ZWRGaWVsZCh2YWx1ZSkpIHtcbiAgICAgIHVwZGF0ZSh2YWx1ZVtsb2NhbGVdID8/IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUxvY2FsaXplZFZhbHVlcyhibG9jazogQnVpbGRlckJsb2NrLCBsb2NhbGU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICBpZiAoYmxvY2suY29tcG9uZW50Py5vcHRpb25zICYmIGNvbnRhaW5zTG9jYWxpemVkVmFsdWVzKGJsb2NrLmNvbXBvbmVudD8ub3B0aW9ucykpIHtcbiAgICBpZiAoIWxvY2FsZSkge1xuICAgICAgY29uc29sZS53YXJuKCdbQnVpbGRlci5pb10gSW4gb3JkZXIgdG8gdXNlIGxvY2FsaXplZCBmaWVsZHMgaW4gQnVpbGRlciwgeW91IG11c3QgcGFzcyBhIGxvY2FsZSBwcm9wIHRvIHRoZSBCdWlsZGVyQ29tcG9uZW50IG9yIHRvIG9wdGlvbnMgb2JqZWN0IHdoaWxlIGZldGNoaW5nIHRoZSBjb250ZW50IHRvIHJlc29sdmUgbG9jYWxpemVkIGZpZWxkcy4gTGVhcm4gbW9yZTogaHR0cHM6Ly93d3cuYnVpbGRlci5pby9jL2RvY3MvbG9jYWxpemF0aW9uLWlubGluZSN0YXJnZXRpbmctYW5kLWlubGluZS1sb2NhbGl6YXRpb24nKTtcbiAgICB9XG4gICAgYmxvY2suY29tcG9uZW50Lm9wdGlvbnMgPSBleHRyYWN0TG9jYWxpemVkVmFsdWVzKGJsb2NrLmNvbXBvbmVudC5vcHRpb25zLCBsb2NhbGUgPz8gJ0RlZmF1bHQnKTtcbiAgfVxuICByZXR1cm4gYmxvY2s7XG59Il19
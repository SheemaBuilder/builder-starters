import { TARGET } from '../../constants/target';
import { logger } from '../../helpers/logger';
import { getSdkHeaders } from '../../helpers/sdk-headers';
import { getSessionId } from '../../helpers/sessionId';
import { getVisitorId } from '../../helpers/visitorId';
import { isBrowser } from '../is-browser';
import { isEditing } from '../is-editing';
import { logFetch } from '../log-fetch';
import { getUserAttributes } from './helpers';
const getTrackingEventData = async ({ canTrack }) => {
    if (!canTrack) {
        return {
            visitorId: undefined,
            sessionId: undefined
        };
    }
    const sessionId = await getSessionId({
        canTrack
    });
    const visitorId = getVisitorId({
        canTrack
    });
    return {
        sessionId,
        visitorId
    };
};
const createEvent = async ({ type: eventType, canTrack, apiKey, metadata, ...properties }) => ({
    type: eventType,
    data: {
        ...properties,
        metadata: {
            url: location.href,
            ...metadata
        },
        ...(await getTrackingEventData({
            canTrack
        })),
        userAttributes: getUserAttributes(),
        ownerId: apiKey
    }
});
export async function _track({ apiHost, ...eventProps }) {
    if (!eventProps.apiKey) {
        logger.error('Missing API key for track call. Please provide your API key.');
        return;
    }
    if (!eventProps.canTrack) {
        return;
    }
    if (isEditing()) {
        return;
    }
    if (!(isBrowser() || TARGET === 'reactNative')) {
        return;
    }
    const baseUrl = apiHost || 'https://cdn.builder.io';
    const url = `${baseUrl}/api/v1/track`;
    logFetch(url);
    return fetch(url, {
        method: 'POST',
        body: JSON.stringify({
            events: [await createEvent(eventProps)]
        }),
        headers: {
            'content-type': 'application/json',
            ...getSdkHeaders()
        },
        mode: 'cors'
    }).catch(err => {
        console.error('Failed to track: ', err);
    });
}
export const track = (args) => _track({
    ...args,
    canTrack: true
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnVuY3Rpb25zL3RyYWNrL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBd0M5QyxNQUFNLG9CQUFvQixHQUFHLEtBQUssRUFBRSxFQUNsQyxRQUFRLEVBQ0MsRUFBeUIsRUFBRTtJQUNwQyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsT0FBTztZQUNMLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFNBQVMsRUFBRSxTQUFTO1NBQ3JCLENBQUM7S0FDSDtJQUNELE1BQU0sU0FBUyxHQUFHLE1BQU0sWUFBWSxDQUFDO1FBQ25DLFFBQVE7S0FDVCxDQUFDLENBQUM7SUFDSCxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUM7UUFDN0IsUUFBUTtLQUNULENBQUMsQ0FBQztJQUNILE9BQU87UUFDTCxTQUFTO1FBQ1QsU0FBUztLQUNWLENBQUM7QUFDSixDQUFDLENBQUM7QUFZRixNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsRUFDekIsSUFBSSxFQUFFLFNBQVMsRUFDZixRQUFRLEVBQ1IsTUFBTSxFQUNOLFFBQVEsRUFDUixHQUFHLFVBQVUsRUFDRixFQUFrQixFQUFFLENBQUMsQ0FBQztJQUNqQyxJQUFJLEVBQUUsU0FBUztJQUNmLElBQUksRUFBRTtRQUNKLEdBQUcsVUFBVTtRQUNiLFFBQVEsRUFBRTtZQUNSLEdBQUcsRUFBRSxRQUFRLENBQUMsSUFBSTtZQUNsQixHQUFHLFFBQVE7U0FDWjtRQUNELEdBQUcsQ0FBQyxNQUFNLG9CQUFvQixDQUFDO1lBQzdCLFFBQVE7U0FDVCxDQUFDLENBQUM7UUFDSCxjQUFjLEVBQUUsaUJBQWlCLEVBQUU7UUFDbkMsT0FBTyxFQUFFLE1BQU07S0FDaEI7Q0FDRixDQUFDLENBQUM7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLE1BQU0sQ0FBQyxFQUMzQixPQUFPLEVBQ1AsR0FBRyxVQUFVLEVBR2Q7SUFDQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtRQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7UUFDN0UsT0FBTztLQUNSO0lBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7UUFDeEIsT0FBTztLQUNSO0lBQ0QsSUFBSSxTQUFTLEVBQUUsRUFBRTtRQUNmLE9BQU87S0FDUjtJQUNELElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLE1BQU0sS0FBSyxhQUFhLENBQUMsRUFBRTtRQUM5QyxPQUFPO0tBQ1I7SUFDRCxNQUFNLE9BQU8sR0FBRyxPQUFPLElBQUksd0JBQXdCLENBQUM7SUFDcEQsTUFBTSxHQUFHLEdBQUcsR0FBRyxPQUFPLGVBQWUsQ0FBQztJQUN0QyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZCxPQUFPLEtBQUssQ0FBQyxHQUFHLEVBQUU7UUFDaEIsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNuQixNQUFNLEVBQUUsQ0FBQyxNQUFNLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN4QyxDQUFDO1FBQ0YsT0FBTyxFQUFFO1lBQ1AsY0FBYyxFQUFFLGtCQUFrQjtZQUNsQyxHQUFHLGFBQWEsRUFBRTtTQUNuQjtRQUNELElBQUksRUFBRSxNQUFNO0tBQ2IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBQ0QsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBcUIsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDO0lBQ3JELEdBQUcsSUFBSTtJQUNQLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVEFSR0VUIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3RhcmdldCc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2xvZ2dlcic7XG5pbXBvcnQgeyBnZXRTZGtIZWFkZXJzIH0gZnJvbSAnLi4vLi4vaGVscGVycy9zZGstaGVhZGVycyc7XG5pbXBvcnQgeyBnZXRTZXNzaW9uSWQgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Nlc3Npb25JZCc7XG5pbXBvcnQgeyBnZXRWaXNpdG9ySWQgfSBmcm9tICcuLi8uLi9oZWxwZXJzL3Zpc2l0b3JJZCc7XG5pbXBvcnQgdHlwZSB7IENhblRyYWNrIH0gZnJvbSAnLi4vLi4vdHlwZXMvY2FuLXRyYWNrJztcbmltcG9ydCB0eXBlIHsgRGljdGlvbmFyeSB9IGZyb20gJy4uLy4uL3R5cGVzL3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnLi4vaXMtYnJvd3Nlcic7XG5pbXBvcnQgeyBpc0VkaXRpbmcgfSBmcm9tICcuLi9pcy1lZGl0aW5nJztcbmltcG9ydCB7IGxvZ0ZldGNoIH0gZnJvbSAnLi4vbG9nLWZldGNoJztcbmltcG9ydCB7IGdldFVzZXJBdHRyaWJ1dGVzIH0gZnJvbSAnLi9oZWxwZXJzJztcbmludGVyZmFjZSBFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB5b3VyIGV2ZW50LlxuICAgKlxuICAgKiBFeGFtcGxlczogYGNsaWNrYCwgYGNvbnZlcnNpb25gLCBgcGFnZXZpZXdgLCBgaW1wcmVzc2lvbmBcbiAgICovXG4gIHR5cGU6IHN0cmluZztcbiAgZGF0YToge1xuICAgIC8qKlxuICAgICAqIChPcHRpb25hbCkgVGhlIGNvbnRlbnQncyBJRC4gVXNlZnVsIGlmIHRoaXMgZXZlbnQgcGVydGFpbnMgdG8gYSBzcGVjaWZpYyBwaWVjZSBvZiBjb250ZW50LlxuICAgICAqL1xuICAgIGNvbnRlbnRJZD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHRoZSBJRCBvZiB0aGUgc3BhY2UgdGhhdCB0aGUgY29udGVudCBiZWxvbmdzIHRvLlxuICAgICAqL1xuICAgIG93bmVySWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiAoT3B0aW9uYWwpIG1ldGFkYXRhIHRoYXQgeW91IHdhbnQgdG8gcHJvdmlkZSB3aXRoIHlvdXIgZXZlbnQuXG4gICAgICovXG4gICAgbWV0YWRhdGE/OiBEaWN0aW9uYXJ5PGFueT47XG4gICAgLyoqXG4gICAgICogU2Vzc2lvbiBJRCBvZiB0aGUgdXNlci4gVGhpcyBpcyBwcm92aWRlZCBieSB0aGUgU0RLIGJ5IGNoZWNraW5nIHNlc3Npb24gc3RvcmFnZS5cbiAgICAgKi9cbiAgICBzZXNzaW9uSWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAvKipcbiAgICAgKiBWaXNpdG9yIElEIG9mIHRoZSB1c2VyLiBUaGlzIGlzIHByb3ZpZGVkIGJ5IHRoZSBTREsgYnkgY2hlY2tpbmcgY29va2llcy5cbiAgICAgKi9cbiAgICB2aXNpdG9ySWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAvKipcbiAgICAgKiAoT3B0aW9uYWwpIElmIHJ1bm5pbmcgYW4gQS9CIHRlc3QsIHRoZSBJRCBvZiB0aGUgdmFyaWF0aW9uIHRoYXQgdGhlIHVzZXIgaXMgaW4uXG4gICAgICovXG4gICAgdmFyaWF0aW9uSWQ/OiBzdHJpbmc7XG4gICAgW2luZGV4OiBzdHJpbmddOiBhbnk7XG4gIH07XG59XG50eXBlIFRyYWNraW5nRGF0YSA9IHtcbiAgdmlzaXRvcklkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIHNlc3Npb25JZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xufTtcbmNvbnN0IGdldFRyYWNraW5nRXZlbnREYXRhID0gYXN5bmMgKHtcbiAgY2FuVHJhY2tcbn06IENhblRyYWNrKTogUHJvbWlzZTxUcmFja2luZ0RhdGE+ID0+IHtcbiAgaWYgKCFjYW5UcmFjaykge1xuICAgIHJldHVybiB7XG4gICAgICB2aXNpdG9ySWQ6IHVuZGVmaW5lZCxcbiAgICAgIHNlc3Npb25JZDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuICBjb25zdCBzZXNzaW9uSWQgPSBhd2FpdCBnZXRTZXNzaW9uSWQoe1xuICAgIGNhblRyYWNrXG4gIH0pO1xuICBjb25zdCB2aXNpdG9ySWQgPSBnZXRWaXNpdG9ySWQoe1xuICAgIGNhblRyYWNrXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHNlc3Npb25JZCxcbiAgICB2aXNpdG9ySWRcbiAgfTtcbn07XG50eXBlIEV2ZW50UHJvcGVydGllcyA9IFBpY2s8RXZlbnQsICd0eXBlJz4gJiBQaWNrPEV2ZW50WydkYXRhJ10sICdjb250ZW50SWQnIHwgJ3ZhcmlhdGlvbklkJyB8ICdtZXRhZGF0YSc+ICYge1xuICAvKipcbiAgICogWW91ciBvcmdhbml6YXRpb24ncyBBUEkga2V5LlxuICAgKi9cbiAgYXBpS2V5OiBFdmVudFsnZGF0YSddWydvd25lcklkJ107XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEFueSBhZGRpdGlvbmFsIChub24tbWV0YWRhdGEpIHByb3BlcnRpZXMgdG8gYWRkIHRvIHRoZSBldmVudC5cbiAgICovXG4gIFtpbmRleDogc3RyaW5nXTogYW55O1xufTtcbmV4cG9ydCB0eXBlIEV2ZW50UHJvcHMgPSBFdmVudFByb3BlcnRpZXMgJiBDYW5UcmFjaztcbmNvbnN0IGNyZWF0ZUV2ZW50ID0gYXN5bmMgKHtcbiAgdHlwZTogZXZlbnRUeXBlLFxuICBjYW5UcmFjayxcbiAgYXBpS2V5LFxuICBtZXRhZGF0YSxcbiAgLi4ucHJvcGVydGllc1xufTogRXZlbnRQcm9wcyk6IFByb21pc2U8RXZlbnQ+ID0+ICh7XG4gIHR5cGU6IGV2ZW50VHlwZSxcbiAgZGF0YToge1xuICAgIC4uLnByb3BlcnRpZXMsXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIHVybDogbG9jYXRpb24uaHJlZixcbiAgICAgIC4uLm1ldGFkYXRhXG4gICAgfSxcbiAgICAuLi4oYXdhaXQgZ2V0VHJhY2tpbmdFdmVudERhdGEoe1xuICAgICAgY2FuVHJhY2tcbiAgICB9KSksXG4gICAgdXNlckF0dHJpYnV0ZXM6IGdldFVzZXJBdHRyaWJ1dGVzKCksXG4gICAgb3duZXJJZDogYXBpS2V5XG4gIH1cbn0pO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF90cmFjayh7XG4gIGFwaUhvc3QsXG4gIC4uLmV2ZW50UHJvcHNcbn06IEV2ZW50UHJvcHMgJiB7XG4gIGFwaUhvc3Q/OiBzdHJpbmc7XG59KSB7XG4gIGlmICghZXZlbnRQcm9wcy5hcGlLZXkpIHtcbiAgICBsb2dnZXIuZXJyb3IoJ01pc3NpbmcgQVBJIGtleSBmb3IgdHJhY2sgY2FsbC4gUGxlYXNlIHByb3ZpZGUgeW91ciBBUEkga2V5LicpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWV2ZW50UHJvcHMuY2FuVHJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlzRWRpdGluZygpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKGlzQnJvd3NlcigpIHx8IFRBUkdFVCA9PT0gJ3JlYWN0TmF0aXZlJykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYmFzZVVybCA9IGFwaUhvc3QgfHwgJ2h0dHBzOi8vY2RuLmJ1aWxkZXIuaW8nO1xuICBjb25zdCB1cmwgPSBgJHtiYXNlVXJsfS9hcGkvdjEvdHJhY2tgO1xuICBsb2dGZXRjaCh1cmwpO1xuICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgZXZlbnRzOiBbYXdhaXQgY3JlYXRlRXZlbnQoZXZlbnRQcm9wcyldXG4gICAgfSksXG4gICAgaGVhZGVyczoge1xuICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIC4uLmdldFNka0hlYWRlcnMoKVxuICAgIH0sXG4gICAgbW9kZTogJ2NvcnMnXG4gIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHRyYWNrOiAnLCBlcnIpO1xuICB9KTtcbn1cbmV4cG9ydCBjb25zdCB0cmFjayA9IChhcmdzOiBFdmVudFByb3BlcnRpZXMpID0+IF90cmFjayh7XG4gIC4uLmFyZ3MsXG4gIGNhblRyYWNrOiB0cnVlXG59KSJdfQ==
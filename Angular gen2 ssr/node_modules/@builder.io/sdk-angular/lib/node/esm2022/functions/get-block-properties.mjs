import { getClassPropName } from './get-class-prop-name';
import { getStyle } from './get-style';
import { transformBlockProperties } from './transform-block-properties';
const extractRelevantRootBlockProperties = (block) => {
    // currently we are only spreading the `href` property
    // TO-DO: potentially spread all properties from block, but only if they are not already defined by BuilderBlock
    // const {
    //   '@type': _type,
    //   '@version': _version,
    //   id: _id,
    //   tagName: _tagName,
    //   layerName: _layerName,
    //   groupLocked: _groupLocked,
    //   layerLocked: _layerLocked,
    //   class: _class,
    //   children: _children,
    //   responsiveStyles: _responsiveStyles,
    //   component: _component,
    //   bindings: _bindings,
    //   meta: _meta,
    //   actions: _actions,
    //   properties: _properties,
    //   code: _code,
    //   repeat: _repeat,
    //   animations: _animations,
    //   style: _style,
    //   hide: _hide,
    //   show: _show,
    //   // anything set by dynamic bindings outside of predefined `BuilderBlock` properties
    //   ...remainingBlockProperties
    // } = block;
    return {
        href: block.href
    };
};
export function getBlockProperties({ block, context }) {
    const properties = {
        ...extractRelevantRootBlockProperties(block),
        ...block.properties,
        'builder-id': block.id,
        style: getStyle({
            block,
            context
        }),
        [getClassPropName()]: [block.id, 'builder-block', block.class, block.properties?.class].filter(Boolean).join(' ')
    };
    return transformBlockProperties({
        properties,
        context,
        block
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWJsb2NrLXByb3BlcnRpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnVuY3Rpb25zL2dldC1ibG9jay1wcm9wZXJ0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsTUFBTSxrQ0FBa0MsR0FBRyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtJQUNqRSxzREFBc0Q7SUFDdEQsZ0hBQWdIO0lBRWhILFVBQVU7SUFDVixvQkFBb0I7SUFDcEIsMEJBQTBCO0lBQzFCLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsMkJBQTJCO0lBQzNCLCtCQUErQjtJQUMvQiwrQkFBK0I7SUFDL0IsbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6Qix5Q0FBeUM7SUFDekMsMkJBQTJCO0lBQzNCLHlCQUF5QjtJQUN6QixpQkFBaUI7SUFDakIsdUJBQXVCO0lBQ3ZCLDZCQUE2QjtJQUM3QixpQkFBaUI7SUFDakIscUJBQXFCO0lBQ3JCLDZCQUE2QjtJQUM3QixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQix3RkFBd0Y7SUFDeEYsZ0NBQWdDO0lBQ2hDLGFBQWE7SUFFYixPQUFPO1FBQ0wsSUFBSSxFQUFHLEtBQWEsQ0FBQyxJQUFJO0tBQzFCLENBQUM7QUFDSixDQUFDLENBQUM7QUFDRixNQUFNLFVBQVUsa0JBQWtCLENBQUMsRUFDakMsS0FBSyxFQUNMLE9BQU8sRUFJUjtJQUNDLE1BQU0sVUFBVSxHQUFHO1FBQ2pCLEdBQUcsa0NBQWtDLENBQUMsS0FBSyxDQUFDO1FBQzVDLEdBQUcsS0FBSyxDQUFDLFVBQVU7UUFDbkIsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLEtBQUssRUFBRSxRQUFRLENBQUM7WUFDZCxLQUFLO1lBQ0wsT0FBTztTQUNSLENBQUM7UUFDRixDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsZUFBZSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztLQUNsSCxDQUFDO0lBQ0YsT0FBTyx3QkFBd0IsQ0FBQztRQUM5QixVQUFVO1FBQ1YsT0FBTztRQUNQLEtBQUs7S0FDTixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBCdWlsZGVyQ29udGV4dEludGVyZmFjZSB9IGZyb20gJy4uL2NvbnRleHQvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBCdWlsZGVyQmxvY2sgfSBmcm9tICcuLi90eXBlcy9idWlsZGVyLWJsb2NrJztcbmltcG9ydCB7IGdldENsYXNzUHJvcE5hbWUgfSBmcm9tICcuL2dldC1jbGFzcy1wcm9wLW5hbWUnO1xuaW1wb3J0IHsgZ2V0U3R5bGUgfSBmcm9tICcuL2dldC1zdHlsZSc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1CbG9ja1Byb3BlcnRpZXMgfSBmcm9tICcuL3RyYW5zZm9ybS1ibG9jay1wcm9wZXJ0aWVzJztcbmNvbnN0IGV4dHJhY3RSZWxldmFudFJvb3RCbG9ja1Byb3BlcnRpZXMgPSAoYmxvY2s6IEJ1aWxkZXJCbG9jaykgPT4ge1xuICAvLyBjdXJyZW50bHkgd2UgYXJlIG9ubHkgc3ByZWFkaW5nIHRoZSBgaHJlZmAgcHJvcGVydHlcbiAgLy8gVE8tRE86IHBvdGVudGlhbGx5IHNwcmVhZCBhbGwgcHJvcGVydGllcyBmcm9tIGJsb2NrLCBidXQgb25seSBpZiB0aGV5IGFyZSBub3QgYWxyZWFkeSBkZWZpbmVkIGJ5IEJ1aWxkZXJCbG9ja1xuXG4gIC8vIGNvbnN0IHtcbiAgLy8gICAnQHR5cGUnOiBfdHlwZSxcbiAgLy8gICAnQHZlcnNpb24nOiBfdmVyc2lvbixcbiAgLy8gICBpZDogX2lkLFxuICAvLyAgIHRhZ05hbWU6IF90YWdOYW1lLFxuICAvLyAgIGxheWVyTmFtZTogX2xheWVyTmFtZSxcbiAgLy8gICBncm91cExvY2tlZDogX2dyb3VwTG9ja2VkLFxuICAvLyAgIGxheWVyTG9ja2VkOiBfbGF5ZXJMb2NrZWQsXG4gIC8vICAgY2xhc3M6IF9jbGFzcyxcbiAgLy8gICBjaGlsZHJlbjogX2NoaWxkcmVuLFxuICAvLyAgIHJlc3BvbnNpdmVTdHlsZXM6IF9yZXNwb25zaXZlU3R5bGVzLFxuICAvLyAgIGNvbXBvbmVudDogX2NvbXBvbmVudCxcbiAgLy8gICBiaW5kaW5nczogX2JpbmRpbmdzLFxuICAvLyAgIG1ldGE6IF9tZXRhLFxuICAvLyAgIGFjdGlvbnM6IF9hY3Rpb25zLFxuICAvLyAgIHByb3BlcnRpZXM6IF9wcm9wZXJ0aWVzLFxuICAvLyAgIGNvZGU6IF9jb2RlLFxuICAvLyAgIHJlcGVhdDogX3JlcGVhdCxcbiAgLy8gICBhbmltYXRpb25zOiBfYW5pbWF0aW9ucyxcbiAgLy8gICBzdHlsZTogX3N0eWxlLFxuICAvLyAgIGhpZGU6IF9oaWRlLFxuICAvLyAgIHNob3c6IF9zaG93LFxuICAvLyAgIC8vIGFueXRoaW5nIHNldCBieSBkeW5hbWljIGJpbmRpbmdzIG91dHNpZGUgb2YgcHJlZGVmaW5lZCBgQnVpbGRlckJsb2NrYCBwcm9wZXJ0aWVzXG4gIC8vICAgLi4ucmVtYWluaW5nQmxvY2tQcm9wZXJ0aWVzXG4gIC8vIH0gPSBibG9jaztcblxuICByZXR1cm4ge1xuICAgIGhyZWY6IChibG9jayBhcyBhbnkpLmhyZWZcbiAgfTtcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0QmxvY2tQcm9wZXJ0aWVzKHtcbiAgYmxvY2ssXG4gIGNvbnRleHRcbn06IHtcbiAgYmxvY2s6IEJ1aWxkZXJCbG9jaztcbiAgY29udGV4dDogQnVpbGRlckNvbnRleHRJbnRlcmZhY2U7XG59KSB7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgLi4uZXh0cmFjdFJlbGV2YW50Um9vdEJsb2NrUHJvcGVydGllcyhibG9jayksXG4gICAgLi4uYmxvY2sucHJvcGVydGllcyxcbiAgICAnYnVpbGRlci1pZCc6IGJsb2NrLmlkLFxuICAgIHN0eWxlOiBnZXRTdHlsZSh7XG4gICAgICBibG9jayxcbiAgICAgIGNvbnRleHRcbiAgICB9KSxcbiAgICBbZ2V0Q2xhc3NQcm9wTmFtZSgpXTogW2Jsb2NrLmlkLCAnYnVpbGRlci1ibG9jaycsIGJsb2NrLmNsYXNzLCBibG9jay5wcm9wZXJ0aWVzPy5jbGFzc10uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKVxuICB9O1xuICByZXR1cm4gdHJhbnNmb3JtQmxvY2tQcm9wZXJ0aWVzKHtcbiAgICBwcm9wZXJ0aWVzLFxuICAgIGNvbnRleHQsXG4gICAgYmxvY2tcbiAgfSk7XG59Il19
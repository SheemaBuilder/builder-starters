import { TARGET } from '../constants/target';
import { omit } from '../helpers/omit';
import { evaluate } from './evaluate/index';
import { resolveLocalizedValues } from './extract-localized-values';
import { fastClone } from './fast-clone';
import { set } from './set';
import { transformBlock } from './transform-block';
// Deep clone a block but without cloning any child blocks
export function deepCloneWithConditions(obj) {
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }
    if (Array.isArray(obj)) {
        return obj.map((item) => deepCloneWithConditions(item));
    }
    if (obj['@type'] === '@builder.io/sdk:Element') {
        return obj;
    }
    const clonedObj = {};
    for (const key in obj) {
        if (key !== 'meta' && Object.prototype.hasOwnProperty.call(obj, key)) {
            clonedObj[key] = deepCloneWithConditions(obj[key]);
        }
    }
    return clonedObj;
}
const IS_SDK_WITHOUT_CACHED_PROCESSED_BLOCK = ['svelte', 'vue', 'angular', 'qwik', 'solid'].includes(TARGET);
const getCopy = (block) => {
    if (IS_SDK_WITHOUT_CACHED_PROCESSED_BLOCK) {
        const copy = fastClone(block);
        const copied = {
            ...copy,
            properties: {
                ...copy.properties
            },
            actions: {
                ...copy.actions
            }
        };
        return copied;
    }
    else {
        const copy = deepCloneWithConditions(omit(block, 'children', 'meta'));
        return {
            ...copy,
            properties: {
                ...copy.properties
            },
            actions: {
                ...copy.actions
            },
            children: block.children,
            meta: block.meta
        };
    }
};
const evaluateBindings = ({ block, context, localState, rootState, rootSetState }) => {
    if (!block.bindings) {
        return block;
    }
    const copied = getCopy(block);
    for (const binding in block.bindings) {
        const expression = block.bindings[binding];
        const value = evaluate({
            code: expression,
            localState,
            rootState,
            rootSetState,
            context
        });
        set(copied, binding, value);
    }
    return copied;
};
export function getProcessedBlock({ block, context, localState, rootState, rootSetState }) {
    let transformedBlock = resolveLocalizedValues(block, rootState.locale);
    transformedBlock = transformBlock(transformedBlock);
    return evaluateBindings({
        block: transformedBlock,
        localState,
        rootState,
        rootSetState,
        context
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXByb2Nlc3NlZC1ibG9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9mdW5jdGlvbnMvZ2V0LXByb2Nlc3NlZC1ibG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFN0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5ELDBEQUEwRDtBQUMxRCxNQUFNLFVBQVUsdUJBQXVCLENBQVUsR0FBTTtJQUNyRCxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQzNDLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEIsT0FBUSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBTyxDQUFDO0tBQ3JFO0lBQ0QsSUFBSyxHQUFXLENBQUMsT0FBTyxDQUFDLEtBQUsseUJBQXlCLEVBQUU7UUFDdkQsT0FBTyxHQUFHLENBQUM7S0FDWjtJQUNELE1BQU0sU0FBUyxHQUFRLEVBQUUsQ0FBQztJQUMxQixLQUFLLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRTtRQUNyQixJQUFJLEdBQUcsS0FBSyxNQUFNLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUNwRSxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsdUJBQXVCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7S0FDRjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFDRCxNQUFNLHFDQUFxQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3RyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQW1CLEVBQWdCLEVBQUU7SUFDcEQsSUFBSSxxQ0FBcUMsRUFBRTtRQUN6QyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsTUFBTSxNQUFNLEdBQUc7WUFDYixHQUFHLElBQUk7WUFDUCxVQUFVLEVBQUU7Z0JBQ1YsR0FBRyxJQUFJLENBQUMsVUFBVTthQUNuQjtZQUNELE9BQU8sRUFBRTtnQkFDUCxHQUFHLElBQUksQ0FBQyxPQUFPO2FBQ2hCO1NBQ0YsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7U0FBTTtRQUNMLE1BQU0sSUFBSSxHQUFJLHVCQUF1QixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFrQixDQUFDO1FBQ3hGLE9BQU87WUFDTCxHQUFHLElBQUk7WUFDUCxVQUFVLEVBQUU7Z0JBQ1YsR0FBRyxJQUFJLENBQUMsVUFBVTthQUNuQjtZQUNELE9BQU8sRUFBRTtnQkFDUCxHQUFHLElBQUksQ0FBQyxPQUFPO2FBQ2hCO1lBQ0QsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNqQixDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUM7QUFDRixNQUFNLGdCQUFnQixHQUFHLENBQUMsRUFDeEIsS0FBSyxFQUNMLE9BQU8sRUFDUCxVQUFVLEVBQ1YsU0FBUyxFQUNULFlBQVksRUFHNEUsRUFBZ0IsRUFBRTtJQUMxRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUNuQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLEtBQUssTUFBTSxPQUFPLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUNwQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQztZQUNyQixJQUFJLEVBQUUsVUFBVTtZQUNoQixVQUFVO1lBQ1YsU0FBUztZQUNULFlBQVk7WUFDWixPQUFPO1NBQ1IsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDN0I7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFDRixNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFDaEMsS0FBSyxFQUNMLE9BQU8sRUFDUCxVQUFVLEVBQ1YsU0FBUyxFQUNULFlBQVksRUFHNEU7SUFDeEYsSUFBSSxnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUcsU0FBUyxDQUFDLE1BQTZCLENBQUMsQ0FBQztJQUMvRixnQkFBZ0IsR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNwRCxPQUFPLGdCQUFnQixDQUFDO1FBQ3RCLEtBQUssRUFBRSxnQkFBZ0I7UUFDdkIsVUFBVTtRQUNWLFNBQVM7UUFDVCxZQUFZO1FBQ1osT0FBTztLQUNSLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUQVJHRVQgfSBmcm9tICcuLi9jb25zdGFudHMvdGFyZ2V0JztcbmltcG9ydCB0eXBlIHsgQnVpbGRlckNvbnRleHRJbnRlcmZhY2UgfSBmcm9tICcuLi9jb250ZXh0L3R5cGVzJztcbmltcG9ydCB7IG9taXQgfSBmcm9tICcuLi9oZWxwZXJzL29taXQnO1xuaW1wb3J0IHR5cGUgeyBCdWlsZGVyQmxvY2sgfSBmcm9tICcuLi90eXBlcy9idWlsZGVyLWJsb2NrJztcbmltcG9ydCB7IGV2YWx1YXRlIH0gZnJvbSAnLi9ldmFsdWF0ZS9pbmRleCc7XG5pbXBvcnQgeyByZXNvbHZlTG9jYWxpemVkVmFsdWVzIH0gZnJvbSAnLi9leHRyYWN0LWxvY2FsaXplZC12YWx1ZXMnO1xuaW1wb3J0IHsgZmFzdENsb25lIH0gZnJvbSAnLi9mYXN0LWNsb25lJztcbmltcG9ydCB7IHNldCB9IGZyb20gJy4vc2V0JztcbmltcG9ydCB7IHRyYW5zZm9ybUJsb2NrIH0gZnJvbSAnLi90cmFuc2Zvcm0tYmxvY2snO1xuXG4vLyBEZWVwIGNsb25lIGEgYmxvY2sgYnV0IHdpdGhvdXQgY2xvbmluZyBhbnkgY2hpbGQgYmxvY2tzXG5leHBvcnQgZnVuY3Rpb24gZGVlcENsb25lV2l0aENvbmRpdGlvbnM8VCA9IGFueT4ob2JqOiBUKTogVCB7XG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gKG9iai5tYXAoKGl0ZW06IGFueSkgPT4gZGVlcENsb25lV2l0aENvbmRpdGlvbnMoaXRlbSkpIGFzIFQpO1xuICB9XG4gIGlmICgob2JqIGFzIGFueSlbJ0B0eXBlJ10gPT09ICdAYnVpbGRlci5pby9zZGs6RWxlbWVudCcpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGNvbnN0IGNsb25lZE9iajogYW55ID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChrZXkgIT09ICdtZXRhJyAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICBjbG9uZWRPYmpba2V5XSA9IGRlZXBDbG9uZVdpdGhDb25kaXRpb25zKG9ialtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsb25lZE9iajtcbn1cbmNvbnN0IElTX1NES19XSVRIT1VUX0NBQ0hFRF9QUk9DRVNTRURfQkxPQ0sgPSBbJ3N2ZWx0ZScsICd2dWUnLCAnYW5ndWxhcicsICdxd2lrJywgJ3NvbGlkJ10uaW5jbHVkZXMoVEFSR0VUKTtcbmNvbnN0IGdldENvcHkgPSAoYmxvY2s6IEJ1aWxkZXJCbG9jayk6IEJ1aWxkZXJCbG9jayA9PiB7XG4gIGlmIChJU19TREtfV0lUSE9VVF9DQUNIRURfUFJPQ0VTU0VEX0JMT0NLKSB7XG4gICAgY29uc3QgY29weSA9IGZhc3RDbG9uZShibG9jayk7XG4gICAgY29uc3QgY29waWVkID0ge1xuICAgICAgLi4uY29weSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLi4uY29weS5wcm9wZXJ0aWVzXG4gICAgICB9LFxuICAgICAgYWN0aW9uczoge1xuICAgICAgICAuLi5jb3B5LmFjdGlvbnNcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBjb3BpZWQ7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29weSA9IChkZWVwQ2xvbmVXaXRoQ29uZGl0aW9ucyhvbWl0KGJsb2NrLCAnY2hpbGRyZW4nLCAnbWV0YScpKSBhcyBCdWlsZGVyQmxvY2spO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5jb3B5LFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAuLi5jb3B5LnByb3BlcnRpZXNcbiAgICAgIH0sXG4gICAgICBhY3Rpb25zOiB7XG4gICAgICAgIC4uLmNvcHkuYWN0aW9uc1xuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuOiBibG9jay5jaGlsZHJlbixcbiAgICAgIG1ldGE6IGJsb2NrLm1ldGFcbiAgICB9O1xuICB9XG59O1xuY29uc3QgZXZhbHVhdGVCaW5kaW5ncyA9ICh7XG4gIGJsb2NrLFxuICBjb250ZXh0LFxuICBsb2NhbFN0YXRlLFxuICByb290U3RhdGUsXG4gIHJvb3RTZXRTdGF0ZVxufToge1xuICBibG9jazogQnVpbGRlckJsb2NrO1xufSAmIFBpY2s8QnVpbGRlckNvbnRleHRJbnRlcmZhY2UsICdsb2NhbFN0YXRlJyB8ICdjb250ZXh0JyB8ICdyb290U3RhdGUnIHwgJ3Jvb3RTZXRTdGF0ZSc+KTogQnVpbGRlckJsb2NrID0+IHtcbiAgaWYgKCFibG9jay5iaW5kaW5ncykge1xuICAgIHJldHVybiBibG9jaztcbiAgfVxuICBjb25zdCBjb3BpZWQgPSBnZXRDb3B5KGJsb2NrKTtcbiAgZm9yIChjb25zdCBiaW5kaW5nIGluIGJsb2NrLmJpbmRpbmdzKSB7XG4gICAgY29uc3QgZXhwcmVzc2lvbiA9IGJsb2NrLmJpbmRpbmdzW2JpbmRpbmddO1xuICAgIGNvbnN0IHZhbHVlID0gZXZhbHVhdGUoe1xuICAgICAgY29kZTogZXhwcmVzc2lvbixcbiAgICAgIGxvY2FsU3RhdGUsXG4gICAgICByb290U3RhdGUsXG4gICAgICByb290U2V0U3RhdGUsXG4gICAgICBjb250ZXh0XG4gICAgfSk7XG4gICAgc2V0KGNvcGllZCwgYmluZGluZywgdmFsdWUpO1xuICB9XG4gIHJldHVybiBjb3BpZWQ7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFByb2Nlc3NlZEJsb2NrKHtcbiAgYmxvY2ssXG4gIGNvbnRleHQsXG4gIGxvY2FsU3RhdGUsXG4gIHJvb3RTdGF0ZSxcbiAgcm9vdFNldFN0YXRlXG59OiB7XG4gIGJsb2NrOiBCdWlsZGVyQmxvY2s7XG59ICYgUGljazxCdWlsZGVyQ29udGV4dEludGVyZmFjZSwgJ2xvY2FsU3RhdGUnIHwgJ2NvbnRleHQnIHwgJ3Jvb3RTdGF0ZScgfCAncm9vdFNldFN0YXRlJz4pOiBCdWlsZGVyQmxvY2sge1xuICBsZXQgdHJhbnNmb3JtZWRCbG9jayA9IHJlc29sdmVMb2NhbGl6ZWRWYWx1ZXMoYmxvY2ssIChyb290U3RhdGUubG9jYWxlIGFzIHN0cmluZyB8IHVuZGVmaW5lZCkpO1xuICB0cmFuc2Zvcm1lZEJsb2NrID0gdHJhbnNmb3JtQmxvY2sodHJhbnNmb3JtZWRCbG9jayk7XG4gIHJldHVybiBldmFsdWF0ZUJpbmRpbmdzKHtcbiAgICBibG9jazogdHJhbnNmb3JtZWRCbG9jayxcbiAgICBsb2NhbFN0YXRlLFxuICAgIHJvb3RTdGF0ZSxcbiAgICByb290U2V0U3RhdGUsXG4gICAgY29udGV4dFxuICB9KTtcbn0iXX0=
import { fetchOneEntry } from '../../functions/get-content/index';
import { logger } from '../../helpers/logger';
export const fetchSymbolContent = async ({ builderContextValue, symbol }) => {
    /**
     * If:
     * - we have a symbol prop
     * - yet it does not have any content
     * - and we have not already stored content from before
     * - and it has a model name
     *
     * then we want to re-fetch the symbol content.
     */
    if (symbol?.model &&
        // This is a hack, we should not need to check for this, but it is needed for Svelte.
        builderContextValue?.apiKey) {
        return fetchOneEntry({
            model: symbol.model,
            apiKey: builderContextValue.apiKey,
            apiVersion: builderContextValue.apiVersion,
            ...(symbol?.entry && {
                query: {
                    id: symbol.entry
                }
            })
        }).catch(err => {
            logger.error('Could not fetch symbol content: ', err);
            return undefined;
        });
    }
    return undefined;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9sLmhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmxvY2tzL3N5bWJvbC9zeW1ib2wuaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBVTlDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEtBQUssRUFBRSxFQUN2QyxtQkFBbUIsRUFDbkIsTUFBTSxFQUlQLEVBQUUsRUFBRTtJQUNIOzs7Ozs7OztPQVFHO0lBQ0gsSUFBSSxNQUFNLEVBQUUsS0FBSztRQUNqQixxRkFBcUY7UUFDckYsbUJBQW1CLEVBQUUsTUFBTSxFQUFFO1FBQzNCLE9BQU8sYUFBYSxDQUFDO1lBQ25CLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztZQUNuQixNQUFNLEVBQUUsbUJBQW1CLENBQUMsTUFBTTtZQUNsQyxVQUFVLEVBQUUsbUJBQW1CLENBQUMsVUFBVTtZQUMxQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssSUFBSTtnQkFDbkIsS0FBSyxFQUFFO29CQUNMLEVBQUUsRUFBRSxNQUFNLENBQUMsS0FBSztpQkFDakI7YUFDRixDQUFDO1NBQ0gsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdEQsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQnVpbGRlckNvbnRleHRJbnRlcmZhY2UgfSBmcm9tICcuLi8uLi9jb250ZXh0L3R5cGVzJztcbmltcG9ydCB7IGZldGNoT25lRW50cnkgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvZ2V0LWNvbnRlbnQvaW5kZXgnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vLi4vaGVscGVycy9sb2dnZXInO1xuaW1wb3J0IHR5cGUgeyBCdWlsZGVyQ29udGVudCB9IGZyb20gJy4uLy4uL3R5cGVzL2J1aWxkZXItY29udGVudCc7XG5leHBvcnQgaW50ZXJmYWNlIFN5bWJvbEluZm8ge1xuICBtb2RlbD86IHN0cmluZztcbiAgZW50cnk/OiBzdHJpbmc7XG4gIGRhdGE/OiBhbnk7XG4gIGNvbnRlbnQ/OiBCdWlsZGVyQ29udGVudDtcbiAgaW5saW5lPzogYm9vbGVhbjtcbiAgZHluYW1pYz86IGJvb2xlYW47XG59XG5leHBvcnQgY29uc3QgZmV0Y2hTeW1ib2xDb250ZW50ID0gYXN5bmMgKHtcbiAgYnVpbGRlckNvbnRleHRWYWx1ZSxcbiAgc3ltYm9sXG59OiB7XG4gIHN5bWJvbDogU3ltYm9sSW5mbyB8IHVuZGVmaW5lZDtcbiAgYnVpbGRlckNvbnRleHRWYWx1ZTogQnVpbGRlckNvbnRleHRJbnRlcmZhY2U7XG59KSA9PiB7XG4gIC8qKlxuICAgKiBJZjpcbiAgICogLSB3ZSBoYXZlIGEgc3ltYm9sIHByb3BcbiAgICogLSB5ZXQgaXQgZG9lcyBub3QgaGF2ZSBhbnkgY29udGVudFxuICAgKiAtIGFuZCB3ZSBoYXZlIG5vdCBhbHJlYWR5IHN0b3JlZCBjb250ZW50IGZyb20gYmVmb3JlXG4gICAqIC0gYW5kIGl0IGhhcyBhIG1vZGVsIG5hbWVcbiAgICpcbiAgICogdGhlbiB3ZSB3YW50IHRvIHJlLWZldGNoIHRoZSBzeW1ib2wgY29udGVudC5cbiAgICovXG4gIGlmIChzeW1ib2w/Lm1vZGVsICYmXG4gIC8vIFRoaXMgaXMgYSBoYWNrLCB3ZSBzaG91bGQgbm90IG5lZWQgdG8gY2hlY2sgZm9yIHRoaXMsIGJ1dCBpdCBpcyBuZWVkZWQgZm9yIFN2ZWx0ZS5cbiAgYnVpbGRlckNvbnRleHRWYWx1ZT8uYXBpS2V5KSB7XG4gICAgcmV0dXJuIGZldGNoT25lRW50cnkoe1xuICAgICAgbW9kZWw6IHN5bWJvbC5tb2RlbCxcbiAgICAgIGFwaUtleTogYnVpbGRlckNvbnRleHRWYWx1ZS5hcGlLZXksXG4gICAgICBhcGlWZXJzaW9uOiBidWlsZGVyQ29udGV4dFZhbHVlLmFwaVZlcnNpb24sXG4gICAgICAuLi4oc3ltYm9sPy5lbnRyeSAmJiB7XG4gICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgaWQ6IHN5bWJvbC5lbnRyeVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0NvdWxkIG5vdCBmZXRjaCBzeW1ib2wgY29udGVudDogJywgZXJyKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iXX0=
import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import Blocks from "../../components/blocks/blocks";
import InlinedScript from "../../components/inlined-script";
import InlinedStyles from "../../components/inlined-styles";
import { isEditing } from "../../functions/is-editing";
import { isPreviewing } from "../../functions/is-previewing";
import { getDefaultCanTrack } from "../../helpers/canTrack";
import { userAttributesService } from "../../helpers/user-attributes";
import { checkShouldRenderVariants, filterWithCustomTargeting, getBlocksToRender, getPersonalizationScript, } from "./helpers";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class PersonalizationContainer {
    get filteredVariants() {
        return (this.variants || []).filter((variant) => {
            return filterWithCustomTargeting({
                ...(this.builderContext?.rootState?.locale
                    ? {
                        locale: this.builderContext?.rootState?.locale,
                    }
                    : {}),
                ...this.userAttributes,
            }, variant.query, variant.startDate, variant.endDate);
        });
    }
    get blocksToRender() {
        return getBlocksToRender({
            variants: this.variants,
            fallbackBlocks: this.builderBlock?.children,
            isHydrated: this.isHydrated,
            filteredVariants: this.filteredVariants,
            previewingIndex: this.previewingIndex,
        });
    }
    get hideVariantsStyleString() {
        return (this.variants || [])
            .map((_, index) => `[data-variant-id="${this.builderBlock?.id}-${index}"] { display: none; } `)
            .join("");
    }
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    trackByVariant0(index, variant) {
        return index;
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.userAttributes = userAttributesService.getUserAttributes();
        this.scriptStr = null;
        this.unsubscribers = [];
        this.shouldRenderVariants = null;
        this.isHydrated = false;
        this.node_0_div = null;
        this.node_1_template = (variant, index) => `${this.builderBlock?.id}-${index}`;
        this.node_2_Blocks = (variant, index) => `component.options.variants.${index}.blocks`;
        this.node_3_InlinedStyles = null;
        this.node_4_InlinedScript = null;
    }
    ngOnInit() {
        this.scriptStr = getPersonalizationScript(this.variants, this.builderBlock?.id || "none", this.builderContext?.rootState?.locale);
        this.shouldRenderVariants = checkShouldRenderVariants(this.variants, getDefaultCanTrack(this.builderContext?.canTrack));
        this.node_0_div = `builder-personalization-container ${this.attributes?.className || ""}`;
        this.node_3_InlinedStyles = `variants-styles-${this.builderBlock?.id}`;
        this.node_4_InlinedScript = `variants-script-${this.builderBlock?.id}`;
        if (typeof window !== "undefined") {
            this.isHydrated = true;
            const unsub = userAttributesService.subscribeOnUserAttributesChange((attrs) => {
                this.userAttributes = attrs;
            });
            if (!(isEditing() || isPreviewing())) {
                const variant = this.filteredVariants[0];
                if (this.rootRef.nativeElement) {
                    this.rootRef.nativeElement.dispatchEvent(new CustomEvent("builder.variantLoaded", {
                        detail: {
                            variant: variant || "default",
                            content: this.builderContext?.content,
                        },
                        bubbles: true,
                    }));
                    const observer = new IntersectionObserver((entries) => {
                        entries.forEach((entry) => {
                            if (entry.isIntersecting && this.rootRef.nativeElement) {
                                this.rootRef.nativeElement.dispatchEvent(new CustomEvent("builder.variantDisplayed", {
                                    detail: {
                                        variant: variant || "default",
                                        content: this.builderContext?.content,
                                    },
                                    bubbles: true,
                                }));
                            }
                        });
                    });
                    observer.observe(this.rootRef.nativeElement);
                }
            }
            this.unsubscribers.push(unsub);
        }
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_div = `builder-personalization-container ${this.attributes?.className || ""}`;
            this.node_3_InlinedStyles = `variants-styles-${this.builderBlock?.id}`;
            this.node_4_InlinedScript = `variants-script-${this.builderBlock?.id}`;
            this.setAttributes(this.elRef0?.nativeElement, this.attributes, changes["attributes"]?.currentValue);
        }
    }
    ngOnDestroy() {
        this.unsubscribers.forEach((unsub) => unsub());
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PersonalizationContainer, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PersonalizationContainer, isStandalone: true, selector: "personalization-container", inputs: { builderContext: "builderContext", attributes: "attributes", builderBlock: "builderBlock", variants: "variants", previewingIndex: "previewingIndex" }, viewQueries: [{ propertyName: "rootRef", first: true, predicate: ["rootRef"], descendants: true }, { propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div #rootRef [class]="node_0_div" #elRef0>
      <ng-container *ngIf="shouldRenderVariants">
        <ng-container
          *ngFor="let variant of variants; index as index; trackBy: trackByVariant0"
        >
          <template [attr.data-variant-id]="node_1_template(variant, index)">
            <blocks
              [blocks]="variant.blocks"
              [parent]="builderBlock?.id"
              [path]="node_2_Blocks(variant, index)"
            ></blocks>
          </template>
        </ng-container>
        <inlined-styles
          [nonce]="builderContext?.nonce || ''"
          [styles]="hideVariantsStyleString"
          [id]="node_3_InlinedStyles"
        ></inlined-styles>
        <inlined-script
          [nonce]="builderContext?.nonce || ''"
          [scriptStr]="scriptStr"
          [id]="node_4_InlinedScript"
        ></inlined-script>
      </ng-container>
      <blocks
        [blocks]="blocksToRender.blocks"
        [parent]="builderBlock?.id"
        [path]="blocksToRender.path"
      ></blocks>
    </div>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: Blocks, selector: "blocks", inputs: ["blocks", "parent", "path", "styleProp", "className", "context", "linkComponent", "registeredComponents"] }, { kind: "component", type: InlinedStyles, selector: "inlined-styles, InlinedStyles", inputs: ["styles", "id", "nonce"] }, { kind: "component", type: InlinedScript, selector: "inlined-script, InlinedScript", inputs: ["scriptStr", "id", "nonce"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PersonalizationContainer, decorators: [{
            type: Component,
            args: [{ selector: "personalization-container", template: `
    <div #rootRef [class]="node_0_div" #elRef0>
      <ng-container *ngIf="shouldRenderVariants">
        <ng-container
          *ngFor="let variant of variants; index as index; trackBy: trackByVariant0"
        >
          <template [attr.data-variant-id]="node_1_template(variant, index)">
            <blocks
              [blocks]="variant.blocks"
              [parent]="builderBlock?.id"
              [path]="node_2_Blocks(variant, index)"
            ></blocks>
          </template>
        </ng-container>
        <inlined-styles
          [nonce]="builderContext?.nonce || ''"
          [styles]="hideVariantsStyleString"
          [id]="node_3_InlinedStyles"
        ></inlined-styles>
        <inlined-script
          [nonce]="builderContext?.nonce || ''"
          [scriptStr]="scriptStr"
          [id]="node_4_InlinedScript"
        ></inlined-script>
      </ng-container>
      <blocks
        [blocks]="blocksToRender.blocks"
        [parent]="builderBlock?.id"
        [path]="blocksToRender.path"
      ></blocks>
    </div>
  `, standalone: true, imports: [CommonModule, Blocks, InlinedStyles, InlinedScript], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { builderContext: [{
                type: Input
            }], attributes: [{
                type: Input
            }], builderBlock: [{
                type: Input
            }], variants: [{
                type: Input
            }], previewingIndex: [{
                type: Input
            }], rootRef: [{
                type: ViewChild,
                args: ["rootRef"]
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,
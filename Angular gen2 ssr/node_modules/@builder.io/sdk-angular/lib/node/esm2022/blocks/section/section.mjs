import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class SectionComponent {
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.node_0_section = null;
        this.elRef0_state_0 = null;
    }
    ngOnInit() {
        this.node_0_section = {
            width: "100%",
            alignSelf: "stretch",
            flexGrow: 1,
            boxSizing: "border-box",
            maxWidth: this.maxWidth || 1200,
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            marginLeft: "auto",
            marginRight: "auto",
        };
        this.elRef0_state_0 = {};
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0);
        this.setAttributes(this.elRef0?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_section = {
                width: "100%",
                alignSelf: "stretch",
                flexGrow: 1,
                boxSizing: "border-box",
                maxWidth: this.maxWidth || 1200,
                display: "flex",
                flexDirection: "column",
                alignItems: "stretch",
                marginLeft: "auto",
                marginRight: "auto",
            };
            this.elRef0_state_0 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0, changes["elRef0_state_0"]?.currentValue);
            this.setAttributes(this.elRef0?.nativeElement, this.attributes, changes["attributes"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SectionComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SectionComponent, isStandalone: true, selector: "section-component", inputs: { maxWidth: "maxWidth", attributes: "attributes" }, viewQueries: [{ propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <section [ngStyle]="node_0_section" #elRef0>
      <ng-content></ng-content>
    </section>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SectionComponent, decorators: [{
            type: Component,
            args: [{ selector: "section-component", template: `
    <section [ngStyle]="node_0_section" #elRef0>
      <ng-content></ng-content>
    </section>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { maxWidth: [{
                type: Input
            }], attributes: [{
                type: Input
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9ibG9ja3Mvc2VjdGlvbi9zZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUdULEtBQUssR0FFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQXVCL0MsTUFBTSxDQUFDLE9BQU8sT0FBTyxnQkFBZ0I7SUFVbkMsYUFBYSxDQUFDLEVBQWUsRUFBRSxLQUFVLEVBQUUsT0FBYTtRQUN0RCxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1AsT0FBTztTQUNSO1FBQ0QsTUFBTSxNQUFNLEdBQUcsT0FBTyxPQUFPLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2xDLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFFLEVBQUUsQ0FBQztpQkFDL0I7Z0JBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQ25CLEdBQUcsRUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDbEIsRUFBRSxFQUNGLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUNuQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQ1osQ0FDRixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7YUFDdEU7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFvQixRQUFtQjtRQUFuQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBNUJ2QyxpQkFBWSxHQUFHLElBQUksR0FBRyxFQUFzQixDQUFDO1FBRTdDLG1CQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLG1CQUFjLEdBQUcsSUFBSSxDQUFDO0lBeUJvQixDQUFDO0lBRTNDLFFBQVE7UUFDTixJQUFJLENBQUMsY0FBYyxHQUFHO1lBQ3BCLEtBQUssRUFBRSxNQUFNO1lBQ2IsU0FBUyxFQUFFLFNBQVM7WUFDcEIsUUFBUSxFQUFFLENBQUM7WUFDWCxTQUFTLEVBQUUsWUFBWTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJO1lBQy9CLE9BQU8sRUFBRSxNQUFNO1lBQ2YsYUFBYSxFQUFFLFFBQVE7WUFDdkIsVUFBVSxFQUFFLFNBQVM7WUFDckIsVUFBVSxFQUFFLE1BQU07WUFDbEIsV0FBVyxFQUFFLE1BQU07U0FDcEIsQ0FBQztRQUNGLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsY0FBYyxHQUFHO2dCQUNwQixLQUFLLEVBQUUsTUFBTTtnQkFDYixTQUFTLEVBQUUsU0FBUztnQkFDcEIsUUFBUSxFQUFFLENBQUM7Z0JBQ1gsU0FBUyxFQUFFLFlBQVk7Z0JBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUk7Z0JBQy9CLE9BQU8sRUFBRSxNQUFNO2dCQUNmLGFBQWEsRUFBRSxRQUFRO2dCQUN2QixVQUFVLEVBQUUsU0FBUztnQkFDckIsVUFBVSxFQUFFLE1BQU07Z0JBQ2xCLFdBQVcsRUFBRSxNQUFNO2FBQ3BCLENBQUM7WUFDRixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsYUFBYSxDQUNoQixJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFDMUIsSUFBSSxDQUFDLGNBQWMsRUFDbkIsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsWUFBWSxDQUN4QyxDQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FDaEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQzFCLElBQUksQ0FBQyxVQUFVLEVBQ2YsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FDcEMsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxLQUFLLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDM0MsRUFBRSxFQUFFLENBQUM7U0FDTjtJQUNILENBQUM7K0dBekZrQixnQkFBZ0I7bUdBQWhCLGdCQUFnQixnUUFmekI7Ozs7R0FJVCxrR0FTUyxZQUFZOzs0RkFFSCxnQkFBZ0I7a0JBakJwQyxTQUFTOytCQUNFLG1CQUFtQixZQUNuQjs7OztHQUlULGNBUVcsSUFBSSxXQUNQLENBQUMsWUFBWSxDQUFDO2dHQUdkLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFFZSxNQUFNO3NCQUExQixTQUFTO3VCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgUmVuZGVyZXIyLFxuICBJbnB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuaW1wb3J0IHsgZmlsdGVyQXR0cnMgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHR5cGUgeyBTZWN0aW9uUHJvcHMgfSBmcm9tIFwiLi9zZWN0aW9uLnR5cGVzXCI7XG5pbXBvcnQgeyBzZXRBdHRycyB9IGZyb20gXCIuLi9oZWxwZXJzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJzZWN0aW9uLWNvbXBvbmVudFwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzZWN0aW9uIFtuZ1N0eWxlXT1cIm5vZGVfMF9zZWN0aW9uXCIgI2VsUmVmMD5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L3NlY3Rpb24+XG4gIGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogY29udGVudHM7XG4gICAgICB9XG4gICAgYCxcbiAgXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG59KVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbkNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIG1heFdpZHRoITogU2VjdGlvblByb3BzW1wibWF4V2lkdGhcIl07XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBTZWN0aW9uUHJvcHNbXCJhdHRyaWJ1dGVzXCJdO1xuXG4gIEBWaWV3Q2hpbGQoXCJlbFJlZjBcIikgZWxSZWYwITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBub2RlXzBfc2VjdGlvbiA9IG51bGw7XG4gIGVsUmVmMF9zdGF0ZV8wID0gbnVsbDtcbiAgc2V0QXR0cmlidXRlcyhlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IHR5cGVvZiBjaGFuZ2VzID09PSBcInVuZGVmaW5lZFwiID8gdmFsdWUgOiBjaGFuZ2VzO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICBrZXkucmVwbGFjZShcIm9uXCIsIFwiXCIpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICB0YXJnZXRba2V5XVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXkudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0gPz8gXCJcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5ub2RlXzBfc2VjdGlvbiA9IHtcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIGFsaWduU2VsZjogXCJzdHJldGNoXCIsXG4gICAgICBmbGV4R3JvdzogMSxcbiAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICBtYXhXaWR0aDogdGhpcy5tYXhXaWR0aCB8fCAxMjAwLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgYWxpZ25JdGVtczogXCJzdHJldGNoXCIsXG4gICAgICBtYXJnaW5MZWZ0OiBcImF1dG9cIixcbiAgICAgIG1hcmdpblJpZ2h0OiBcImF1dG9cIixcbiAgICB9O1xuICAgIHRoaXMuZWxSZWYwX3N0YXRlXzAgPSB7fTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuZWxSZWYwX3N0YXRlXzApO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLmVsUmVmMD8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhpcy5ub2RlXzBfc2VjdGlvbiA9IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBhbGlnblNlbGY6IFwic3RyZXRjaFwiLFxuICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgbWF4V2lkdGg6IHRoaXMubWF4V2lkdGggfHwgMTIwMCxcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwic3RyZXRjaFwiLFxuICAgICAgICBtYXJnaW5MZWZ0OiBcImF1dG9cIixcbiAgICAgICAgbWFyZ2luUmlnaHQ6IFwiYXV0b1wiLFxuICAgICAgfTtcbiAgICAgIHRoaXMuZWxSZWYwX3N0YXRlXzAgPSB7fTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhcbiAgICAgICAgdGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMuZWxSZWYwX3N0YXRlXzAsXG4gICAgICAgIGNoYW5nZXNbXCJlbFJlZjBfc3RhdGVfMFwiXT8uY3VycmVudFZhbHVlXG4gICAgICApO1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKFxuICAgICAgICB0aGlzLmVsUmVmMD8ubmF0aXZlRWxlbWVudCxcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLFxuICAgICAgICBjaGFuZ2VzW1wiYXR0cmlidXRlc1wiXT8uY3VycmVudFZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGZvciAoY29uc3QgZm4gb2YgdGhpcy5fbGlzdGVuZXJGbnMudmFsdWVzKCkpIHtcbiAgICAgIGZuKCk7XG4gICAgfVxuICB9XG59XG4iXX0=
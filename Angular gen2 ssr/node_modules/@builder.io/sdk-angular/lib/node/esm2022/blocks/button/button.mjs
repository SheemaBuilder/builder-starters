import { Component, Input } from "@angular/core";
import { CommonModule } from "@angular/common";
import DynamicRenderer from "../../components/dynamic-renderer/dynamic-renderer";
import { getClassPropName } from "../../functions/get-class-prop-name";
import * as i0 from "@angular/core";
export default class BuilderButton {
    constructor() {
        this.node_0_DynamicRenderer = null;
        this.node_1_DynamicRenderer = null;
    }
    attrs() {
        return {
            ...this.attributes,
            [getClassPropName()]: `${this.link ? "" : "builder-button"} ${this.attributes[getClassPropName()] || ""}`,
            ...(this.link
                ? {
                    href: this.link,
                    target: this.openLinkInNewTab ? "_blank" : undefined,
                    role: "link",
                }
                : {
                    role: "button",
                }),
        };
    }
    ngOnInit() {
        this.node_0_DynamicRenderer = this.attrs();
        this.node_1_DynamicRenderer = {};
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_DynamicRenderer = this.attrs();
            this.node_1_DynamicRenderer = {};
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderButton, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BuilderButton, isStandalone: true, selector: "builder-button", inputs: { attributes: "attributes", link: "link", openLinkInNewTab: "openLinkInNewTab", builderLinkComponent: "builderLinkComponent", text: "text" }, usesOnChanges: true, ngImport: i0, template: `
    <dynamic-renderer
      [attributes]="node_0_DynamicRenderer"
      [TagName]="link ? builderLinkComponent || 'a' : 'button'"
      [actionAttributes]="node_1_DynamicRenderer"
    >
      {{text}}
    </dynamic-renderer>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "component", type: DynamicRenderer, selector: "dynamic-renderer, DynamicRenderer", inputs: ["TagName", "attributes", "actionAttributes"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderButton, decorators: [{
            type: Component,
            args: [{ selector: "builder-button", template: `
    <dynamic-renderer
      [attributes]="node_0_DynamicRenderer"
      [TagName]="link ? builderLinkComponent || 'a' : 'button'"
      [actionAttributes]="node_1_DynamicRenderer"
    >
      {{text}}
    </dynamic-renderer>
  `, standalone: true, imports: [CommonModule, DynamicRenderer], styles: [":host{display:contents}\n"] }]
        }], propDecorators: { attributes: [{
                type: Input
            }], link: [{
                type: Input
            }], openLinkInNewTab: [{
                type: Input
            }], builderLinkComponent: [{
                type: Input
            }], text: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2Jsb2Nrcy9idXR0b24vYnV0dG9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxlQUFlLE1BQU0sb0RBQW9ELENBQUM7QUFDakYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUNBQXFDLENBQUM7O0FBeUJ2RSxNQUFNLENBQUMsT0FBTyxPQUFPLGFBQWE7SUFyQmxDO1FBNkNFLDJCQUFzQixHQUFHLElBQUksQ0FBQztRQUM5QiwyQkFBc0IsR0FBRyxJQUFJLENBQUM7S0FhL0I7SUEvQkMsS0FBSztRQUNILE9BQU87WUFDTCxHQUFHLElBQUksQ0FBQyxVQUFVO1lBQ2xCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsSUFDeEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksRUFDekMsRUFBRTtZQUNGLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSTtnQkFDWCxDQUFDLENBQUM7b0JBQ0UsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUztvQkFDcEQsSUFBSSxFQUFFLE1BQU07aUJBQ2I7Z0JBQ0gsQ0FBQyxDQUFDO29CQUNFLElBQUksRUFBRSxRQUFRO2lCQUNmLENBQUM7U0FDUCxDQUFDO0lBQ0osQ0FBQztJQUlELFFBQVE7UUFDTixJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzNDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLENBQUM7U0FDbEM7SUFDSCxDQUFDOytHQXJDa0IsYUFBYTttR0FBYixhQUFhLHFQQW5CdEI7Ozs7Ozs7O0dBUVQsa0dBU1MsWUFBWSwrQkFBRSxlQUFlOzs0RkFFcEIsYUFBYTtrQkFyQmpDLFNBQVM7K0JBQ0UsZ0JBQWdCLFlBQ2hCOzs7Ozs7OztHQVFULGNBUVcsSUFBSSxXQUNQLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQzs4QkFHL0IsVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUNHLG9CQUFvQjtzQkFBNUIsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuaW1wb3J0IER5bmFtaWNSZW5kZXJlciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9keW5hbWljLXJlbmRlcmVyL2R5bmFtaWMtcmVuZGVyZXJcIjtcbmltcG9ydCB7IGdldENsYXNzUHJvcE5hbWUgfSBmcm9tIFwiLi4vLi4vZnVuY3Rpb25zL2dldC1jbGFzcy1wcm9wLW5hbWVcIjtcbmltcG9ydCB7IGZpbHRlckF0dHJzIH0gZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB0eXBlIHsgQnV0dG9uUHJvcHMgfSBmcm9tIFwiLi9idXR0b24udHlwZXNcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImJ1aWxkZXItYnV0dG9uXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGR5bmFtaWMtcmVuZGVyZXJcbiAgICAgIFthdHRyaWJ1dGVzXT1cIm5vZGVfMF9EeW5hbWljUmVuZGVyZXJcIlxuICAgICAgW1RhZ05hbWVdPVwibGluayA/IGJ1aWxkZXJMaW5rQ29tcG9uZW50IHx8ICdhJyA6ICdidXR0b24nXCJcbiAgICAgIFthY3Rpb25BdHRyaWJ1dGVzXT1cIm5vZGVfMV9EeW5hbWljUmVuZGVyZXJcIlxuICAgID5cbiAgICAgIHt7dGV4dH19XG4gICAgPC9keW5hbWljLXJlbmRlcmVyPlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xuICAgICAgfVxuICAgIGAsXG4gIF0sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIER5bmFtaWNSZW5kZXJlcl0sXG59KVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVpbGRlckJ1dHRvbiB7XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBCdXR0b25Qcm9wc1tcImF0dHJpYnV0ZXNcIl07XG4gIEBJbnB1dCgpIGxpbmshOiBCdXR0b25Qcm9wc1tcImxpbmtcIl07XG4gIEBJbnB1dCgpIG9wZW5MaW5rSW5OZXdUYWIhOiBCdXR0b25Qcm9wc1tcIm9wZW5MaW5rSW5OZXdUYWJcIl07XG4gIEBJbnB1dCgpIGJ1aWxkZXJMaW5rQ29tcG9uZW50ITogQnV0dG9uUHJvcHNbXCJidWlsZGVyTGlua0NvbXBvbmVudFwiXTtcbiAgQElucHV0KCkgdGV4dCE6IEJ1dHRvblByb3BzW1widGV4dFwiXTtcblxuICBhdHRycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4udGhpcy5hdHRyaWJ1dGVzLFxuICAgICAgW2dldENsYXNzUHJvcE5hbWUoKV06IGAke3RoaXMubGluayA/IFwiXCIgOiBcImJ1aWxkZXItYnV0dG9uXCJ9ICR7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlc1tnZXRDbGFzc1Byb3BOYW1lKCldIHx8IFwiXCJcbiAgICAgIH1gLFxuICAgICAgLi4uKHRoaXMubGlua1xuICAgICAgICA/IHtcbiAgICAgICAgICAgIGhyZWY6IHRoaXMubGluayxcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5vcGVuTGlua0luTmV3VGFiID8gXCJfYmxhbmtcIiA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJvbGU6IFwibGlua1wiLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgICAgICAgIH0pLFxuICAgIH07XG4gIH1cbiAgbm9kZV8wX0R5bmFtaWNSZW5kZXJlciA9IG51bGw7XG4gIG5vZGVfMV9EeW5hbWljUmVuZGVyZXIgPSBudWxsO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubm9kZV8wX0R5bmFtaWNSZW5kZXJlciA9IHRoaXMuYXR0cnMoKTtcbiAgICB0aGlzLm5vZGVfMV9EeW5hbWljUmVuZGVyZXIgPSB7fTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhpcy5ub2RlXzBfRHluYW1pY1JlbmRlcmVyID0gdGhpcy5hdHRycygpO1xuICAgICAgdGhpcy5ub2RlXzFfRHluYW1pY1JlbmRlcmVyID0ge307XG4gICAgfVxuICB9XG59XG4iXX0=
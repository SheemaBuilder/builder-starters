export const componentInfo = {
    name: 'Form:Input',
    image: 'https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fad6f37889d9e40bbbbc72cdb5875d6ca',
    inputs: [{
            name: 'type',
            type: 'text',
            enum: ['text', 'number', 'email', 'url', 'checkbox', 'radio', 'range', 'date', 'datetime-local', 'search', 'tel', 'time', 'file', 'month', 'week', 'password', 'color', 'hidden'],
            defaultValue: 'text'
        }, {
            name: 'name',
            type: 'string',
            required: true,
            helperText: 'Every input in a form needs a unique name describing what it takes, e.g. "email"'
        }, {
            name: 'placeholder',
            type: 'string',
            defaultValue: 'Hello there',
            helperText: 'Text to display when there is no value'
        },
        // TODO: handle value vs default value automatically like ng-model
        {
            name: 'defaultValue',
            type: 'string'
        }, {
            name: 'value',
            type: 'string',
            advanced: true
        }, {
            name: 'required',
            type: 'boolean',
            helperText: 'Is this input required to be filled out to submit a form',
            defaultValue: false
        }],
    noWrap: true,
    static: true,
    defaultStyles: {
        paddingTop: '10px',
        paddingBottom: '10px',
        paddingLeft: '10px',
        paddingRight: '10px',
        borderRadius: '3px',
        borderWidth: '1px',
        borderStyle: 'solid',
        borderColor: '#ccc'
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYmxvY2tzL2Zvcm0vaW5wdXQvY29tcG9uZW50LWluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFrQjtJQUMxQyxJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsOEdBQThHO0lBQ3JILE1BQU0sRUFBRSxDQUFDO1lBQ1AsSUFBSSxFQUFFLE1BQU07WUFDWixJQUFJLEVBQUUsTUFBTTtZQUNaLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUM7WUFDakwsWUFBWSxFQUFFLE1BQU07U0FDckIsRUFBRTtZQUNELElBQUksRUFBRSxNQUFNO1lBQ1osSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUUsSUFBSTtZQUNkLFVBQVUsRUFBRSxrRkFBa0Y7U0FDL0YsRUFBRTtZQUNELElBQUksRUFBRSxhQUFhO1lBQ25CLElBQUksRUFBRSxRQUFRO1lBQ2QsWUFBWSxFQUFFLGFBQWE7WUFDM0IsVUFBVSxFQUFFLHdDQUF3QztTQUNyRDtRQUNELGtFQUFrRTtRQUNsRTtZQUNFLElBQUksRUFBRSxjQUFjO1lBQ3BCLElBQUksRUFBRSxRQUFRO1NBQ2YsRUFBRTtZQUNELElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUUsSUFBSTtTQUNmLEVBQUU7WUFDRCxJQUFJLEVBQUUsVUFBVTtZQUNoQixJQUFJLEVBQUUsU0FBUztZQUNmLFVBQVUsRUFBRSwwREFBMEQ7WUFDdEUsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQztJQUNGLE1BQU0sRUFBRSxJQUFJO0lBQ1osTUFBTSxFQUFFLElBQUk7SUFDWixhQUFhLEVBQUU7UUFDYixVQUFVLEVBQUUsTUFBTTtRQUNsQixhQUFhLEVBQUUsTUFBTTtRQUNyQixXQUFXLEVBQUUsTUFBTTtRQUNuQixZQUFZLEVBQUUsTUFBTTtRQUNwQixZQUFZLEVBQUUsS0FBSztRQUNuQixXQUFXLEVBQUUsS0FBSztRQUNsQixXQUFXLEVBQUUsT0FBTztRQUNwQixXQUFXLEVBQUUsTUFBTTtLQUNwQjtDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbXBvbmVudEluZm8gfSBmcm9tICcuLi8uLi8uLi90eXBlcy9jb21wb25lbnRzJztcbmV4cG9ydCBjb25zdCBjb21wb25lbnRJbmZvOiBDb21wb25lbnRJbmZvID0ge1xuICBuYW1lOiAnRm9ybTpJbnB1dCcsXG4gIGltYWdlOiAnaHR0cHM6Ly9jZG4uYnVpbGRlci5pby9hcGkvdjEvaW1hZ2UvYXNzZXRzJTJGSXN4UEtNbzJnUFJSS2Vha1V6dGoxRDZ1cWVkMiUyRmFkNmYzNzg4OWQ5ZTQwYmJiYmM3MmNkYjU4NzVkNmNhJyxcbiAgaW5wdXRzOiBbe1xuICAgIG5hbWU6ICd0eXBlJyxcbiAgICB0eXBlOiAndGV4dCcsXG4gICAgZW51bTogWyd0ZXh0JywgJ251bWJlcicsICdlbWFpbCcsICd1cmwnLCAnY2hlY2tib3gnLCAncmFkaW8nLCAncmFuZ2UnLCAnZGF0ZScsICdkYXRldGltZS1sb2NhbCcsICdzZWFyY2gnLCAndGVsJywgJ3RpbWUnLCAnZmlsZScsICdtb250aCcsICd3ZWVrJywgJ3Bhc3N3b3JkJywgJ2NvbG9yJywgJ2hpZGRlbiddLFxuICAgIGRlZmF1bHRWYWx1ZTogJ3RleHQnXG4gIH0sIHtcbiAgICBuYW1lOiAnbmFtZScsXG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgaGVscGVyVGV4dDogJ0V2ZXJ5IGlucHV0IGluIGEgZm9ybSBuZWVkcyBhIHVuaXF1ZSBuYW1lIGRlc2NyaWJpbmcgd2hhdCBpdCB0YWtlcywgZS5nLiBcImVtYWlsXCInXG4gIH0sIHtcbiAgICBuYW1lOiAncGxhY2Vob2xkZXInLFxuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGRlZmF1bHRWYWx1ZTogJ0hlbGxvIHRoZXJlJyxcbiAgICBoZWxwZXJUZXh0OiAnVGV4dCB0byBkaXNwbGF5IHdoZW4gdGhlcmUgaXMgbm8gdmFsdWUnXG4gIH0sXG4gIC8vIFRPRE86IGhhbmRsZSB2YWx1ZSB2cyBkZWZhdWx0IHZhbHVlIGF1dG9tYXRpY2FsbHkgbGlrZSBuZy1tb2RlbFxuICB7XG4gICAgbmFtZTogJ2RlZmF1bHRWYWx1ZScsXG4gICAgdHlwZTogJ3N0cmluZydcbiAgfSwge1xuICAgIG5hbWU6ICd2YWx1ZScsXG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgYWR2YW5jZWQ6IHRydWVcbiAgfSwge1xuICAgIG5hbWU6ICdyZXF1aXJlZCcsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgIGhlbHBlclRleHQ6ICdJcyB0aGlzIGlucHV0IHJlcXVpcmVkIHRvIGJlIGZpbGxlZCBvdXQgdG8gc3VibWl0IGEgZm9ybScsXG4gICAgZGVmYXVsdFZhbHVlOiBmYWxzZVxuICB9XSxcbiAgbm9XcmFwOiB0cnVlLFxuICBzdGF0aWM6IHRydWUsXG4gIGRlZmF1bHRTdHlsZXM6IHtcbiAgICBwYWRkaW5nVG9wOiAnMTBweCcsXG4gICAgcGFkZGluZ0JvdHRvbTogJzEwcHgnLFxuICAgIHBhZGRpbmdMZWZ0OiAnMTBweCcsXG4gICAgcGFkZGluZ1JpZ2h0OiAnMTBweCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnM3B4JyxcbiAgICBib3JkZXJXaWR0aDogJzFweCcsXG4gICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgYm9yZGVyQ29sb3I6ICcjY2NjJ1xuICB9XG59Il19
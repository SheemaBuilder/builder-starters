import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import Blocks from "../../components/blocks/blocks";
import DynamicDiv from "../../components/dynamic-div";
import DynamicRenderer from "../../components/dynamic-renderer/dynamic-renderer";
import InlinedStyles from "../../components/inlined-styles";
import { getSizesForBreakpoints } from "../../constants/device-sizes";
import { TARGET } from "../../constants/target";
import { getClassPropName } from "../../functions/get-class-prop-name";
import { mapStyleObjToStrIfNeeded } from "../../functions/get-style";
import { getColumnsClass } from "./helpers";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class Columns {
    get gutterSize() {
        return typeof this.space === "number" ? this.space || 0 : 20;
    }
    get cols() {
        return this.columns || [];
    }
    get stackAt() {
        return this.stackColumnsAt || "tablet";
    }
    getTagName(column) {
        return column.link ? this.builderLinkComponent || "a" : DynamicDiv;
    }
    getWidth(index) {
        return this.cols[index]?.width || 100 / this.cols.length;
    }
    getColumnCssWidth(index) {
        const width = this.getWidth(index);
        const subtractWidth = this.gutterSize * (this.cols.length - 1) * (width / 100);
        return `calc(${width}% - ${subtractWidth}px)`;
    }
    getTabletStyle({ stackedStyle, desktopStyle, }) {
        return this.stackAt === "tablet" ? stackedStyle : desktopStyle;
    }
    getMobileStyle({ stackedStyle, desktopStyle, }) {
        return this.stackAt === "never" ? desktopStyle : stackedStyle;
    }
    get flexDir() {
        return this.stackColumnsAt === "never"
            ? "row"
            : this.reverseColumnsWhenStacked
                ? "column-reverse"
                : "column";
    }
    columnsCssVars() {
        return {
            "--flex-dir": this.flexDir,
            "--flex-dir-tablet": this.getTabletStyle({
                stackedStyle: this.flexDir,
                desktopStyle: "row",
            }),
        };
    }
    columnCssVars(index) {
        const gutter = index === 0 ? 0 : this.gutterSize;
        const width = this.getColumnCssWidth(index);
        const gutterPixels = `${gutter}px`;
        const mobileWidth = "100%";
        const mobileMarginLeft = 0;
        const marginLeftKey = "margin-left";
        const sharedStyles = {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
        };
        return {
            ...sharedStyles,
            width,
            [marginLeftKey]: gutterPixels,
            "--column-width-mobile": this.getMobileStyle({
                stackedStyle: mobileWidth,
                desktopStyle: width,
            }),
            "--column-margin-left-mobile": this.getMobileStyle({
                stackedStyle: mobileMarginLeft,
                desktopStyle: gutterPixels,
            }),
            "--column-width-tablet": this.getTabletStyle({
                stackedStyle: mobileWidth,
                desktopStyle: width,
            }),
            "--column-margin-left-tablet": this.getTabletStyle({
                stackedStyle: mobileMarginLeft,
                desktopStyle: gutterPixels,
            }),
        };
    }
    getWidthForBreakpointSize(size) {
        const breakpointSizes = getSizesForBreakpoints(this.builderContext.content?.meta?.breakpoints || {});
        return breakpointSizes[size].max;
    }
    columnsStyles() {
        const childColumnDiv = `.${this.builderBlock.id}-breakpoints .builder-column:first-of-type`;
        return `
        @media (max-width: ${this.getWidthForBreakpointSize("medium")}px) {
          .${this.builderBlock.id}-breakpoints {
            flex-direction: var(--flex-dir-tablet);
            align-items: stretch;
          }

          ${childColumnDiv} {
            width: var(--column-width-tablet) !important;
            margin-left: var(--column-margin-left-tablet) !important;
          }
        }

        @media (max-width: ${this.getWidthForBreakpointSize("small")}px) {
          .${this.builderBlock.id}-breakpoints {
            flex-direction: var(--flex-dir);
            align-items: stretch;
          }

          ${childColumnDiv} {
            width: var(--column-width-mobile) !important;
            margin-left: var(--column-margin-left-mobile) !important;
          }
        },
      `;
    }
    getAttributes(column, index) {
        return {
            ...{},
            ...(column.link
                ? {
                    href: column.link,
                }
                : {}),
            [getClassPropName()]: "builder-column",
            style: mapStyleObjToStrIfNeeded(this.columnCssVars(index)),
        };
    }
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    trackByColumn0(index, column) {
        return index;
    }
    constructor(renderer) {
        this.renderer = renderer;
        this.TARGET = TARGET;
        this._listenerFns = new Map();
        this.node_0_div = null;
        this.node_1_div = null;
        this.node_2_InlinedStyles = null;
        this.node_3_DynamicRenderer = (column, index) => this.getTagName(column);
        this.node_4_DynamicRenderer = (column, index) => ({});
        this.node_5_DynamicRenderer = (column, index) => this.getAttributes(column, index);
        this.node_6_Blocks = (column, index) => `columns.${index}.blocks`;
        this.node_7_Blocks = (column, index) => ({
            flexGrow: "1",
        });
        this.elRef0_state_0 = null;
    }
    ngOnInit() {
        this.node_0_div = getColumnsClass(this.builderBlock?.id);
        this.node_1_div = this.columnsCssVars();
        this.node_2_InlinedStyles = this.columnsStyles();
        this.elRef0_state_0 = {};
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_div = getColumnsClass(this.builderBlock?.id);
            this.node_1_div = this.columnsCssVars();
            this.node_2_InlinedStyles = this.columnsStyles();
            this.elRef0_state_0 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0, changes["elRef0_state_0"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: Columns, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: Columns, isStandalone: true, selector: "columns", inputs: { builderBlock: "builderBlock", space: "space", columns: "columns", stackColumnsAt: "stackColumnsAt", builderLinkComponent: "builderLinkComponent", reverseColumnsWhenStacked: "reverseColumnsWhenStacked", builderContext: "builderContext", builderComponents: "builderComponents" }, viewQueries: [{ propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div [class]="node_0_div + ' div'" [ngStyle]="node_1_div" #elRef0>
      <ng-container *ngIf="TARGET !== 'reactNative'">
        <inlined-styles
          id="builderio-columns"
          [styles]="node_2_InlinedStyles"
          [nonce]="builderContext.nonce"
        ></inlined-styles>
      </ng-container>
      <ng-container
        *ngFor="let column of columns; index as index; trackBy: trackByColumn0"
      >
        <dynamic-renderer
          [TagName]="node_3_DynamicRenderer(column, index)"
          [actionAttributes]="node_4_DynamicRenderer(column, index)"
          [attributes]="node_5_DynamicRenderer(column, index)"
        >
          <blocks
            [path]="node_6_Blocks(column, index)"
            [parent]="builderBlock.id"
            [context]="builderContext"
            [registeredComponents]="builderComponents"
            [linkComponent]="builderLinkComponent"
            [blocks]="column.blocks"
            [styleProp]="node_7_Blocks(column, index)"
          ></blocks>
        </dynamic-renderer>
      </ng-container>
    </div>
  `, isInline: true, styles: [":host{display:contents}.div{display:flex;line-height:normal}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: InlinedStyles, selector: "inlined-styles, InlinedStyles", inputs: ["styles", "id", "nonce"] }, { kind: "component", type: DynamicRenderer, selector: "dynamic-renderer, DynamicRenderer", inputs: ["TagName", "attributes", "actionAttributes"] }, { kind: "component", type: Blocks, selector: "blocks", inputs: ["blocks", "parent", "path", "styleProp", "className", "context", "linkComponent", "registeredComponents"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: Columns, decorators: [{
            type: Component,
            args: [{ selector: "columns", template: `
    <div [class]="node_0_div + ' div'" [ngStyle]="node_1_div" #elRef0>
      <ng-container *ngIf="TARGET !== 'reactNative'">
        <inlined-styles
          id="builderio-columns"
          [styles]="node_2_InlinedStyles"
          [nonce]="builderContext.nonce"
        ></inlined-styles>
      </ng-container>
      <ng-container
        *ngFor="let column of columns; index as index; trackBy: trackByColumn0"
      >
        <dynamic-renderer
          [TagName]="node_3_DynamicRenderer(column, index)"
          [actionAttributes]="node_4_DynamicRenderer(column, index)"
          [attributes]="node_5_DynamicRenderer(column, index)"
        >
          <blocks
            [path]="node_6_Blocks(column, index)"
            [parent]="builderBlock.id"
            [context]="builderContext"
            [registeredComponents]="builderComponents"
            [linkComponent]="builderLinkComponent"
            [blocks]="column.blocks"
            [styleProp]="node_7_Blocks(column, index)"
          ></blocks>
        </dynamic-renderer>
      </ng-container>
    </div>
  `, standalone: true, imports: [CommonModule, InlinedStyles, DynamicRenderer, Blocks], styles: [":host{display:contents}.div{display:flex;line-height:normal}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { builderBlock: [{
                type: Input
            }], space: [{
                type: Input
            }], columns: [{
                type: Input
            }], stackColumnsAt: [{
                type: Input
            }], builderLinkComponent: [{
                type: Input
            }], reverseColumnsWhenStacked: [{
                type: Input
            }], builderContext: [{
                type: Input
            }], builderComponents: [{
                type: Input
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,
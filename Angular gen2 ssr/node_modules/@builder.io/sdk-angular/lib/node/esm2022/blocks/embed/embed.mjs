import { ChangeDetectionStrategy } from "@angular/core";
import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import { isJsScript } from "./helpers";
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export default class BuilderEmbed {
    findAndRunScripts() {
        if (!this.elem.nativeElement ||
            !this.elem.nativeElement.getElementsByTagName)
            return;
        const scripts = this.elem.nativeElement.getElementsByTagName("script");
        for (let i = 0; i < scripts.length; i++) {
            const script = scripts[i];
            if (script.src && !this.scriptsInserted.includes(script.src)) {
                this.scriptsInserted.push(script.src);
                const newScript = document.createElement("script");
                newScript.async = true;
                newScript.src = script.src;
                document.head.appendChild(newScript);
            }
            else if (isJsScript(script) &&
                !this.scriptsRun.includes(script.innerText)) {
                try {
                    this.scriptsRun.push(script.innerText);
                    new Function(script.innerText)();
                }
                catch (error) {
                    console.warn("`Embed`: Error running script:", error);
                }
            }
        }
    }
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.scriptsInserted = [];
        this.scriptsRun = [];
        this.ranInitFn = false;
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            if (this.elem.nativeElement && !this.ranInitFn) {
                this.ranInitFn = true;
                this.findAndRunScripts();
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderEmbed, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BuilderEmbed, isStandalone: true, selector: "builder-embed", inputs: { content: "content" }, viewQueries: [{ propertyName: "elem", first: true, predicate: ["elem"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div class="builder-embed" #elem [innerHTML]="sanitizer.bypassSecurityTrustHtml(content)"></div>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderEmbed, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: "builder-embed", template: `
    <div class="builder-embed" #elem [innerHTML]="sanitizer.bypassSecurityTrustHtml(content)"></div>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { content: [{
                type: Input
            }], elem: [{
                type: ViewChild,
                args: ["elem"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmxvY2tzL2VtYmVkL2VtYmVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFFVCxLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBTS9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7OztBQWtCdkMsTUFBTSxDQUFDLE9BQU8sT0FBTyxZQUFZO0lBUS9CLGlCQUFpQjtRQUNmLElBQ0UsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWE7WUFDeEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0I7WUFFN0MsT0FBTztRQUNULE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzVELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdEMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbkQsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLFNBQVMsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFDM0IsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDdEM7aUJBQU0sSUFDTCxVQUFVLENBQUMsTUFBTSxDQUFDO2dCQUNsQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDM0M7Z0JBQ0EsSUFBSTtvQkFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQ3ZDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO2lCQUNsQztnQkFBQyxPQUFPLEtBQUssRUFBRTtvQkFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUN2RDthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsWUFBc0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQWhDN0Msb0JBQWUsR0FBRyxFQUFFLENBQUM7UUFDckIsZUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNoQixjQUFTLEdBQUcsS0FBSyxDQUFDO0lBOEI4QixDQUFDO0lBQ25ELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2FBQzFCO1NBQ0Y7SUFDSCxDQUFDOytHQTdDa0IsWUFBWTttR0FBWixZQUFZLDROQWJyQjs7R0FFVCxrR0FTUyxZQUFZOzs0RkFFSCxZQUFZO2tCQWhCaEMsU0FBUztzQ0FDUyx1QkFBdUIsQ0FBQyxNQUFNLFlBQ3ZDLGVBQWUsWUFDYjs7R0FFVCxjQVFXLElBQUksV0FDUCxDQUFDLFlBQVksQ0FBQzttR0FHZCxPQUFPO3NCQUFmLEtBQUs7Z0JBRWEsSUFBSTtzQkFBdEIsU0FBUzt1QkFBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIjtcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgVmlld0NoaWxkLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuZXhwb3J0IGludGVyZmFjZSBFbWJlZFByb3BzIHtcbiAgY29udGVudDogc3RyaW5nO1xufVxuXG5pbXBvcnQgeyBpc0pzU2NyaXB0IH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuXG5AQ29tcG9uZW50KHtcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG5zZWxlY3RvcjogXCJidWlsZGVyLWVtYmVkXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cImJ1aWxkZXItZW1iZWRcIiAjZWxlbSBbaW5uZXJIVE1MXT1cInNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChjb250ZW50KVwiPjwvZGl2PlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xuICAgICAgfVxuICAgIGAsXG4gIF0sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxufSlcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1aWxkZXJFbWJlZCB7XG4gIEBJbnB1dCgpIGNvbnRlbnQhOiBFbWJlZFByb3BzW1wiY29udGVudFwiXTtcblxuICBAVmlld0NoaWxkKFwiZWxlbVwiKSBlbGVtITogRWxlbWVudFJlZjtcblxuICBzY3JpcHRzSW5zZXJ0ZWQgPSBbXTtcbiAgc2NyaXB0c1J1biA9IFtdO1xuICByYW5Jbml0Rm4gPSBmYWxzZTtcbiAgZmluZEFuZFJ1blNjcmlwdHMoKSB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMuZWxlbS5uYXRpdmVFbGVtZW50IHx8XG4gICAgICAhdGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWVcbiAgICApXG4gICAgICByZXR1cm47XG4gICAgY29uc3Qgc2NyaXB0cyA9IHRoaXMuZWxlbS5uYXRpdmVFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc2NyaXB0ID0gc2NyaXB0c1tpXTtcbiAgICAgIGlmIChzY3JpcHQuc3JjICYmICF0aGlzLnNjcmlwdHNJbnNlcnRlZC5pbmNsdWRlcyhzY3JpcHQuc3JjKSkge1xuICAgICAgICB0aGlzLnNjcmlwdHNJbnNlcnRlZC5wdXNoKHNjcmlwdC5zcmMpO1xuICAgICAgICBjb25zdCBuZXdTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICBuZXdTY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgICBuZXdTY3JpcHQuc3JjID0gc2NyaXB0LnNyYztcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChuZXdTY3JpcHQpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgaXNKc1NjcmlwdChzY3JpcHQpICYmXG4gICAgICAgICF0aGlzLnNjcmlwdHNSdW4uaW5jbHVkZXMoc2NyaXB0LmlubmVyVGV4dClcbiAgICAgICkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuc2NyaXB0c1J1bi5wdXNoKHNjcmlwdC5pbm5lclRleHQpO1xuICAgICAgICAgIG5ldyBGdW5jdGlvbihzY3JpcHQuaW5uZXJUZXh0KSgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcImBFbWJlZGA6IEVycm9yIHJ1bm5pbmcgc2NyaXB0OlwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHt9XG5uZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmICh0aGlzLmVsZW0ubmF0aXZlRWxlbWVudCAmJiAhdGhpcy5yYW5Jbml0Rm4pIHtcbiAgICAgICAgdGhpcy5yYW5Jbml0Rm4gPSB0cnVlO1xuICAgICAgICB0aGlzLmZpbmRBbmRSdW5TY3JpcHRzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=
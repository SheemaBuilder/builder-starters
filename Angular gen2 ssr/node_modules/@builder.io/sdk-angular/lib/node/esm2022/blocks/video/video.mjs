import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class BuilderVideo {
    get videoProps() {
        return {
            ...(this.autoPlay === true
                ? {
                    autoPlay: true,
                }
                : {}),
            ...(this.muted === true
                ? {
                    muted: true,
                }
                : {}),
            ...(this.controls === true
                ? {
                    controls: true,
                }
                : {}),
            ...(this.loop === true
                ? {
                    loop: true,
                }
                : {}),
            ...(this.playsInline === true
                ? {
                    playsInline: true,
                }
                : {}),
        };
    }
    get spreadProps() {
        return {
            ...this.videoProps,
        };
    }
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.lazyVideoObserver = undefined;
        this.node_0_div = null;
        this.node_1_video = null;
        this.node_2_source = null;
        this.node_3_Show = null;
        this.node_4_div = null;
        this.node_5_div = null;
        this.node_6_div = null;
    }
    ngOnInit() {
        this.node_0_div = {
            position: "relative",
        };
        this.node_1_video = {
            width: "100%",
            height: "100%",
            ...this.attributes?.style,
            objectFit: this.fit,
            objectPosition: this.position,
            // Hack to get object fit to work as expected and
            // not have the video overflow
            borderRadius: "1px",
            ...(this.aspectRatio
                ? {
                    position: "absolute",
                }
                : null),
        };
        this.node_2_source = {
            ...(this.lazyLoad
                ? {
                    "data-src": this.video,
                }
                : {
                    src: this.video,
                }),
        };
        this.node_3_Show =
            this.aspectRatio &&
                !(this.fitContent && this.builderBlock?.children?.length);
        this.node_4_div = {
            width: "100%",
            paddingTop: this.aspectRatio * 100 + "%",
            pointerEvents: "none",
            fontSize: "0px",
        };
        this.node_5_div = {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
        };
        this.node_6_div = {
            pointerEvents: "none",
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            position: "absolute",
            top: "0",
            left: "0",
            width: "100%",
            height: "100%",
        };
    }
    ngAfterViewInit() {
        if (this.lazyLoad) {
            const oberver = new IntersectionObserver(function (entries) {
                entries.forEach(function (entry) {
                    if (!entry.isIntersecting)
                        return;
                    const videoElement = entry.target;
                    try {
                        // Convert HTMLCollection to Array and filter for source elements
                        Array.from(videoElement.children)
                            .filter((child) => child instanceof HTMLElement && child.tagName === "SOURCE")
                            .forEach((source) => {
                            const src = source.dataset.src;
                            if (src) {
                                source.src = src;
                            }
                        });
                        videoElement.load();
                        oberver.unobserve(videoElement);
                    }
                    catch (error) {
                        console.error("Error loading lazy video:", error);
                    }
                });
            });
            if (this.videoRef.nativeElement) {
                oberver.observe(this.videoRef.nativeElement);
            }
            this.lazyVideoObserver = oberver;
        }
        this.setAttributes(this.elRef0?.nativeElement, this.spreadProps);
        this.setAttributes(this.elRef1?.nativeElement, this.node_2_source);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_div = {
                position: "relative",
            };
            this.node_1_video = {
                width: "100%",
                height: "100%",
                ...this.attributes?.style,
                objectFit: this.fit,
                objectPosition: this.position,
                // Hack to get object fit to work as expected and
                // not have the video overflow
                borderRadius: "1px",
                ...(this.aspectRatio
                    ? {
                        position: "absolute",
                    }
                    : null),
            };
            this.node_2_source = {
                ...(this.lazyLoad
                    ? {
                        "data-src": this.video,
                    }
                    : {
                        src: this.video,
                    }),
            };
            this.node_3_Show =
                this.aspectRatio &&
                    !(this.fitContent && this.builderBlock?.children?.length);
            this.node_4_div = {
                width: "100%",
                paddingTop: this.aspectRatio * 100 + "%",
                pointerEvents: "none",
                fontSize: "0px",
            };
            this.node_5_div = {
                display: "flex",
                flexDirection: "column",
                alignItems: "stretch",
            };
            this.node_6_div = {
                pointerEvents: "none",
                display: "flex",
                flexDirection: "column",
                alignItems: "stretch",
                position: "absolute",
                top: "0",
                left: "0",
                width: "100%",
                height: "100%",
            };
            this.setAttributes(this.elRef0?.nativeElement, this.spreadProps, changes["spreadProps"]?.currentValue);
            this.setAttributes(this.elRef1?.nativeElement, this.node_2_source, changes["node_2_source"]?.currentValue);
        }
    }
    ngOnDestroy() {
        if (this.lazyVideoObserver) {
            this.lazyVideoObserver.disconnect();
        }
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderVideo, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BuilderVideo, isStandalone: true, selector: "builder-video", inputs: { lazyLoad: "lazyLoad", attributes: "attributes", fit: "fit", position: "position", aspectRatio: "aspectRatio", video: "video", fitContent: "fitContent", builderBlock: "builderBlock", autoPlay: "autoPlay", muted: "muted", controls: "controls", loop: "loop", playsInline: "playsInline", preload: "preload", posterImage: "posterImage" }, viewQueries: [{ propertyName: "videoRef", first: true, predicate: ["videoRef"], descendants: true }, { propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }, { propertyName: "elRef1", first: true, predicate: ["elRef1"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div [ngStyle]="node_0_div">
      <video
        class="builder-video"
        #videoRef
        [attr.preload]="lazyLoad ? 'none' : preload || 'metadata'"
        [ngStyle]="node_1_video"
        [attr.poster]="posterImage"
        #elRef0
      >
        <source type="video/mp4" #elRef1 />
      </video>
      <ng-container *ngIf="node_3_Show">
        <div [ngStyle]="node_4_div"></div>
      </ng-container>
      <ng-container *ngIf="builderBlock?.children?.length && fitContent">
        <div [ngStyle]="node_5_div"><ng-content></ng-content></div>
      </ng-container>
      <ng-container *ngIf="builderBlock?.children?.length && !fitContent">
        <div [ngStyle]="node_6_div"><ng-content></ng-content></div>
      </ng-container>
    </div>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderVideo, decorators: [{
            type: Component,
            args: [{ selector: "builder-video", template: `
    <div [ngStyle]="node_0_div">
      <video
        class="builder-video"
        #videoRef
        [attr.preload]="lazyLoad ? 'none' : preload || 'metadata'"
        [ngStyle]="node_1_video"
        [attr.poster]="posterImage"
        #elRef0
      >
        <source type="video/mp4" #elRef1 />
      </video>
      <ng-container *ngIf="node_3_Show">
        <div [ngStyle]="node_4_div"></div>
      </ng-container>
      <ng-container *ngIf="builderBlock?.children?.length && fitContent">
        <div [ngStyle]="node_5_div"><ng-content></ng-content></div>
      </ng-container>
      <ng-container *ngIf="builderBlock?.children?.length && !fitContent">
        <div [ngStyle]="node_6_div"><ng-content></ng-content></div>
      </ng-container>
    </div>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { lazyLoad: [{
                type: Input
            }], attributes: [{
                type: Input
            }], fit: [{
                type: Input
            }], position: [{
                type: Input
            }], aspectRatio: [{
                type: Input
            }], video: [{
                type: Input
            }], fitContent: [{
                type: Input
            }], builderBlock: [{
                type: Input
            }], autoPlay: [{
                type: Input
            }], muted: [{
                type: Input
            }], controls: [{
                type: Input
            }], loop: [{
                type: Input
            }], playsInline: [{
                type: Input
            }], preload: [{
                type: Input
            }], posterImage: [{
                type: Input
            }], videoRef: [{
                type: ViewChild,
                args: ["videoRef"]
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }], elRef1: [{
                type: ViewChild,
                args: ["elRef1"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmxvY2tzL3ZpZGVvL3ZpZGVvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUdULEtBQUssR0FFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQXVDL0MsTUFBTSxDQUFDLE9BQU8sT0FBTyxZQUFZO0lBd0IvQixJQUFJLFVBQVU7UUFDWixPQUFPO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSTtnQkFDeEIsQ0FBQyxDQUFDO29CQUNFLFFBQVEsRUFBRSxJQUFJO2lCQUNmO2dCQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDUCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJO2dCQUNyQixDQUFDLENBQUM7b0JBQ0UsS0FBSyxFQUFFLElBQUk7aUJBQ1o7Z0JBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNQLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUk7Z0JBQ3hCLENBQUMsQ0FBQztvQkFDRSxRQUFRLEVBQUUsSUFBSTtpQkFDZjtnQkFDSCxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ1AsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSTtnQkFDcEIsQ0FBQyxDQUFDO29CQUNFLElBQUksRUFBRSxJQUFJO2lCQUNYO2dCQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDUCxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJO2dCQUMzQixDQUFDLENBQUM7b0JBQ0UsV0FBVyxFQUFFLElBQUk7aUJBQ2xCO2dCQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDUixDQUFDO0lBQ0osQ0FBQztJQUNELElBQUksV0FBVztRQUNiLE9BQU87WUFDTCxHQUFHLElBQUks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O2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBQ0csT0FBTztzQkFBZixLQUFLO2dCQUNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBRWlCLFFBQVE7c0JBQTlCLFNBQVM7dUJBQUMsVUFBVTtnQkFFQSxNQUFNO3NCQUExQixTQUFTO3VCQUFDLFFBQVE7Z0JBQ0UsTUFBTTtzQkFBMUIsU0FBUzt1QkFBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBWaWV3Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMixcbiAgSW5wdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5cbmltcG9ydCB0eXBlIHsgVmlkZW9Qcm9wcyB9IGZyb20gXCIuL3ZpZGVvLnR5cGVzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJidWlsZGVyLXZpZGVvXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbbmdTdHlsZV09XCJub2RlXzBfZGl2XCI+XG4gICAgICA8dmlkZW9cbiAgICAgICAgY2xhc3M9XCJidWlsZGVyLXZpZGVvXCJcbiAgICAgICAgI3ZpZGVvUmVmXG4gICAgICAgIFthdHRyLnByZWxvYWRdPVwibGF6eUxvYWQgPyAnbm9uZScgOiBwcmVsb2FkIHx8ICdtZXRhZGF0YSdcIlxuICAgICAgICBbbmdTdHlsZV09XCJub2RlXzFfdmlkZW9cIlxuICAgICAgICBbYXR0ci5wb3N0ZXJdPVwicG9zdGVySW1hZ2VcIlxuICAgICAgICAjZWxSZWYwXG4gICAgICA+XG4gICAgICAgIDxzb3VyY2UgdHlwZT1cInZpZGVvL21wNFwiICNlbFJlZjEgLz5cbiAgICAgIDwvdmlkZW8+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwibm9kZV8zX1Nob3dcIj5cbiAgICAgICAgPGRpdiBbbmdTdHlsZV09XCJub2RlXzRfZGl2XCI+PC9kaXY+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJidWlsZGVyQmxvY2s/LmNoaWxkcmVuPy5sZW5ndGggJiYgZml0Q29udGVudFwiPlxuICAgICAgICA8ZGl2IFtuZ1N0eWxlXT1cIm5vZGVfNV9kaXZcIj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9kaXY+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJidWlsZGVyQmxvY2s/LmNoaWxkcmVuPy5sZW5ndGggJiYgIWZpdENvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBbbmdTdHlsZV09XCJub2RlXzZfZGl2XCI+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvZGl2PlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogY29udGVudHM7XG4gICAgICB9XG4gICAgYCxcbiAgXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG59KVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVpbGRlclZpZGVvIHtcbiAgQElucHV0KCkgbGF6eUxvYWQhOiBWaWRlb1Byb3BzW1wibGF6eUxvYWRcIl07XG4gIEBJbnB1dCgpIGF0dHJpYnV0ZXMhOiBWaWRlb1Byb3BzW1wiYXR0cmlidXRlc1wiXTtcbiAgQElucHV0KCkgZml0ITogVmlkZW9Qcm9wc1tcImZpdFwiXTtcbiAgQElucHV0KCkgcG9zaXRpb24hOiBWaWRlb1Byb3BzW1wicG9zaXRpb25cIl07XG4gIEBJbnB1dCgpIGFzcGVjdFJhdGlvITogVmlkZW9Qcm9wc1tcImFzcGVjdFJhdGlvXCJdO1xuICBASW5wdXQoKSB2aWRlbyE6IFZpZGVvUHJvcHNbXCJ2aWRlb1wiXTtcbiAgQElucHV0KCkgZml0Q29udGVudCE6IFZpZGVvUHJvcHNbXCJmaXRDb250ZW50XCJdO1xuICBASW5wdXQoKSBidWlsZGVyQmxvY2shOiBWaWRlb1Byb3BzW1wiYnVpbGRlckJsb2NrXCJdO1xuICBASW5wdXQoKSBhdXRvUGxheSE6IFZpZGVvUHJvcHNbXCJhdXRvUGxheVwiXTtcbiAgQElucHV0KCkgbXV0ZWQhOiBWaWRlb1Byb3BzW1wibXV0ZWRcIl07XG4gIEBJbnB1dCgpIGNvbnRyb2xzITogVmlkZW9Qcm9wc1tcImNvbnRyb2xzXCJdO1xuICBASW5wdXQoKSBsb29wITogVmlkZW9Qcm9wc1tcImxvb3BcIl07XG4gIEBJbnB1dCgpIHBsYXlzSW5saW5lITogVmlkZW9Qcm9wc1tcInBsYXlzSW5saW5lXCJdO1xuICBASW5wdXQoKSBwcmVsb2FkITogVmlkZW9Qcm9wc1tcInByZWxvYWRcIl07XG4gIEBJbnB1dCgpIHBvc3RlckltYWdlITogVmlkZW9Qcm9wc1tcInBvc3RlckltYWdlXCJdO1xuXG4gIEBWaWV3Q2hpbGQoXCJ2aWRlb1JlZlwiKSB2aWRlb1JlZiE6IEVsZW1lbnRSZWY7XG5cbiAgQFZpZXdDaGlsZChcImVsUmVmMFwiKSBlbFJlZjAhOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKFwiZWxSZWYxXCIpIGVsUmVmMSE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgZ2V0IHZpZGVvUHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLih0aGlzLmF1dG9QbGF5ID09PSB0cnVlXG4gICAgICAgID8ge1xuICAgICAgICAgICAgYXV0b1BsYXk6IHRydWUsXG4gICAgICAgICAgfVxuICAgICAgICA6IHt9KSxcbiAgICAgIC4uLih0aGlzLm11dGVkID09PSB0cnVlXG4gICAgICAgID8ge1xuICAgICAgICAgICAgbXV0ZWQ6IHRydWUsXG4gICAgICAgICAgfVxuICAgICAgICA6IHt9KSxcbiAgICAgIC4uLih0aGlzLmNvbnRyb2xzID09PSB0cnVlXG4gICAgICAgID8ge1xuICAgICAgICAgICAgY29udHJvbHM6IHRydWUsXG4gICAgICAgICAgfVxuICAgICAgICA6IHt9KSxcbiAgICAgIC4uLih0aGlzLmxvb3AgPT09IHRydWVcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB7fSksXG4gICAgICAuLi4odGhpcy5wbGF5c0lubGluZSA9PT0gdHJ1ZVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIHBsYXlzSW5saW5lOiB0cnVlLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB7fSksXG4gICAgfTtcbiAgfVxuICBnZXQgc3ByZWFkUHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMudmlkZW9Qcm9wcyxcbiAgICB9O1xuICB9XG4gIGxhenlWaWRlb09ic2VydmVyID0gdW5kZWZpbmVkO1xuICBub2RlXzBfZGl2ID0gbnVsbDtcbiAgbm9kZV8xX3ZpZGVvID0gbnVsbDtcbiAgbm9kZV8yX3NvdXJjZSA9IG51bGw7XG4gIG5vZGVfM19TaG93ID0gbnVsbDtcbiAgbm9kZV80X2RpdiA9IG51bGw7XG4gIG5vZGVfNV9kaXYgPSBudWxsO1xuICBub2RlXzZfZGl2ID0gbnVsbDtcbiAgc2V0QXR0cmlidXRlcyhlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IHR5cGVvZiBjaGFuZ2VzID09PSBcInVuZGVmaW5lZFwiID8gdmFsdWUgOiBjaGFuZ2VzO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICBrZXkucmVwbGFjZShcIm9uXCIsIFwiXCIpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICB0YXJnZXRba2V5XVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXkudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0gPz8gXCJcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5ub2RlXzBfZGl2ID0ge1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICB9O1xuICAgIHRoaXMubm9kZV8xX3ZpZGVvID0ge1xuICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIC4uLnRoaXMuYXR0cmlidXRlcz8uc3R5bGUsXG4gICAgICBvYmplY3RGaXQ6IHRoaXMuZml0LFxuICAgICAgb2JqZWN0UG9zaXRpb246IHRoaXMucG9zaXRpb24sXG4gICAgICAvLyBIYWNrIHRvIGdldCBvYmplY3QgZml0IHRvIHdvcmsgYXMgZXhwZWN0ZWQgYW5kXG4gICAgICAvLyBub3QgaGF2ZSB0aGUgdmlkZW8gb3ZlcmZsb3dcbiAgICAgIGJvcmRlclJhZGl1czogXCIxcHhcIixcbiAgICAgIC4uLih0aGlzLmFzcGVjdFJhdGlvXG4gICAgICAgID8ge1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICB9XG4gICAgICAgIDogbnVsbCksXG4gICAgfTtcbiAgICB0aGlzLm5vZGVfMl9zb3VyY2UgPSB7XG4gICAgICAuLi4odGhpcy5sYXp5TG9hZFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIFwiZGF0YS1zcmNcIjogdGhpcy52aWRlbyxcbiAgICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgc3JjOiB0aGlzLnZpZGVvLFxuICAgICAgICAgIH0pLFxuICAgIH07XG4gICAgdGhpcy5ub2RlXzNfU2hvdyA9XG4gICAgICB0aGlzLmFzcGVjdFJhdGlvICYmXG4gICAgICAhKHRoaXMuZml0Q29udGVudCAmJiB0aGlzLmJ1aWxkZXJCbG9jaz8uY2hpbGRyZW4/Lmxlbmd0aCk7XG4gICAgdGhpcy5ub2RlXzRfZGl2ID0ge1xuICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgcGFkZGluZ1RvcDogdGhpcy5hc3BlY3RSYXRpbyEgKiAxMDAgKyBcIiVcIixcbiAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgICAgZm9udFNpemU6IFwiMHB4XCIsXG4gICAgfTtcbiAgICB0aGlzLm5vZGVfNV9kaXYgPSB7XG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICBhbGlnbkl0ZW1zOiBcInN0cmV0Y2hcIixcbiAgICB9O1xuICAgIHRoaXMubm9kZV82X2RpdiA9IHtcbiAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgYWxpZ25JdGVtczogXCJzdHJldGNoXCIsXG4gICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgdG9wOiBcIjBcIixcbiAgICAgIGxlZnQ6IFwiMFwiLFxuICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICB9O1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLmxhenlMb2FkKSB7XG4gICAgICBjb25zdCBvYmVydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICBpZiAoIWVudHJ5LmlzSW50ZXJzZWN0aW5nKSByZXR1cm47XG4gICAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50ID0gZW50cnkudGFyZ2V0IGFzIEhUTUxWaWRlb0VsZW1lbnQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgSFRNTENvbGxlY3Rpb24gdG8gQXJyYXkgYW5kIGZpbHRlciBmb3Igc291cmNlIGVsZW1lbnRzXG4gICAgICAgICAgICBBcnJheS5mcm9tKHZpZGVvRWxlbWVudC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgLmZpbHRlcihcbiAgICAgICAgICAgICAgICAoY2hpbGQpOiBjaGlsZCBpcyBIVE1MU291cmNlRWxlbWVudCA9PlxuICAgICAgICAgICAgICAgICAgY2hpbGQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBjaGlsZC50YWdOYW1lID09PSBcIlNPVVJDRVwiXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgLmZvckVhY2goKHNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNyYyA9IHNvdXJjZS5kYXRhc2V0LnNyYztcbiAgICAgICAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICAgICAgICBzb3VyY2Uuc3JjID0gc3JjO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQubG9hZCgpO1xuICAgICAgICAgICAgb2JlcnZlci51bm9ic2VydmUodmlkZW9FbGVtZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxvYWRpbmcgbGF6eSB2aWRlbzpcIiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLnZpZGVvUmVmLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgb2JlcnZlci5vYnNlcnZlKHRoaXMudmlkZW9SZWYubmF0aXZlRWxlbWVudCk7XG4gICAgICB9XG4gICAgICB0aGlzLmxhenlWaWRlb09ic2VydmVyID0gb2JlcnZlcjtcbiAgICB9XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMuZWxSZWYwPy5uYXRpdmVFbGVtZW50LCB0aGlzLnNwcmVhZFByb3BzKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy5lbFJlZjE/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMubm9kZV8yX3NvdXJjZSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMubm9kZV8wX2RpdiA9IHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgIH07XG4gICAgICB0aGlzLm5vZGVfMV92aWRlbyA9IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAuLi50aGlzLmF0dHJpYnV0ZXM/LnN0eWxlLFxuICAgICAgICBvYmplY3RGaXQ6IHRoaXMuZml0LFxuICAgICAgICBvYmplY3RQb3NpdGlvbjogdGhpcy5wb3NpdGlvbixcbiAgICAgICAgLy8gSGFjayB0byBnZXQgb2JqZWN0IGZpdCB0byB3b3JrIGFzIGV4cGVjdGVkIGFuZFxuICAgICAgICAvLyBub3QgaGF2ZSB0aGUgdmlkZW8gb3ZlcmZsb3dcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjFweFwiLFxuICAgICAgICAuLi4odGhpcy5hc3BlY3RSYXRpb1xuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogbnVsbCksXG4gICAgICB9O1xuICAgICAgdGhpcy5ub2RlXzJfc291cmNlID0ge1xuICAgICAgICAuLi4odGhpcy5sYXp5TG9hZFxuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICBcImRhdGEtc3JjXCI6IHRoaXMudmlkZW8sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiB7XG4gICAgICAgICAgICAgIHNyYzogdGhpcy52aWRlbyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgfTtcbiAgICAgIHRoaXMubm9kZV8zX1Nob3cgPVxuICAgICAgICB0aGlzLmFzcGVjdFJhdGlvICYmXG4gICAgICAgICEodGhpcy5maXRDb250ZW50ICYmIHRoaXMuYnVpbGRlckJsb2NrPy5jaGlsZHJlbj8ubGVuZ3RoKTtcbiAgICAgIHRoaXMubm9kZV80X2RpdiA9IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBwYWRkaW5nVG9wOiB0aGlzLmFzcGVjdFJhdGlvISAqIDEwMCArIFwiJVwiLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgICAgICAgZm9udFNpemU6IFwiMHB4XCIsXG4gICAgICB9O1xuICAgICAgdGhpcy5ub2RlXzVfZGl2ID0ge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJzdHJldGNoXCIsXG4gICAgICB9O1xuICAgICAgdGhpcy5ub2RlXzZfZGl2ID0ge1xuICAgICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwic3RyZXRjaFwiLFxuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB0b3A6IFwiMFwiLFxuICAgICAgICBsZWZ0OiBcIjBcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgfTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhcbiAgICAgICAgdGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMuc3ByZWFkUHJvcHMsXG4gICAgICAgIGNoYW5nZXNbXCJzcHJlYWRQcm9wc1wiXT8uY3VycmVudFZhbHVlXG4gICAgICApO1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKFxuICAgICAgICB0aGlzLmVsUmVmMT8ubmF0aXZlRWxlbWVudCxcbiAgICAgICAgdGhpcy5ub2RlXzJfc291cmNlLFxuICAgICAgICBjaGFuZ2VzW1wibm9kZV8yX3NvdXJjZVwiXT8uY3VycmVudFZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmxhenlWaWRlb09ic2VydmVyKSB7XG4gICAgICB0aGlzLmxhenlWaWRlb09ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBmbiBvZiB0aGlzLl9saXN0ZW5lckZucy52YWx1ZXMoKSkge1xuICAgICAgZm4oKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import ContentVariants from "../../components/content-variants/index";
import DynamicDiv from "../../components/dynamic-div";
import { getClassPropName } from "../../functions/get-class-prop-name";
import { fetchSymbolContent } from "./symbol.helpers";
import * as i0 from "@angular/core";
export default class BuilderSymbol {
    get blocksWrapper() {
        return DynamicDiv;
    }
    get contentWrapper() {
        return DynamicDiv;
    }
    get className() {
        return [
            ...[this.attributes[getClassPropName()]],
            "builder-symbol",
            this.symbol?.inline ? "builder-inline-symbol" : undefined,
            this.symbol?.dynamic || this.dynamic
                ? "builder-dynamic-symbol"
                : undefined,
        ]
            .filter(Boolean)
            .join(" ");
    }
    setContent() {
        if (this.contentToUse)
            return;
        fetchSymbolContent({
            symbol: this.symbol,
            builderContextValue: this.builderContext,
        }).then((newContent) => {
            if (newContent) {
                this.contentToUse = newContent;
            }
        });
    }
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.contentToUse = null;
        this.node_0_ContentVariants = null;
        this.node_1_ContentVariants = null;
        this.node_2_ContentVariants = null;
        this.elRef0_state_0 = null;
        this.elRef0_state_1 = null;
    }
    ngOnInit() {
        this.contentToUse = this.symbol?.content;
        this.node_0_ContentVariants = {
            ...this.builderContext.context,
            symbolId: this.builderBlock?.id,
        };
        this.node_1_ContentVariants = Object.values(this.builderComponents);
        this.node_2_ContentVariants = {
            ...this.symbol?.data,
            ...this.builderContext.localState,
            ...this.contentToUse?.data?.state,
        };
        this.elRef0_state_0 = {};
        this.elRef0_state_1 = {};
        if (typeof window !== "undefined") {
        }
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0);
        this.setAttributes(this.elRef0?.nativeElement, this.attributes);
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_1);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            if (changes.symbol) {
                this.setContent();
            }
            this.node_0_ContentVariants = {
                ...this.builderContext.context,
                symbolId: this.builderBlock?.id,
            };
            this.node_1_ContentVariants = Object.values(this.builderComponents);
            this.node_2_ContentVariants = {
                ...this.symbol?.data,
                ...this.builderContext.localState,
                ...this.contentToUse?.data?.state,
            };
            this.elRef0_state_0 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0, changes["elRef0_state_0"]?.currentValue);
            this.setAttributes(this.elRef0?.nativeElement, this.attributes, changes["attributes"]?.currentValue);
            this.elRef0_state_1 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_1, changes["elRef0_state_1"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderSymbol, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BuilderSymbol, isStandalone: true, selector: "builder-symbol", inputs: { symbol: "symbol", builderContext: "builderContext", builderBlock: "builderBlock", builderComponents: "builderComponents", attributes: "attributes", dynamic: "dynamic", builderLinkComponent: "builderLinkComponent" }, viewQueries: [{ propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div [class]="className" #elRef0>
      <content-variants
        [nonce]="builderContext.nonce"
        [isNestedRender]="true"
        [apiVersion]="builderContext.apiVersion"
        [apiKey]="builderContext.apiKey!"
        [context]="node_0_ContentVariants"
        [customComponents]="node_1_ContentVariants"
        [data]="node_2_ContentVariants"
        [canTrack]="builderContext.canTrack"
        [model]="symbol?.model ?? ''"
        [content]="contentToUse"
        [linkComponent]="builderLinkComponent"
        [blocksWrapper]="blocksWrapper"
        [contentWrapper]="contentWrapper"
      ></content-variants>
    </div>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "component", type: ContentVariants, selector: "builder-content, content-variants", inputs: ["canTrack", "content", "isNestedRender", "nonce", "apiHost", "model", "data", "context", "apiKey", "apiVersion", "customComponents", "linkComponent", "locale", "enrich", "blocksWrapper", "blocksWrapperProps", "contentWrapper", "contentWrapperProps", "trustedHosts"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderSymbol, decorators: [{
            type: Component,
            args: [{ selector: "builder-symbol", template: `
    <div [class]="className" #elRef0>
      <content-variants
        [nonce]="builderContext.nonce"
        [isNestedRender]="true"
        [apiVersion]="builderContext.apiVersion"
        [apiKey]="builderContext.apiKey!"
        [context]="node_0_ContentVariants"
        [customComponents]="node_1_ContentVariants"
        [data]="node_2_ContentVariants"
        [canTrack]="builderContext.canTrack"
        [model]="symbol?.model ?? ''"
        [content]="contentToUse"
        [linkComponent]="builderLinkComponent"
        [blocksWrapper]="blocksWrapper"
        [contentWrapper]="contentWrapper"
      ></content-variants>
    </div>
  `, standalone: true, imports: [CommonModule, ContentVariants], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { symbol: [{
                type: Input
            }], builderContext: [{
                type: Input
            }], builderBlock: [{
                type: Input
            }], builderComponents: [{
                type: Input
            }], attributes: [{
                type: Input
            }], dynamic: [{
                type: Input
            }], builderLinkComponent: [{
                type: Input
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2Jsb2Nrcy9zeW1ib2wvc3ltYm9sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUdULEtBQUssR0FFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxlQUFlLE1BQU0seUNBQXlDLENBQUM7QUFHdEUsT0FBTyxVQUFVLE1BQU0sOEJBQThCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFHdkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBa0N0RCxNQUFNLENBQUMsT0FBTyxPQUFPLGFBQWE7SUFhaEMsSUFBSSxhQUFhO1FBQ2YsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUNELElBQUksY0FBYztRQUNoQixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxTQUFTO1FBQ1gsT0FBTztZQUNMLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztZQUN4QyxnQkFBZ0I7WUFDaEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxTQUFTO1lBQ3pELElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPO2dCQUNsQyxDQUFDLENBQUMsd0JBQXdCO2dCQUMxQixDQUFDLENBQUMsU0FBUztTQUNkO2FBQ0UsTUFBTSxDQUFDLE9BQU8sQ0FBQzthQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNmLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxJQUFJLENBQUMsWUFBWTtZQUFFLE9BQU87UUFDOUIs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QUFhLEVBQzFCLElBQUksQ0FBQyxVQUFVLEVBQ2YsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FDcEMsQ0FBQztZQUNGLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxhQUFhLENBQ2hCLElBQUksQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUMxQixJQUFJLENBQUMsY0FBYyxFQUNuQixPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxZQUFZLENBQ3hDLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsS0FBSyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQzNDLEVBQUUsRUFBRSxDQUFDO1NBQ047SUFDSCxDQUFDOytHQXhJa0IsYUFBYTttR0FBYixhQUFhLG1hQTdCdEI7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCVCxrR0FTUyxZQUFZLCtCQUFFLGVBQWU7OzRGQUVwQixhQUFhO2tCQS9CakMsU0FBUzsrQkFDRSxnQkFBZ0IsWUFDaEI7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCVCxjQVFXLElBQUksV0FDUCxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUM7Z0dBRy9CLE1BQU07c0JBQWQsS0FBSztnQkFDRyxjQUFjO3NCQUF0QixLQUFLO2dCQUNHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csaUJBQWlCO3NCQUF6QixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csT0FBTztzQkFBZixLQUFLO2dCQUNHLG9CQUFvQjtzQkFBNUIsS0FBSztnQkFFZSxNQUFNO3NCQUExQixTQUFTO3VCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgUmVuZGVyZXIyLFxuICBJbnB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuaW1wb3J0IENvbnRlbnRWYXJpYW50cyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9jb250ZW50LXZhcmlhbnRzL2luZGV4XCI7XG5pbXBvcnQgdHlwZSB7IEJ1aWxkZXJDb250ZW50IH0gZnJvbSBcIi4uLy4uL3R5cGVzL2J1aWxkZXItY29udGVudFwiO1xuaW1wb3J0IHsgZmlsdGVyQXR0cnMgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IER5bmFtaWNEaXYgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvZHluYW1pYy1kaXZcIjtcbmltcG9ydCB7IGdldENsYXNzUHJvcE5hbWUgfSBmcm9tIFwiLi4vLi4vZnVuY3Rpb25zL2dldC1jbGFzcy1wcm9wLW5hbWVcIjtcbmltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiLi4vLi4vdHlwZXMvdHlwZXNjcmlwdFwiO1xuaW1wb3J0IHsgc2V0QXR0cnMgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgZmV0Y2hTeW1ib2xDb250ZW50IH0gZnJvbSBcIi4vc3ltYm9sLmhlbHBlcnNcIjtcbmltcG9ydCB0eXBlIHsgU3ltYm9sUHJvcHMgfSBmcm9tIFwiLi9zeW1ib2wudHlwZXNcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImJ1aWxkZXItc3ltYm9sXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbY2xhc3NdPVwiY2xhc3NOYW1lXCIgI2VsUmVmMD5cbiAgICAgIDxjb250ZW50LXZhcmlhbnRzXG4gICAgICAgIFtub25jZV09XCJidWlsZGVyQ29udGV4dC5ub25jZVwiXG4gICAgICAgIFtpc05lc3RlZFJlbmRlcl09XCJ0cnVlXCJcbiAgICAgICAgW2FwaVZlcnNpb25dPVwiYnVpbGRlckNvbnRleHQuYXBpVmVyc2lvblwiXG4gICAgICAgIFthcGlLZXldPVwiYnVpbGRlckNvbnRleHQuYXBpS2V5IVwiXG4gICAgICAgIFtjb250ZXh0XT1cIm5vZGVfMF9Db250ZW50VmFyaWFudHNcIlxuICAgICAgICBbY3VzdG9tQ29tcG9uZW50c109XCJub2RlXzFfQ29udGVudFZhcmlhbnRzXCJcbiAgICAgICAgW2RhdGFdPVwibm9kZV8yX0NvbnRlbnRWYXJpYW50c1wiXG4gICAgICAgIFtjYW5UcmFja109XCJidWlsZGVyQ29udGV4dC5jYW5UcmFja1wiXG4gICAgICAgIFttb2RlbF09XCJzeW1ib2w/Lm1vZGVsID8/ICcnXCJcbiAgICAgICAgW2NvbnRlbnRdPVwiY29udGVudFRvVXNlXCJcbiAgICAgICAgW2xpbmtDb21wb25lbnRdPVwiYnVpbGRlckxpbmtDb21wb25lbnRcIlxuICAgICAgICBbYmxvY2tzV3JhcHBlcl09XCJibG9ja3NXcmFwcGVyXCJcbiAgICAgICAgW2NvbnRlbnRXcmFwcGVyXT1cImNvbnRlbnRXcmFwcGVyXCJcbiAgICAgID48L2NvbnRlbnQtdmFyaWFudHM+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogY29udGVudHM7XG4gICAgICB9XG4gICAgYCxcbiAgXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgQ29udGVudFZhcmlhbnRzXSxcbn0pXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdWlsZGVyU3ltYm9sIHtcbiAgQElucHV0KCkgc3ltYm9sITogU3ltYm9sUHJvcHNbXCJzeW1ib2xcIl07XG4gIEBJbnB1dCgpIGJ1aWxkZXJDb250ZXh0ITogU3ltYm9sUHJvcHNbXCJidWlsZGVyQ29udGV4dFwiXTtcbiAgQElucHV0KCkgYnVpbGRlckJsb2NrITogU3ltYm9sUHJvcHNbXCJidWlsZGVyQmxvY2tcIl07XG4gIEBJbnB1dCgpIGJ1aWxkZXJDb21wb25lbnRzITogU3ltYm9sUHJvcHNbXCJidWlsZGVyQ29tcG9uZW50c1wiXTtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IFN5bWJvbFByb3BzW1wiYXR0cmlidXRlc1wiXTtcbiAgQElucHV0KCkgZHluYW1pYyE6IFN5bWJvbFByb3BzW1wiZHluYW1pY1wiXTtcbiAgQElucHV0KCkgYnVpbGRlckxpbmtDb21wb25lbnQhOiBTeW1ib2xQcm9wc1tcImJ1aWxkZXJMaW5rQ29tcG9uZW50XCJdO1xuXG4gIEBWaWV3Q2hpbGQoXCJlbFJlZjBcIikgZWxSZWYwITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBnZXQgYmxvY2tzV3JhcHBlcigpIHtcbiAgICByZXR1cm4gRHluYW1pY0RpdjtcbiAgfVxuICBnZXQgY29udGVudFdyYXBwZXIoKSB7XG4gICAgcmV0dXJuIER5bmFtaWNEaXY7XG4gIH1cbiAgZ2V0IGNsYXNzTmFtZSgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgLi4uW3RoaXMuYXR0cmlidXRlc1tnZXRDbGFzc1Byb3BOYW1lKCldXSxcbiAgICAgIFwiYnVpbGRlci1zeW1ib2xcIixcbiAgICAgIHRoaXMuc3ltYm9sPy5pbmxpbmUgPyBcImJ1aWxkZXItaW5saW5lLXN5bWJvbFwiIDogdW5kZWZpbmVkLFxuICAgICAgdGhpcy5zeW1ib2w/LmR5bmFtaWMgfHwgdGhpcy5keW5hbWljXG4gICAgICAgID8gXCJidWlsZGVyLWR5bmFtaWMtc3ltYm9sXCJcbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgXVxuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLmpvaW4oXCIgXCIpO1xuICB9XG4gIGNvbnRlbnRUb1VzZSA9IG51bGw7XG4gIHNldENvbnRlbnQoKSB7XG4gICAgaWYgKHRoaXMuY29udGVudFRvVXNlKSByZXR1cm47XG4gICAgZmV0Y2hTeW1ib2xDb250ZW50KHtcbiAgICAgIHN5bWJvbDogdGhpcy5zeW1ib2wsXG4gICAgICBidWlsZGVyQ29udGV4dFZhbHVlOiB0aGlzLmJ1aWxkZXJDb250ZXh0LFxuICAgIH0pLnRoZW4oKG5ld0NvbnRlbnQpID0+IHtcbiAgICAgIGlmIChuZXdDb250ZW50KSB7XG4gICAgICAgIHRoaXMuY29udGVudFRvVXNlID0gbmV3Q29udGVudDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBub2RlXzBfQ29udGVudFZhcmlhbnRzID0gbnVsbDtcbiAgbm9kZV8xX0NvbnRlbnRWYXJpYW50cyA9IG51bGw7XG4gIG5vZGVfMl9Db250ZW50VmFyaWFudHMgPSBudWxsO1xuICBlbFJlZjBfc3RhdGVfMCA9IG51bGw7XG4gIHNldEF0dHJpYnV0ZXMoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSB0eXBlb2YgY2hhbmdlcyA9PT0gXCJ1bmRlZmluZWRcIiA/IHZhbHVlIDogY2hhbmdlcztcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKFwib25cIikpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihcbiAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAga2V5LnJlcGxhY2UoXCJvblwiLCBcIlwiKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgdGFyZ2V0W2tleV1cbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldID8/IFwiXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGVsUmVmMF9zdGF0ZV8xID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jb250ZW50VG9Vc2UgPSB0aGlzLnN5bWJvbD8uY29udGVudDtcbiAgICB0aGlzLm5vZGVfMF9Db250ZW50VmFyaWFudHMgPSB7XG4gICAgICAuLi50aGlzLmJ1aWxkZXJDb250ZXh0LmNvbnRleHQsXG4gICAgICBzeW1ib2xJZDogdGhpcy5idWlsZGVyQmxvY2s/LmlkLFxuICAgIH07XG4gICAgdGhpcy5ub2RlXzFfQ29udGVudFZhcmlhbnRzID0gT2JqZWN0LnZhbHVlcyh0aGlzLmJ1aWxkZXJDb21wb25lbnRzKTtcbiAgICB0aGlzLm5vZGVfMl9Db250ZW50VmFyaWFudHMgPSB7XG4gICAgICAuLi50aGlzLnN5bWJvbD8uZGF0YSxcbiAgICAgIC4uLnRoaXMuYnVpbGRlckNvbnRleHQubG9jYWxTdGF0ZSxcbiAgICAgIC4uLnRoaXMuY29udGVudFRvVXNlPy5kYXRhPy5zdGF0ZSxcbiAgICB9O1xuICAgIHRoaXMuZWxSZWYwX3N0YXRlXzAgPSB7fTtcbiAgICB0aGlzLmVsUmVmMF9zdGF0ZV8xID0ge307XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuZWxSZWYwX3N0YXRlXzApO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLmVsUmVmMD8ubmF0aXZlRWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuZWxSZWYwX3N0YXRlXzEpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoY2hhbmdlcy5zeW1ib2wpIHsgdGhpcy5zZXRDb250ZW50KCk7IH1cbiAgICAgIHRoaXMubm9kZV8wX0NvbnRlbnRWYXJpYW50cyA9IHtcbiAgICAgICAgLi4udGhpcy5idWlsZGVyQ29udGV4dC5jb250ZXh0LFxuICAgICAgICBzeW1ib2xJZDogdGhpcy5idWlsZGVyQmxvY2s/LmlkLFxuICAgICAgfTtcbiAgICAgIHRoaXMubm9kZV8xX0NvbnRlbnRWYXJpYW50cyA9IE9iamVjdC52YWx1ZXModGhpcy5idWlsZGVyQ29tcG9uZW50cyk7XG4gICAgICB0aGlzLm5vZGVfMl9Db250ZW50VmFyaWFudHMgPSB7XG4gICAgICAgIC4uLnRoaXMuc3ltYm9sPy5kYXRhLFxuICAgICAgICAuLi50aGlzLmJ1aWxkZXJDb250ZXh0LmxvY2FsU3RhdGUsXG4gICAgICAgIC4uLnRoaXMuY29udGVudFRvVXNlPy5kYXRhPy5zdGF0ZSxcbiAgICAgIH07XG4gICAgICB0aGlzLmVsUmVmMF9zdGF0ZV8wID0ge307XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXMoXG4gICAgICAgIHRoaXMuZWxSZWYwPy5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0aGlzLmVsUmVmMF9zdGF0ZV8wLFxuICAgICAgICBjaGFuZ2VzW1wiZWxSZWYwX3N0YXRlXzBcIl0/LmN1cnJlbnRWYWx1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhcbiAgICAgICAgdGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyxcbiAgICAgICAgY2hhbmdlc1tcImF0dHJpYnV0ZXNcIl0/LmN1cnJlbnRWYWx1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuZWxSZWYwX3N0YXRlXzEgPSB7fTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhcbiAgICAgICAgdGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMuZWxSZWYwX3N0YXRlXzEsXG4gICAgICAgIGNoYW5nZXNbXCJlbFJlZjBfc3RhdGVfMVwiXT8uY3VycmVudFZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGZvciAoY29uc3QgZm4gb2YgdGhpcy5fbGlzdGVuZXJGbnMudmFsdWVzKCkpIHtcbiAgICAgIGZuKCk7XG4gICAgfVxuICB9XG59XG4iXX0=
import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import * as i0 from "@angular/core";
export default class SubmitButton {
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.elRef0_state_0 = null;
    }
    ngOnInit() {
        this.elRef0_state_0 = {};
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0);
        this.setAttributes(this.elRef0?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.elRef0_state_0 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0, changes["elRef0_state_0"]?.currentValue);
            this.setAttributes(this.elRef0?.nativeElement, this.attributes, changes["attributes"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SubmitButton, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SubmitButton, isStandalone: true, selector: "submit-button", inputs: { attributes: "attributes", text: "text" }, viewQueries: [{ propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <button type="submit" #elRef0>{{text}}</button>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SubmitButton, decorators: [{
            type: Component,
            args: [{ selector: "submit-button", template: `
    <button type="submit" #elRef0>{{text}}</button>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], text: [{
                type: Input
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VibWl0LWJ1dHRvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9ibG9ja3MvZm9ybS9zdWJtaXQtYnV0dG9uL3N1Ym1pdC1idXR0b24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBR1QsS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUE2Qi9DLE1BQU0sQ0FBQyxPQUFPLE9BQU8sWUFBWTtJQVMvQixhQUFhLENBQUMsRUFBZSxFQUFFLEtBQVUsRUFBRSxPQUFhO1FBQ3RELElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUCxPQUFPO1NBQ1I7UUFDRCxNQUFNLE1BQU0sR0FBRyxPQUFPLE9BQU8sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDbEMsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUUsRUFBRSxDQUFDO2lCQUMvQjtnQkFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDbkIsR0FBRyxFQUNILElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUNsQixFQUFFLEVBQ0YsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FDWixDQUNGLENBQUM7YUFDSDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUN0RTtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFlBQW9CLFFBQW1CO1FBQW5CLGFBQVEsR0FBUixRQUFRLENBQVc7UUEzQnZDLGlCQUFZLEdBQUcsSUFBSSxHQUFHLEVBQXNCLENBQUM7UUFFN0MsbUJBQWMsR0FBRyxJQUFJLENBQUM7SUF5Qm9CLENBQUM7SUFFM0MsUUFBUTtRQUNOLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsYUFBYSxDQUNoQixJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFDMUIsSUFBSSxDQUFDLGNBQWMsRUFDbkIsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsWUFBWSxDQUN4QyxDQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FDaEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQzFCLElBQUksQ0FBQyxVQUFVLEVBQ2YsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FDcEMsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxLQUFLLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDM0MsRUFBRSxFQUFFLENBQUM7U0FDTjtJQUNILENBQUM7K0dBaEVrQixZQUFZO21HQUFaLFlBQVksb1BBYnJCOztHQUVULGtHQVNTLFlBQVk7OzRGQUVILFlBQVk7a0JBZmhDLFNBQVM7K0JBQ0UsZUFBZSxZQUNmOztHQUVULGNBUVcsSUFBSSxXQUNQLENBQUMsWUFBWSxDQUFDO2dHQUdkLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUVlLE1BQU07c0JBQTFCLFNBQVM7dUJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgVmlld0NoaWxkLFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsXG4gIElucHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuXG4vKipcbiAqIFRoaXMgaW1wb3J0IGlzIHVzZWQgYnkgdGhlIFN2ZWx0ZSBTREsuIERvIG5vdCByZW1vdmUuXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBCdXR0b25Qcm9wcyB7XG4gIGF0dHJpYnV0ZXM/OiBhbnk7XG4gIHRleHQ/OiBzdHJpbmc7XG59XG5cbmltcG9ydCB7IGZpbHRlckF0dHJzIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnNcIjtcbmltcG9ydCB7IHNldEF0dHJzIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnNcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcInN1Ym1pdC1idXR0b25cIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiAjZWxSZWYwPnt7dGV4dH19PC9idXR0b24+XG4gIGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogY29udGVudHM7XG4gICAgICB9XG4gICAgYCxcbiAgXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG59KVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VibWl0QnV0dG9uIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IEJ1dHRvblByb3BzW1wiYXR0cmlidXRlc1wiXTtcbiAgQElucHV0KCkgdGV4dCE6IEJ1dHRvblByb3BzW1widGV4dFwiXTtcblxuICBAVmlld0NoaWxkKFwiZWxSZWYwXCIpIGVsUmVmMCE6IEVsZW1lbnRSZWY7XG5cbiAgX2xpc3RlbmVyRm5zID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KCk7XG5cbiAgZWxSZWYwX3N0YXRlXzAgPSBudWxsO1xuICBzZXRBdHRyaWJ1dGVzKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGFueSwgY2hhbmdlcz86IGFueSkge1xuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0ID0gdHlwZW9mIGNoYW5nZXMgPT09IFwidW5kZWZpbmVkXCIgPyB2YWx1ZSA6IGNoYW5nZXM7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aChcIm9uXCIpKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lckZucy5oYXMoa2V5KSkge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLmdldChrZXkpISgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRm5zLnNldChcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oXG4gICAgICAgICAgICBlbCxcbiAgICAgICAgICAgIGtleS5yZXBsYWNlKFwib25cIiwgXCJcIikudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHRhcmdldFtrZXldXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGtleS50b0xvd2VyQ2FzZSgpLCB0YXJnZXRba2V5XSA/PyBcIlwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmVsUmVmMF9zdGF0ZV8wID0ge307XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMuZWxSZWYwPy5uYXRpdmVFbGVtZW50LCB0aGlzLmVsUmVmMF9zdGF0ZV8wKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuZWxSZWYwX3N0YXRlXzAgPSB7fTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhcbiAgICAgICAgdGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMuZWxSZWYwX3N0YXRlXzAsXG4gICAgICAgIGNoYW5nZXNbXCJlbFJlZjBfc3RhdGVfMFwiXT8uY3VycmVudFZhbHVlXG4gICAgICApO1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKFxuICAgICAgICB0aGlzLmVsUmVmMD8ubmF0aXZlRWxlbWVudCxcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLFxuICAgICAgICBjaGFuZ2VzW1wiYXR0cmlidXRlc1wiXT8uY3VycmVudFZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGZvciAoY29uc3QgZm4gb2YgdGhpcy5fbGlzdGVuZXJGbnMudmFsdWVzKCkpIHtcbiAgICAgIGZuKCk7XG4gICAgfVxuICB9XG59XG4iXX0=
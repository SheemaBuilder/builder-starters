import { ChangeDetectionStrategy } from "@angular/core";
import { Component, Input } from "@angular/core";
import { CommonModule } from "@angular/common";
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common";
export default class BuilderText {
    ngOnInit() {
        this.node_0_div = this.text?.toString() || "";
        this.node_1_div = {
            outline: "none",
        };
    }
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.node_0_div = null;
        this.node_1_div = null;
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_div = this.text?.toString() || "";
            this.node_1_div = {
                outline: "none",
            };
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderText, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BuilderText, isStandalone: true, selector: "builder-text", inputs: { text: "text" }, usesOnChanges: true, ngImport: i0, template: `
    <div
      class="builder-text"
      [innerHTML]="sanitizer.bypassSecurityTrustHtml(node_0_div)"
      [ngStyle]="node_1_div"
    ></div>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderText, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: "builder-text", template: `
    <div
      class="builder-text"
      [innerHTML]="sanitizer.bypassSecurityTrustHtml(node_0_div)"
      [ngStyle]="node_1_div"
    ></div>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { text: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9ibG9ja3MvdGV4dC90ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0FBd0IvQyxNQUFNLENBQUMsT0FBTyxPQUFPLFdBQVc7SUFNOUIsUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLFVBQVUsR0FBRztZQUNoQixPQUFPLEVBQUUsTUFBTTtTQUNoQixDQUFDO0lBQ0osQ0FBQztJQUVELFlBQXNCLFNBQXVCO1FBQXZCLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFWN0MsZUFBVSxHQUFHLElBQUksQ0FBQztRQUNsQixlQUFVLEdBQUcsSUFBSSxDQUFDO0lBUzhCLENBQUM7SUFDbkQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDOUMsSUFBSSxDQUFDLFVBQVUsR0FBRztnQkFDaEIsT0FBTyxFQUFFLE1BQU07YUFDaEIsQ0FBQztTQUNIO0lBQ0gsQ0FBQzsrR0FyQmtCLFdBQVc7bUdBQVgsV0FBVyx1SEFqQnBCOzs7Ozs7R0FNVCxrR0FTUyxZQUFZOzs0RkFFSCxXQUFXO2tCQXBCL0IsU0FBUztzQ0FDUyx1QkFBdUIsQ0FBQyxNQUFNLFlBQ3ZDLGNBQWMsWUFDWjs7Ozs7O0dBTVQsY0FRVyxJQUFJLFdBQ1AsQ0FBQyxZQUFZLENBQUM7bUdBR2QsSUFBSTtzQkFBWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIjtcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuXG5pbXBvcnQgdHlwZSB7IFRleHRQcm9wcyB9IGZyb20gXCIuL3RleHQudHlwZXNcIjtcblxuQENvbXBvbmVudCh7XG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuc2VsZWN0b3I6IFwiYnVpbGRlci10ZXh0XCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgY2xhc3M9XCJidWlsZGVyLXRleHRcIlxuICAgICAgW2lubmVySFRNTF09XCJzYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwobm9kZV8wX2RpdilcIlxuICAgICAgW25nU3R5bGVdPVwibm9kZV8xX2RpdlwiXG4gICAgPjwvZGl2PlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xuICAgICAgfVxuICAgIGAsXG4gIF0sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxufSlcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1aWxkZXJUZXh0IHtcbiAgQElucHV0KCkgdGV4dCE6IFRleHRQcm9wc1tcInRleHRcIl07XG5cbiAgbm9kZV8wX2RpdiA9IG51bGw7XG4gIG5vZGVfMV9kaXYgPSBudWxsO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubm9kZV8wX2RpdiA9IHRoaXMudGV4dD8udG9TdHJpbmcoKSB8fCBcIlwiO1xuICAgIHRoaXMubm9kZV8xX2RpdiA9IHtcbiAgICAgIG91dGxpbmU6IFwibm9uZVwiLFxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHt9XG5uZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMubm9kZV8wX2RpdiA9IHRoaXMudGV4dD8udG9TdHJpbmcoKSB8fCBcIlwiO1xuICAgICAgdGhpcy5ub2RlXzFfZGl2ID0ge1xuICAgICAgICBvdXRsaW5lOiBcIm5vbmVcIixcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG4iXX0=
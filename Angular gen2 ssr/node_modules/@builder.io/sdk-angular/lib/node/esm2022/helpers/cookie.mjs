import { isBrowser } from '../functions/is-browser';
import { logger } from './logger';
import { checkIsDefined } from './nullable';
import { getTopLevelDomain } from './url';
export const getCookieSync = ({ name, canTrack }) => {
    try {
        if (!canTrack) {
            return undefined;
        }
        /**
         * Extracted from MDN docs
         * https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie#example_2_get_a_sample_cookie_named_test2
         */
        return document.cookie.split('; ').find(row => row.startsWith(`${name}=`))?.split('=')[1];
    }
    catch (err) {
        logger.warn('[COOKIE] GET error: ', err?.message || err);
        return undefined;
    }
};
/**
 * NOTE: This function is `async` because its react-native override is async. Do not remove the `async` keyword!
 * The sync version is only safe to use in code blocks that `react-native` is guaranteed not to not run.
 */
export const getCookie = async (args) => getCookieSync(args);
const stringifyCookie = (cookie) => cookie.map(([key, value]) => value ? `${key}=${value}` : key).filter(checkIsDefined).join('; ');
const SECURE_CONFIG = [['secure', ''], ['SameSite', 'None']];
const createCookieString = ({ name, value, expires }) => {
    const secure = isBrowser() ? location.protocol === 'https:' : true;
    const secureObj = secure ? SECURE_CONFIG : [[]];
    // TODO: need to know if secure server side
    const expiresObj = expires ? [['expires', expires.toUTCString()]] : [[]];
    const cookieValue = [[name, value], ...expiresObj, ['path', '/'], ['domain', getTopLevelDomain(window.location.hostname)], ...secureObj];
    const cookie = stringifyCookie(cookieValue);
    return cookie;
};
/**
 * NOTE: This function is `async` because its react-native override is async. Do not remove the `async` keyword!
 */
export const setCookie = async ({ name, value, expires, canTrack }) => {
    try {
        if (!canTrack) {
            return;
        }
        const cookie = createCookieString({
            name,
            value,
            expires
        });
        document.cookie = cookie;
    }
    catch (err) {
        logger.warn('[COOKIE] SET error: ', err?.message || err);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2hlbHBlcnMvY29va2llLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVwRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDNUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sT0FBTyxDQUFDO0FBSTFDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQzVCLElBQUksRUFDSixRQUFRLEVBQ00sRUFBc0IsRUFBRTtJQUN0QyxJQUFJO1FBQ0YsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQ7OztXQUdHO1FBQ0gsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMzRjtJQUFDLE9BQU8sR0FBUSxFQUFFO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFLE9BQU8sSUFBSSxHQUFHLENBQUMsQ0FBQztRQUN6RCxPQUFPLFNBQVMsQ0FBQztLQUNsQjtBQUNILENBQUMsQ0FBQztBQUNGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsSUFBbUIsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRTVFLE1BQU0sZUFBZSxHQUFHLENBQUMsTUFBMkIsRUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pLLE1BQU0sYUFBYSxHQUF3QixDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDbEYsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQzFCLElBQUksRUFDSixLQUFLLEVBQ0wsT0FBTyxFQUtSLEVBQUUsRUFBRTtJQUNILE1BQU0sTUFBTSxHQUFHLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ25FLE1BQU0sU0FBUyxHQUF3QixNQUFNLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVyRSwyQ0FBMkM7SUFDM0MsTUFBTSxVQUFVLEdBQXdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlGLE1BQU0sV0FBVyxHQUF3QixDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEdBQUcsVUFBVSxFQUFFLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0lBQzlKLE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1QyxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsRUFDOUIsSUFBSSxFQUNKLEtBQUssRUFDTCxPQUFPLEVBQ1AsUUFBUSxFQUtFLEVBQWlCLEVBQUU7SUFDN0IsSUFBSTtRQUNGLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixPQUFPO1NBQ1I7UUFDRCxNQUFNLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQztZQUNoQyxJQUFJO1lBQ0osS0FBSztZQUNMLE9BQU87U0FDUixDQUFDLENBQUM7UUFDSCxRQUFRLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztLQUMxQjtJQUFDLE9BQU8sR0FBUSxFQUFFO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFLE9BQU8sSUFBSSxHQUFHLENBQUMsQ0FBQztLQUMxRDtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4uL2Z1bmN0aW9ucy9pcy1icm93c2VyJztcbmltcG9ydCB0eXBlIHsgQ2FuVHJhY2sgfSBmcm9tICcuLi90eXBlcy9jYW4tdHJhY2snO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgY2hlY2tJc0RlZmluZWQgfSBmcm9tICcuL251bGxhYmxlJztcbmltcG9ydCB7IGdldFRvcExldmVsRG9tYWluIH0gZnJvbSAnLi91cmwnO1xudHlwZSBHZXRDb29raWVBcmdzID0ge1xuICBuYW1lOiBzdHJpbmc7XG59ICYgQ2FuVHJhY2s7XG5leHBvcnQgY29uc3QgZ2V0Q29va2llU3luYyA9ICh7XG4gIG5hbWUsXG4gIGNhblRyYWNrXG59OiBHZXRDb29raWVBcmdzKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIWNhblRyYWNrKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RlZCBmcm9tIE1ETiBkb2NzXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RvY3VtZW50L2Nvb2tpZSNleGFtcGxlXzJfZ2V0X2Ffc2FtcGxlX2Nvb2tpZV9uYW1lZF90ZXN0MlxuICAgICAqL1xuICAgIHJldHVybiBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykuZmluZChyb3cgPT4gcm93LnN0YXJ0c1dpdGgoYCR7bmFtZX09YCkpPy5zcGxpdCgnPScpWzFdO1xuICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgIGxvZ2dlci53YXJuKCdbQ09PS0lFXSBHRVQgZXJyb3I6ICcsIGVycj8ubWVzc2FnZSB8fCBlcnIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn07XG4vKipcbiAqIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgYGFzeW5jYCBiZWNhdXNlIGl0cyByZWFjdC1uYXRpdmUgb3ZlcnJpZGUgaXMgYXN5bmMuIERvIG5vdCByZW1vdmUgdGhlIGBhc3luY2Aga2V5d29yZCFcbiAqIFRoZSBzeW5jIHZlcnNpb24gaXMgb25seSBzYWZlIHRvIHVzZSBpbiBjb2RlIGJsb2NrcyB0aGF0IGByZWFjdC1uYXRpdmVgIGlzIGd1YXJhbnRlZWQgbm90IHRvIG5vdCBydW4uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDb29raWUgPSBhc3luYyAoYXJnczogR2V0Q29va2llQXJncykgPT4gZ2V0Q29va2llU3luYyhhcmdzKTtcbnR5cGUgQ29va2llQ29uZmlndXJhdGlvbiA9IEFycmF5PFsnZXhwaXJlcycsIHN0cmluZ10gfCBbJ3BhdGgnLCAnLyddIHwgWydkb21haW4nLCBzdHJpbmddIHwgWydzZWN1cmUnLCAnJ10gfCBbJ1NhbWVTaXRlJywgJ05vbmUnXSB8IFtzdHJpbmcsIHN0cmluZ10gfCBbXT47XG5jb25zdCBzdHJpbmdpZnlDb29raWUgPSAoY29va2llOiBDb29raWVDb25maWd1cmF0aW9uKTogc3RyaW5nID0+IGNvb2tpZS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gdmFsdWUgPyBgJHtrZXl9PSR7dmFsdWV9YCA6IGtleSkuZmlsdGVyKGNoZWNrSXNEZWZpbmVkKS5qb2luKCc7ICcpO1xuY29uc3QgU0VDVVJFX0NPTkZJRzogQ29va2llQ29uZmlndXJhdGlvbiA9IFtbJ3NlY3VyZScsICcnXSwgWydTYW1lU2l0ZScsICdOb25lJ11dO1xuY29uc3QgY3JlYXRlQ29va2llU3RyaW5nID0gKHtcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIGV4cGlyZXNcbn06IHtcbiAgbmFtZTogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xuICBleHBpcmVzPzogRGF0ZTtcbn0pID0+IHtcbiAgY29uc3Qgc2VjdXJlID0gaXNCcm93c2VyKCkgPyBsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgOiB0cnVlO1xuICBjb25zdCBzZWN1cmVPYmo6IENvb2tpZUNvbmZpZ3VyYXRpb24gPSBzZWN1cmUgPyBTRUNVUkVfQ09ORklHIDogW1tdXTtcblxuICAvLyBUT0RPOiBuZWVkIHRvIGtub3cgaWYgc2VjdXJlIHNlcnZlciBzaWRlXG4gIGNvbnN0IGV4cGlyZXNPYmo6IENvb2tpZUNvbmZpZ3VyYXRpb24gPSBleHBpcmVzID8gW1snZXhwaXJlcycsIGV4cGlyZXMudG9VVENTdHJpbmcoKV1dIDogW1tdXTtcbiAgY29uc3QgY29va2llVmFsdWU6IENvb2tpZUNvbmZpZ3VyYXRpb24gPSBbW25hbWUsIHZhbHVlXSwgLi4uZXhwaXJlc09iaiwgWydwYXRoJywgJy8nXSwgWydkb21haW4nLCBnZXRUb3BMZXZlbERvbWFpbih3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpXSwgLi4uc2VjdXJlT2JqXTtcbiAgY29uc3QgY29va2llID0gc3RyaW5naWZ5Q29va2llKGNvb2tpZVZhbHVlKTtcbiAgcmV0dXJuIGNvb2tpZTtcbn07XG5cbi8qKlxuICogTk9URTogVGhpcyBmdW5jdGlvbiBpcyBgYXN5bmNgIGJlY2F1c2UgaXRzIHJlYWN0LW5hdGl2ZSBvdmVycmlkZSBpcyBhc3luYy4gRG8gbm90IHJlbW92ZSB0aGUgYGFzeW5jYCBrZXl3b3JkIVxuICovXG5leHBvcnQgY29uc3Qgc2V0Q29va2llID0gYXN5bmMgKHtcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIGV4cGlyZXMsXG4gIGNhblRyYWNrXG59OiB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbiAgZXhwaXJlcz86IERhdGU7XG59ICYgQ2FuVHJhY2spOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIWNhblRyYWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNvb2tpZSA9IGNyZWF0ZUNvb2tpZVN0cmluZyh7XG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICBleHBpcmVzXG4gICAgfSk7XG4gICAgZG9jdW1lbnQuY29va2llID0gY29va2llO1xuICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgIGxvZ2dlci53YXJuKCdbQ09PS0lFXSBTRVQgZXJyb3I6ICcsIGVycj8ubWVzc2FnZSB8fCBlcnIpO1xuICB9XG59Il19
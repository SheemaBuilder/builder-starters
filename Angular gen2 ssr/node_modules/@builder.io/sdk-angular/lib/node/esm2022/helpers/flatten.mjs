/**
 * Convert deep object to a flat object with dots
 *
 * { foo: { bar: 'baz' }} -> { 'foo.bar': 'baz' }
 */
export function flatten(object, path = null, separator = '.') {
    return Object.keys(object).reduce((acc, key) => {
        const value = object[key];
        const newPath = [path, key].filter(Boolean).join(separator);
        const isObject = [typeof value === 'object', value !== null, !(Array.isArray(value) && value.length === 0)].every(Boolean);
        return isObject ? {
            ...acc,
            ...flatten(value, newPath, separator)
        } : {
            ...acc,
            [newPath]: value
        };
    }, {});
}
/**
 * Flatten a nested MongoDB query object into a flat object with dot-separated keys.
 * $ keys are not flattened and are left as is.
 *
 * { foo: { bar: { $gt: 5 }}} -> { 'foo.bar': { '$gt': 5 }}
 * { foo: {'bar.id': { $elemMatch: { 'baz.id': { $in: ['abc', 'bcd'] }}}}} -> { 'foo.bar.id': { '$elemMatch': { 'baz.id': { '$in': ['abc', 'bcd'] }}}}
 */
export function flattenMongoQuery(obj, _current, _res = {}) {
    for (const key in obj) {
        const value = obj[key];
        const newKey = _current ? _current + '.' + key : key;
        if (value && typeof value === 'object' && !Array.isArray(value) && !Object.keys(value).find(item => item.startsWith('$'))) {
            flattenMongoQuery(value, newKey, _res);
        }
        else {
            _res[newKey] = value;
        }
    }
    return _res;
}
/**
 * Unflatten a flat object with dot-separated keys back into a nested object.
 *
 * { 'foo.bar': 'baz' } -> { foo: { bar: 'baz' }}
 */
export function unflatten(obj) {
    const result = {};
    for (const key in obj) {
        const parts = key.split('.');
        let current = result;
        for (let i = 0; i < parts.length; i++) {
            const part = parts[i];
            if (i === parts.length - 1) {
                current[part] = obj[key];
            }
            else {
                current[part] = current[part] || {};
                current = current[part];
            }
        }
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdHRlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oZWxwZXJzL2ZsYXR0ZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxPQUFPLENBQWdDLE1BQVMsRUFBRSxPQUFzQixJQUFJLEVBQUUsU0FBUyxHQUFHLEdBQUc7SUFDM0csT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQU0sRUFBRSxHQUFXLEVBQUssRUFBRTtRQUMzRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1RCxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0gsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsR0FBRztZQUNOLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDO1NBQ3RDLENBQUMsQ0FBQyxDQUFDO1lBQ0YsR0FBRyxHQUFHO1lBQ04sQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLO1NBQ2pCLENBQUM7SUFDSixDQUFDLEVBQUcsRUFBUSxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxHQUFRLEVBQUUsUUFBYyxFQUFFLE9BQVksRUFBRTtJQUd4RSxLQUFLLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRTtRQUNyQixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3JELElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUN6SCxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3hDO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQ3RCO0tBQ0Y7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFRO0lBQ2hDLE1BQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztJQUN2QixLQUFLLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRTtRQUNyQixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUNyQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzFCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDMUI7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3BDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDekI7U0FDRjtLQUNGO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydCBkZWVwIG9iamVjdCB0byBhIGZsYXQgb2JqZWN0IHdpdGggZG90c1xuICpcbiAqIHsgZm9vOiB7IGJhcjogJ2JheicgfX0gLT4geyAnZm9vLmJhcic6ICdiYXonIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW48VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4+KG9iamVjdDogVCwgcGF0aDogc3RyaW5nIHwgbnVsbCA9IG51bGwsIHNlcGFyYXRvciA9ICcuJyk6IFQge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KS5yZWR1Y2UoKGFjYzogVCwga2V5OiBzdHJpbmcpOiBUID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgIGNvbnN0IG5ld1BhdGggPSBbcGF0aCwga2V5XS5maWx0ZXIoQm9vbGVhbikuam9pbihzZXBhcmF0b3IpO1xuICAgIGNvbnN0IGlzT2JqZWN0ID0gW3R5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcsIHZhbHVlICE9PSBudWxsLCAhKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCldLmV2ZXJ5KEJvb2xlYW4pO1xuICAgIHJldHVybiBpc09iamVjdCA/IHtcbiAgICAgIC4uLmFjYyxcbiAgICAgIC4uLmZsYXR0ZW4odmFsdWUsIG5ld1BhdGgsIHNlcGFyYXRvcilcbiAgICB9IDoge1xuICAgICAgLi4uYWNjLFxuICAgICAgW25ld1BhdGhdOiB2YWx1ZVxuICAgIH07XG4gIH0sICh7fSBhcyBUKSk7XG59XG5cbi8qKlxuICogRmxhdHRlbiBhIG5lc3RlZCBNb25nb0RCIHF1ZXJ5IG9iamVjdCBpbnRvIGEgZmxhdCBvYmplY3Qgd2l0aCBkb3Qtc2VwYXJhdGVkIGtleXMuXG4gKiAkIGtleXMgYXJlIG5vdCBmbGF0dGVuZWQgYW5kIGFyZSBsZWZ0IGFzIGlzLlxuICpcbiAqIHsgZm9vOiB7IGJhcjogeyAkZ3Q6IDUgfX19IC0+IHsgJ2Zvby5iYXInOiB7ICckZ3QnOiA1IH19XG4gKiB7IGZvbzogeydiYXIuaWQnOiB7ICRlbGVtTWF0Y2g6IHsgJ2Jhei5pZCc6IHsgJGluOiBbJ2FiYycsICdiY2QnXSB9fX19fSAtPiB7ICdmb28uYmFyLmlkJzogeyAnJGVsZW1NYXRjaCc6IHsgJ2Jhei5pZCc6IHsgJyRpbic6IFsnYWJjJywgJ2JjZCddIH19fX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW5Nb25nb1F1ZXJ5KG9iajogYW55LCBfY3VycmVudD86IGFueSwgX3JlczogYW55ID0ge30pOiB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZztcbn0ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgIGNvbnN0IG5ld0tleSA9IF9jdXJyZW50ID8gX2N1cnJlbnQgKyAnLicgKyBrZXkgOiBrZXk7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmICFPYmplY3Qua2V5cyh2YWx1ZSkuZmluZChpdGVtID0+IGl0ZW0uc3RhcnRzV2l0aCgnJCcpKSkge1xuICAgICAgZmxhdHRlbk1vbmdvUXVlcnkodmFsdWUsIG5ld0tleSwgX3Jlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9yZXNbbmV3S2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX3Jlcztcbn1cblxuLyoqXG4gKiBVbmZsYXR0ZW4gYSBmbGF0IG9iamVjdCB3aXRoIGRvdC1zZXBhcmF0ZWQga2V5cyBiYWNrIGludG8gYSBuZXN0ZWQgb2JqZWN0LlxuICpcbiAqIHsgJ2Zvby5iYXInOiAnYmF6JyB9IC0+IHsgZm9vOiB7IGJhcjogJ2JheicgfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVuZmxhdHRlbihvYmo6IGFueSk6IGFueSB7XG4gIGNvbnN0IHJlc3VsdDogYW55ID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgbGV0IGN1cnJlbnQgPSByZXN1bHQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgaWYgKGkgPT09IHBhcnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY3VycmVudFtwYXJ0XSA9IG9ialtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudFtwYXJ0XSA9IGN1cnJlbnRbcGFydF0gfHwge307XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50W3BhcnRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSJdfQ==
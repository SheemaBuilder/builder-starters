import { isBrowser } from '../functions/is-browser';
import { isFromTrustedHost } from '../functions/is-from-trusted-host';
import { setupBrowserForEditing } from '../scripts/init-editing';
import { logger } from './logger';
export const createEditorListener = ({ model, trustedHosts, callbacks }) => {
    return (event) => {
        if (!isFromTrustedHost(trustedHosts, event)) {
            return;
        }
        const { data } = event;
        if (data) {
            switch (data.type) {
                case 'builder.configureSdk':
                    {
                        callbacks.configureSdk(data.data);
                        break;
                    }
                case 'builder.triggerAnimation':
                    {
                        callbacks.animation(data.data);
                        break;
                    }
                case 'builder.contentUpdate':
                    {
                        const messageContent = data.data;
                        const key = messageContent.key || messageContent.alias || messageContent.entry || messageContent.modelName;
                        const contentData = messageContent.data;
                        if (key === model) {
                            callbacks.contentUpdate(contentData);
                        }
                        break;
                    }
            }
        }
    };
};
/**
 * Subscribes to the Builder editor and listens to `content` updates of a certain `model`.
 * Sends the updated `content` to the `callback` function.
 */
export const subscribeToEditor = ({ model, apiKey, callback, trustedHosts }) => {
    if (!isBrowser) {
        logger.warn('`subscribeToEditor` only works in the browser. It currently seems to be running on the server.');
        return () => { };
    }
    setupBrowserForEditing({
        modelName: model,
        apiKey
    });
    const listener = createEditorListener({
        callbacks: {
            contentUpdate: callback,
            animation: () => { },
            configureSdk: () => { }
        },
        model,
        trustedHosts
    });
    window.addEventListener('message', listener);
    return () => {
        window.removeEventListener('message', listener);
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vic2NyaWJlLXRvLWVkaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oZWxwZXJzL3N1YnNjcmliZS10by1lZGl0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBR2pFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFRbEMsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxFQUNuQyxLQUFLLEVBQ0wsWUFBWSxFQUNaLFNBQVMsRUFDTyxFQUFFLEVBQUU7SUFDcEIsT0FBTyxDQUFDLEtBQXdCLEVBQVEsRUFBRTtRQUN4QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzNDLE9BQU87U0FDUjtRQUNELE1BQU0sRUFDSixJQUFJLEVBQ0wsR0FBRyxLQUFLLENBQUM7UUFDVixJQUFJLElBQUksRUFBRTtZQUNSLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDakIsS0FBSyxzQkFBc0I7b0JBQ3pCO3dCQUNFLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNsQyxNQUFNO3FCQUNQO2dCQUNILEtBQUssMEJBQTBCO29CQUM3Qjt3QkFDRSxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDL0IsTUFBTTtxQkFDUDtnQkFDSCxLQUFLLHVCQUF1QjtvQkFDMUI7d0JBQ0UsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzt3QkFDakMsTUFBTSxHQUFHLEdBQUcsY0FBYyxDQUFDLEdBQUcsSUFBSSxjQUFjLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxLQUFLLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQzt3QkFDM0csTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQzt3QkFDeEMsSUFBSSxHQUFHLEtBQUssS0FBSyxFQUFFOzRCQUNqQixTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO3lCQUN0Qzt3QkFDRCxNQUFNO3FCQUNQO2FBQ0o7U0FDRjtJQUNILENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQXlCRjs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBc0IsQ0FBQyxFQUNuRCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFFBQVEsRUFDUixZQUFZLEVBQ2IsRUFBRSxFQUFFO0lBQ0gsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0dBQWdHLENBQUMsQ0FBQztRQUM5RyxPQUFPLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztLQUNqQjtJQUNELHNCQUFzQixDQUFDO1FBQ3JCLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLE1BQU07S0FDUCxDQUFDLENBQUM7SUFDSCxNQUFNLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQztRQUNwQyxTQUFTLEVBQUU7WUFDVCxhQUFhLEVBQUUsUUFBUTtZQUN2QixTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztZQUNuQixZQUFZLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztTQUN2QjtRQUNELEtBQUs7UUFDTCxZQUFZO0tBQ2IsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3QyxPQUFPLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDb250ZW50UHJvcHMgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRlbnQvY29udGVudC50eXBlcyc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi9mdW5jdGlvbnMvaXMtYnJvd3Nlcic7XG5pbXBvcnQgeyBpc0Zyb21UcnVzdGVkSG9zdCB9IGZyb20gJy4uL2Z1bmN0aW9ucy9pcy1mcm9tLXRydXN0ZWQtaG9zdCc7XG5pbXBvcnQgeyBzZXR1cEJyb3dzZXJGb3JFZGl0aW5nIH0gZnJvbSAnLi4vc2NyaXB0cy9pbml0LWVkaXRpbmcnO1xuaW1wb3J0IHR5cGUgeyBCdWlsZGVyQW5pbWF0aW9uIH0gZnJvbSAnLi4vdHlwZXMvYnVpbGRlci1ibG9jayc7XG5pbXBvcnQgdHlwZSB7IEJ1aWxkZXJDb250ZW50IH0gZnJvbSAnLi4vdHlwZXMvYnVpbGRlci1jb250ZW50JztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbnR5cGUgQ29udGVudExpc3RlbmVyID0gUmVxdWlyZWQ8UGljazxDb250ZW50UHJvcHMsICdtb2RlbCcgfCAndHJ1c3RlZEhvc3RzJz4+ICYge1xuICBjYWxsYmFja3M6IHtcbiAgICBjb250ZW50VXBkYXRlOiAodXBkYXRlZENvbnRlbnQ6IEJ1aWxkZXJDb250ZW50KSA9PiB2b2lkO1xuICAgIGFuaW1hdGlvbjogKHVwZGF0ZWRDb250ZW50OiBCdWlsZGVyQW5pbWF0aW9uKSA9PiB2b2lkO1xuICAgIGNvbmZpZ3VyZVNkazogKHVwZGF0ZWRDb250ZW50OiBhbnkpID0+IHZvaWQ7XG4gIH07XG59O1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUVkaXRvckxpc3RlbmVyID0gKHtcbiAgbW9kZWwsXG4gIHRydXN0ZWRIb3N0cyxcbiAgY2FsbGJhY2tzXG59OiBDb250ZW50TGlzdGVuZXIpID0+IHtcbiAgcmV0dXJuIChldmVudDogTWVzc2FnZUV2ZW50PGFueT4pOiB2b2lkID0+IHtcbiAgICBpZiAoIWlzRnJvbVRydXN0ZWRIb3N0KHRydXN0ZWRIb3N0cywgZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGRhdGFcbiAgICB9ID0gZXZlbnQ7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2J1aWxkZXIuY29uZmlndXJlU2RrJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjYWxsYmFja3MuY29uZmlndXJlU2RrKGRhdGEuZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2J1aWxkZXIudHJpZ2dlckFuaW1hdGlvbic6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY2FsbGJhY2tzLmFuaW1hdGlvbihkYXRhLmRhdGEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICdidWlsZGVyLmNvbnRlbnRVcGRhdGUnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VDb250ZW50ID0gZGF0YS5kYXRhO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gbWVzc2FnZUNvbnRlbnQua2V5IHx8IG1lc3NhZ2VDb250ZW50LmFsaWFzIHx8IG1lc3NhZ2VDb250ZW50LmVudHJ5IHx8IG1lc3NhZ2VDb250ZW50Lm1vZGVsTmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnREYXRhID0gbWVzc2FnZUNvbnRlbnQuZGF0YTtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IG1vZGVsKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrcy5jb250ZW50VXBkYXRlKGNvbnRlbnREYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudHlwZSBTdWJzY3JpYmVUb0VkaXRvciA9ICh7XG4gIG1vZGVsLFxuICBhcGlLZXksXG4gIGNhbGxiYWNrLFxuICB0cnVzdGVkSG9zdHNcbn06IHtcbiAgLyoqXG4gICAqIFRoZSBCdWlsZGVyIGBtb2RlbGAgdG8gc3Vic2NyaWJlIHRvXG4gICAqL1xuICBtb2RlbDogc3RyaW5nO1xuICAvKipcbiAgICogQnVpbGRlciBBUEkgS2V5IHRvIHVzZSBmb3IgdGhlIGVkaXRvci5cbiAgICovXG4gIGFwaUtleTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgY29udGVudCBpcyB1cGRhdGVkLlxuICAgKi9cbiAgY2FsbGJhY2s6ICh1cGRhdGVkQ29udGVudDogQnVpbGRlckNvbnRlbnQpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBMaXN0IG9mIGhvc3RzIHRvIGFsbG93IGVkaXRpbmcgY29udGVudCBmcm9tLlxuICAgKi9cbiAgdHJ1c3RlZEhvc3RzPzogc3RyaW5nW10gfCB1bmRlZmluZWQ7XG59KSA9PiAoKSA9PiB2b2lkO1xuXG4vKipcbiAqIFN1YnNjcmliZXMgdG8gdGhlIEJ1aWxkZXIgZWRpdG9yIGFuZCBsaXN0ZW5zIHRvIGBjb250ZW50YCB1cGRhdGVzIG9mIGEgY2VydGFpbiBgbW9kZWxgLlxuICogU2VuZHMgdGhlIHVwZGF0ZWQgYGNvbnRlbnRgIHRvIHRoZSBgY2FsbGJhY2tgIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgY29uc3Qgc3Vic2NyaWJlVG9FZGl0b3I6IFN1YnNjcmliZVRvRWRpdG9yID0gKHtcbiAgbW9kZWwsXG4gIGFwaUtleSxcbiAgY2FsbGJhY2ssXG4gIHRydXN0ZWRIb3N0c1xufSkgPT4ge1xuICBpZiAoIWlzQnJvd3Nlcikge1xuICAgIGxvZ2dlci53YXJuKCdgc3Vic2NyaWJlVG9FZGl0b3JgIG9ubHkgd29ya3MgaW4gdGhlIGJyb3dzZXIuIEl0IGN1cnJlbnRseSBzZWVtcyB0byBiZSBydW5uaW5nIG9uIHRoZSBzZXJ2ZXIuJyk7XG4gICAgcmV0dXJuICgpID0+IHt9O1xuICB9XG4gIHNldHVwQnJvd3NlckZvckVkaXRpbmcoe1xuICAgIG1vZGVsTmFtZTogbW9kZWwsXG4gICAgYXBpS2V5XG4gIH0pO1xuICBjb25zdCBsaXN0ZW5lciA9IGNyZWF0ZUVkaXRvckxpc3RlbmVyKHtcbiAgICBjYWxsYmFja3M6IHtcbiAgICAgIGNvbnRlbnRVcGRhdGU6IGNhbGxiYWNrLFxuICAgICAgYW5pbWF0aW9uOiAoKSA9PiB7fSxcbiAgICAgIGNvbmZpZ3VyZVNkazogKCkgPT4ge31cbiAgICB9LFxuICAgIG1vZGVsLFxuICAgIHRydXN0ZWRIb3N0c1xuICB9KTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lcik7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lcik7XG4gIH07XG59Il19
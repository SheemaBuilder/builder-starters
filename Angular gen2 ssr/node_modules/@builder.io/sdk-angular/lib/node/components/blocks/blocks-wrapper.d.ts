import { ElementRef, ViewContainerRef, TemplateRef, SimpleChanges } from "@angular/core";
import type { BuilderBlock } from "../../types/builder-block";
import * as i0 from "@angular/core";
export type BlocksWrapperProps = {
    blocks: BuilderBlock[] | undefined;
    parent: string | undefined;
    path: string | undefined;
    styleProp: Record<string, any> | undefined;
    /**
     * The element that wraps each list of blocks. Defaults to a `div` element ('ScrollView' in React Native).
     */
    BlocksWrapper: any;
    /**
     * Additonal props to pass to `blocksWrapper`. Defaults to `{}`.
     */
    BlocksWrapperProps: any;
    children?: any;
    classNameProp?: string;
};
export default class BlocksWrapper {
    private vcRef;
    blocks: BlocksWrapperProps["blocks"];
    classNameProp: BlocksWrapperProps["classNameProp"];
    path: BlocksWrapperProps["path"];
    parent: BlocksWrapperProps["parent"];
    styleProp: BlocksWrapperProps["styleProp"];
    BlocksWrapperProps: BlocksWrapperProps["BlocksWrapperProps"];
    BlocksWrapper: BlocksWrapperProps["BlocksWrapper"];
    blocksWrapperRef: ElementRef;
    blockswrapperTemplateRef: TemplateRef<any>;
    myContent?: any[][];
    get className(): string;
    get dataPath(): string;
    onClick(): void;
    onMouseEnter(): void;
    mergedInputs_2eim3t: any;
    constructor(vcRef: ViewContainerRef);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BlocksWrapper, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BlocksWrapper, "blocks-wrapper", never, { "blocks": { "alias": "blocks"; "required": false; }; "classNameProp": { "alias": "classNameProp"; "required": false; }; "path": { "alias": "path"; "required": false; }; "parent": { "alias": "parent"; "required": false; }; "styleProp": { "alias": "styleProp"; "required": false; }; "BlocksWrapperProps": { "alias": "BlocksWrapperProps"; "required": false; }; "BlocksWrapper": { "alias": "BlocksWrapper"; "required": false; }; }, {}, never, ["*"], true, never>;
}

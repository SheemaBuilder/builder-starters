import { ViewContainerRef, TemplateRef, SimpleChanges } from "@angular/core";
import type { ComponentProps } from "./component-ref.helpers";
import * as i0 from "@angular/core";
export default class ComponentRef {
    private vcRef;
    componentOptions: ComponentProps["componentOptions"];
    builderBlock: ComponentProps["builderBlock"];
    context: ComponentProps["context"];
    componentRef: ComponentProps["componentRef"];
    linkComponent: ComponentProps["linkComponent"];
    includeBlockProps: ComponentProps["includeBlockProps"];
    isInteractive: ComponentProps["isInteractive"];
    blockChildren: ComponentProps["blockChildren"];
    registeredComponents: ComponentProps["registeredComponents"];
    wrapperTemplateRef: TemplateRef<any>;
    myContent?: any[][];
    Wrapper: any;
    node_0_state_Wrapper: any;
    mergedInputs_v6przu: any;
    trackByChild0(_: any, child: any): any;
    constructor(vcRef: ViewContainerRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ComponentRef, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ComponentRef, "component-ref", never, { "componentOptions": { "alias": "componentOptions"; "required": false; }; "builderBlock": { "alias": "builderBlock"; "required": false; }; "context": { "alias": "context"; "required": false; }; "componentRef": { "alias": "componentRef"; "required": false; }; "linkComponent": { "alias": "linkComponent"; "required": false; }; "includeBlockProps": { "alias": "includeBlockProps"; "required": false; }; "isInteractive": { "alias": "isInteractive"; "required": false; }; "blockChildren": { "alias": "blockChildren"; "required": false; }; "registeredComponents": { "alias": "registeredComponents"; "required": false; }; }, {}, never, never, true, never>;
}

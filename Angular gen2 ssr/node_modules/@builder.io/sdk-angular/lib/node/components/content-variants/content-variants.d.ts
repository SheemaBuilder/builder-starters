import { SimpleChanges } from "@angular/core";
import type { ContentVariantsPrps } from "./content-variants.types";
import * as i0 from "@angular/core";
type VariantsProviderProps = ContentVariantsPrps & {
    /**
     * For internal use only. Do not provide this prop.
     */
    isNestedRender?: boolean;
};
export default class ContentVariants {
    TARGET: import("../../types/targets").Target;
    getVariants: (content: import("@builder.io/sdk-angular").BuilderContent) => {
        testVariationId: string;
        id: string;
        data?: {
            [key: string]: any;
            title?: string;
            blocks?: import("@builder.io/sdk-angular").BuilderBlock[];
            inputs?: import("../../types/input").Input[];
            state?: {
                [key: string]: any;
            };
            jsCode?: string;
            tsCode?: string;
            httpRequests?: {
                [key: string]: string;
            };
        };
        name?: string;
        testRatio?: number;
        meta?: {
            [key: string]: any;
            breakpoints?: import("../../types/builder-content").Breakpoints;
        };
    }[];
    canTrack: VariantsProviderProps["canTrack"];
    content: VariantsProviderProps["content"];
    isNestedRender: VariantsProviderProps["isNestedRender"];
    nonce: VariantsProviderProps["nonce"];
    apiHost: VariantsProviderProps["apiHost"];
    model: VariantsProviderProps["model"];
    data: VariantsProviderProps["data"];
    context: VariantsProviderProps["context"];
    apiKey: VariantsProviderProps["apiKey"];
    apiVersion: VariantsProviderProps["apiVersion"];
    customComponents: VariantsProviderProps["customComponents"];
    linkComponent: VariantsProviderProps["linkComponent"];
    locale: VariantsProviderProps["locale"];
    enrich: VariantsProviderProps["enrich"];
    blocksWrapper: VariantsProviderProps["blocksWrapper"];
    blocksWrapperProps: VariantsProviderProps["blocksWrapperProps"];
    contentWrapper: VariantsProviderProps["contentWrapper"];
    contentWrapperProps: VariantsProviderProps["contentWrapperProps"];
    trustedHosts: VariantsProviderProps["trustedHosts"];
    shouldRenderVariants: any;
    get updateCookieAndStylesScriptStr(): string;
    get hideVariantsStyleString(): string;
    get defaultContent(): import("@builder.io/sdk-angular").BuilderContent;
    node_0_InlinedScript: any;
    trackByVariant0(_: any, variant: any): any;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContentVariants, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContentVariants, "builder-content, content-variants", never, { "canTrack": { "alias": "canTrack"; "required": false; }; "content": { "alias": "content"; "required": false; }; "isNestedRender": { "alias": "isNestedRender"; "required": false; }; "nonce": { "alias": "nonce"; "required": false; }; "apiHost": { "alias": "apiHost"; "required": false; }; "model": { "alias": "model"; "required": false; }; "data": { "alias": "data"; "required": false; }; "context": { "alias": "context"; "required": false; }; "apiKey": { "alias": "apiKey"; "required": false; }; "apiVersion": { "alias": "apiVersion"; "required": false; }; "customComponents": { "alias": "customComponents"; "required": false; }; "linkComponent": { "alias": "linkComponent"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "enrich": { "alias": "enrich"; "required": false; }; "blocksWrapper": { "alias": "blocksWrapper"; "required": false; }; "blocksWrapperProps": { "alias": "blocksWrapperProps"; "required": false; }; "contentWrapper": { "alias": "contentWrapper"; "required": false; }; "contentWrapperProps": { "alias": "contentWrapperProps"; "required": false; }; "trustedHosts": { "alias": "trustedHosts"; "required": false; }; }, {}, never, never, true, never>;
}
export {};

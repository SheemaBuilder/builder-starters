import { ElementRef, ViewContainerRef, TemplateRef, SimpleChanges } from "@angular/core";
import builderContext from "../../../context/builder.context";
import type { BuilderContextInterface } from "../../../context/types";
import type { BuilderContent } from "../../../types/builder-content";
import type { Dictionary } from "../../../types/typescript";
import type { ContentProps } from "../content.types";
import * as i0 from "@angular/core";
type BuilderEditorProps = Omit<ContentProps, "customComponents" | "apiVersion" | "isSsrAbTest" | "blocksWrapper" | "blocksWrapperProps" | "linkComponent"> & {
    builderContextSignal: BuilderContextInterface;
    setBuilderContextSignal?: (signal: any) => any;
    children?: any;
};
export default class EnableEditor {
    private vcRef;
    builderContext: typeof builderContext;
    isNestedRender: BuilderEditorProps["isNestedRender"];
    locale: BuilderEditorProps["locale"];
    enrich: BuilderEditorProps["enrich"];
    trustedHosts: BuilderEditorProps["trustedHosts"];
    model: BuilderEditorProps["model"];
    apiKey: BuilderEditorProps["apiKey"];
    builderContextSignal: BuilderEditorProps["builderContextSignal"];
    canTrack: BuilderEditorProps["canTrack"];
    apiHost: BuilderEditorProps["apiHost"];
    content: BuilderEditorProps["content"];
    context: BuilderEditorProps["context"];
    data: BuilderEditorProps["data"];
    showContent: BuilderEditorProps["showContent"];
    contentWrapper: BuilderEditorProps["contentWrapper"];
    contentWrapperProps: BuilderEditorProps["contentWrapperProps"];
    elementRef: ElementRef;
    contentwrapperTemplateRef: TemplateRef<any>;
    myContent?: any[][];
    mergeNewRootState(newData: Dictionary<any>): void;
    mergeNewContent(newContent: BuilderContent): void;
    get showContentProps(): {
        hidden?: undefined;
        "aria-hidden"?: undefined;
    } | {
        hidden: boolean;
        "aria-hidden": boolean;
    };
    ContentWrapper: any;
    processMessage(event: MessageEvent): void;
    httpReqsData: {};
    httpReqsPending: {};
    clicked: boolean;
    onClick(event: any): void;
    runHttpRequests(): void;
    emitStateUpdate(): void;
    node_0_Show: any;
    node_2_state_ContentWrapper: any;
    node_3_state_ContentWrapper: any;
    mergedInputs_ekawrq: any;
    constructor(vcRef: ViewContainerRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EnableEditor, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EnableEditor, "enable-editor", never, { "isNestedRender": { "alias": "isNestedRender"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "enrich": { "alias": "enrich"; "required": false; }; "trustedHosts": { "alias": "trustedHosts"; "required": false; }; "model": { "alias": "model"; "required": false; }; "apiKey": { "alias": "apiKey"; "required": false; }; "builderContextSignal": { "alias": "builderContextSignal"; "required": false; }; "canTrack": { "alias": "canTrack"; "required": false; }; "apiHost": { "alias": "apiHost"; "required": false; }; "content": { "alias": "content"; "required": false; }; "context": { "alias": "context"; "required": false; }; "data": { "alias": "data"; "required": false; }; "showContent": { "alias": "showContent"; "required": false; }; "contentWrapper": { "alias": "contentWrapper"; "required": false; }; "contentWrapperProps": { "alias": "contentWrapperProps"; "required": false; }; }, {}, never, ["*"], true, never>;
}
export {};

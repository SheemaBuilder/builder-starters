import { ElementRef, Renderer2, SimpleChanges } from "@angular/core";
import type { BuilderBlock } from "../../../types/builder-block";
import type { BuilderComponentsProp, BuilderDataProps, BuilderLinkComponentProp } from "../../../types/builder-props";
import type { Dictionary } from "../../../types/typescript";
import * as i0 from "@angular/core";
/**
 * This import is used by the Svelte SDK. Do not remove.
 */
export type FormProps = BuilderDataProps & BuilderComponentsProp & BuilderLinkComponentProp & {
    attributes?: any;
    name?: string;
    action?: string;
    validate?: boolean;
    method?: string;
    sendSubmissionsTo?: string;
    sendSubmissionsToEmail?: string;
    sendWithJs?: boolean;
    contentType?: string;
    customHeaders?: {
        [key: string]: string;
    };
    successUrl?: string;
    previewState?: FormState;
    successMessage?: BuilderBlock[];
    errorMessage?: BuilderBlock[];
    sendingMessage?: BuilderBlock[];
    resetFormOnSubmit?: boolean;
    errorMessagePath?: string;
    children?: any;
};
/**
 * This import is used by the Svelte SDK. Do not remove.
 */
export type FormState = "unsubmitted" | "sending" | "success" | "error";
export default class FormComponent {
    private renderer;
    builderContext: FormProps["builderContext"];
    previewState: FormProps["previewState"];
    sendWithJs: FormProps["sendWithJs"];
    sendSubmissionsTo: FormProps["sendSubmissionsTo"];
    action: FormProps["action"];
    customHeaders: FormProps["customHeaders"];
    contentType: FormProps["contentType"];
    sendSubmissionsToEmail: FormProps["sendSubmissionsToEmail"];
    name: FormProps["name"];
    method: FormProps["method"];
    errorMessagePath: FormProps["errorMessagePath"];
    resetFormOnSubmit: FormProps["resetFormOnSubmit"];
    successUrl: FormProps["successUrl"];
    validate: FormProps["validate"];
    attributes: FormProps["attributes"];
    errorMessage: FormProps["errorMessage"];
    sendingMessage: FormProps["sendingMessage"];
    successMessage: FormProps["successMessage"];
    formRef: ElementRef;
    elRef0: ElementRef;
    _listenerFns: Map<string, () => void>;
    formState: string;
    responseData: any;
    formErrorMessage: string;
    mergeNewRootState(newData: Dictionary<any>): void;
    submissionState(): string;
    onSubmit(event: any): void;
    node_1_Show: any;
    node_2_Show: any;
    node_3_Show: any;
    node_4_div: any;
    node_5_Show: any;
    elRef0_state_0: any;
    setAttributes(el: HTMLElement, value: any, changes?: any): void;
    elRef0_state_1: any;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FormComponent, "form-component", never, { "builderContext": { "alias": "builderContext"; "required": false; }; "previewState": { "alias": "previewState"; "required": false; }; "sendWithJs": { "alias": "sendWithJs"; "required": false; }; "sendSubmissionsTo": { "alias": "sendSubmissionsTo"; "required": false; }; "action": { "alias": "action"; "required": false; }; "customHeaders": { "alias": "customHeaders"; "required": false; }; "contentType": { "alias": "contentType"; "required": false; }; "sendSubmissionsToEmail": { "alias": "sendSubmissionsToEmail"; "required": false; }; "name": { "alias": "name"; "required": false; }; "method": { "alias": "method"; "required": false; }; "errorMessagePath": { "alias": "errorMessagePath"; "required": false; }; "resetFormOnSubmit": { "alias": "resetFormOnSubmit"; "required": false; }; "successUrl": { "alias": "successUrl"; "required": false; }; "validate": { "alias": "validate"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "errorMessage": { "alias": "errorMessage"; "required": false; }; "sendingMessage": { "alias": "sendingMessage"; "required": false; }; "successMessage": { "alias": "successMessage"; "required": false; }; }, {}, never, ["*"], true, never>;
}

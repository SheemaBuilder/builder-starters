import { ElementRef, Renderer2, SimpleChanges } from "@angular/core";
import type { PersonalizationContainerProps } from "./personalization-container.types";
import * as i0 from "@angular/core";
export default class PersonalizationContainer {
    private renderer;
    builderContext: PersonalizationContainerProps["builderContext"];
    attributes: PersonalizationContainerProps["attributes"];
    builderBlock: PersonalizationContainerProps["builderBlock"];
    variants: PersonalizationContainerProps["variants"];
    previewingIndex: PersonalizationContainerProps["previewingIndex"];
    rootRef: ElementRef;
    elRef0: ElementRef;
    _listenerFns: Map<string, () => void>;
    userAttributes: any;
    scriptStr: any;
    unsubscribers: any[];
    shouldRenderVariants: any;
    isHydrated: boolean;
    get filteredVariants(): {
        blocks: import("@builder.io/sdk-angular").BuilderBlock[];
        query: import("./helpers").Query[];
        startDate?: string;
        endDate?: string;
    }[];
    get blocksToRender(): {
        blocks: import("@builder.io/sdk-angular").BuilderBlock[];
        path: string;
    };
    get hideVariantsStyleString(): string;
    node_0_div: any;
    node_1_template: (variant: any, index: any) => string;
    node_2_Blocks: (variant: any, index: any) => string;
    node_3_InlinedStyles: any;
    node_4_InlinedScript: any;
    setAttributes(el: HTMLElement, value: any, changes?: any): void;
    trackByVariant0(index: any, variant: any): any;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PersonalizationContainer, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PersonalizationContainer, "personalization-container", never, { "builderContext": { "alias": "builderContext"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "builderBlock": { "alias": "builderBlock"; "required": false; }; "variants": { "alias": "variants"; "required": false; }; "previewingIndex": { "alias": "previewingIndex"; "required": false; }; }, {}, never, never, true, never>;
}

import { isBrowser } from '../functions/is-browser';
import { getCookieSync, setCookie } from './cookie';
export const USER_ATTRIBUTES_COOKIE_NAME = 'builder.userAttributes';
export function createUserAttributesService() {
    let canTrack = true;
    const subscribers = new Set();
    return {
        setUserAttributes(newAttrs) {
            if (!isBrowser()) {
                return;
            }
            const userAttributes = {
                ...this.getUserAttributes(),
                ...newAttrs
            };
            setCookie({
                name: USER_ATTRIBUTES_COOKIE_NAME,
                value: JSON.stringify(userAttributes),
                canTrack
            });
            subscribers.forEach(callback => callback(userAttributes));
        },
        getUserAttributes() {
            if (!isBrowser()) {
                return {};
            }
            return JSON.parse(getCookieSync({
                name: USER_ATTRIBUTES_COOKIE_NAME,
                canTrack
            }) || '{}');
        },
        subscribeOnUserAttributesChange(callback) {
            subscribers.add(callback);
            return () => {
                subscribers.delete(callback);
            };
        },
        setCanTrack(value) {
            canTrack = value;
        }
    };
}
export const userAttributesService = createUserAttributesService();
export const setClientUserAttributes = (attributes) => {
    userAttributesService.setUserAttributes(attributes);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1hdHRyaWJ1dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2hlbHBlcnMvdXNlci1hdHRyaWJ1dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUlwRCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyx3QkFBd0IsQ0FBQztBQUNwRSxNQUFNLFVBQVUsMkJBQTJCO0lBQ3pDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQztJQUNwQixNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBbUMsQ0FBQztJQUMvRCxPQUFPO1FBQ0wsaUJBQWlCLENBQUMsUUFBd0I7WUFDeEMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUNoQixPQUFPO2FBQ1I7WUFDRCxNQUFNLGNBQWMsR0FBbUI7Z0JBQ3JDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFO2dCQUMzQixHQUFHLFFBQVE7YUFDWixDQUFDO1lBQ0YsU0FBUyxDQUFDO2dCQUNSLElBQUksRUFBRSwyQkFBMkI7Z0JBQ2pDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztnQkFDckMsUUFBUTthQUNULENBQUMsQ0FBQztZQUNILFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUM1RCxDQUFDO1FBQ0QsaUJBQWlCO1lBQ2YsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUNoQixPQUFPLEVBQUUsQ0FBQzthQUNYO1lBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztnQkFDOUIsSUFBSSxFQUFFLDJCQUEyQjtnQkFDakMsUUFBUTthQUNULENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUNkLENBQUM7UUFDRCwrQkFBK0IsQ0FBQyxRQUF5QztZQUN2RSxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFCLE9BQU8sR0FBRyxFQUFFO2dCQUNWLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDL0IsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUNELFdBQVcsQ0FBQyxLQUFjO1lBQ3hCLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDbkIsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBQ0QsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsMkJBQTJCLEVBQUUsQ0FBQztBQUNuRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLFVBQTBCLEVBQUUsRUFBRTtJQUNwRSxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN0RCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi9mdW5jdGlvbnMvaXMtYnJvd3Nlcic7XG5pbXBvcnQgeyBnZXRDb29raWVTeW5jLCBzZXRDb29raWUgfSBmcm9tICcuL2Nvb2tpZSc7XG5leHBvcnQgaW50ZXJmYWNlIFVzZXJBdHRyaWJ1dGVzIHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuZXhwb3J0IGNvbnN0IFVTRVJfQVRUUklCVVRFU19DT09LSUVfTkFNRSA9ICdidWlsZGVyLnVzZXJBdHRyaWJ1dGVzJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVc2VyQXR0cmlidXRlc1NlcnZpY2UoKSB7XG4gIGxldCBjYW5UcmFjayA9IHRydWU7XG4gIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDwoYXR0cnM6IFVzZXJBdHRyaWJ1dGVzKSA9PiB2b2lkPigpO1xuICByZXR1cm4ge1xuICAgIHNldFVzZXJBdHRyaWJ1dGVzKG5ld0F0dHJzOiBVc2VyQXR0cmlidXRlcykge1xuICAgICAgaWYgKCFpc0Jyb3dzZXIoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB1c2VyQXR0cmlidXRlczogVXNlckF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIC4uLnRoaXMuZ2V0VXNlckF0dHJpYnV0ZXMoKSxcbiAgICAgICAgLi4ubmV3QXR0cnNcbiAgICAgIH07XG4gICAgICBzZXRDb29raWUoe1xuICAgICAgICBuYW1lOiBVU0VSX0FUVFJJQlVURVNfQ09PS0lFX05BTUUsXG4gICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeSh1c2VyQXR0cmlidXRlcyksXG4gICAgICAgIGNhblRyYWNrXG4gICAgICB9KTtcbiAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2sodXNlckF0dHJpYnV0ZXMpKTtcbiAgICB9LFxuICAgIGdldFVzZXJBdHRyaWJ1dGVzKCkge1xuICAgICAgaWYgKCFpc0Jyb3dzZXIoKSkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShnZXRDb29raWVTeW5jKHtcbiAgICAgICAgbmFtZTogVVNFUl9BVFRSSUJVVEVTX0NPT0tJRV9OQU1FLFxuICAgICAgICBjYW5UcmFja1xuICAgICAgfSkgfHwgJ3t9Jyk7XG4gICAgfSxcbiAgICBzdWJzY3JpYmVPblVzZXJBdHRyaWJ1dGVzQ2hhbmdlKGNhbGxiYWNrOiAoYXR0cnM6IFVzZXJBdHRyaWJ1dGVzKSA9PiB2b2lkKSB7XG4gICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXRDYW5UcmFjayh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgY2FuVHJhY2sgPSB2YWx1ZTtcbiAgICB9XG4gIH07XG59XG5leHBvcnQgY29uc3QgdXNlckF0dHJpYnV0ZXNTZXJ2aWNlID0gY3JlYXRlVXNlckF0dHJpYnV0ZXNTZXJ2aWNlKCk7XG5leHBvcnQgY29uc3Qgc2V0Q2xpZW50VXNlckF0dHJpYnV0ZXMgPSAoYXR0cmlidXRlczogVXNlckF0dHJpYnV0ZXMpID0+IHtcbiAgdXNlckF0dHJpYnV0ZXNTZXJ2aWNlLnNldFVzZXJBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xufSJdfQ==
import { TARGET } from '../constants/target';
import { checkIsDefined } from '../helpers/nullable';
import { getCookie, getCookieSync, setCookie } from './cookie';
import { logger } from './logger';
const BUILDER_STORE_PREFIX = 'builder.tests';
const getContentTestKey = (id) => `${BUILDER_STORE_PREFIX}.${id}`;
const getContentVariationCookie = ({ contentId }) => getCookie({
    name: getContentTestKey(contentId),
    canTrack: true
});
const getContentVariationCookieSync = ({ contentId }) => getCookieSync({
    name: getContentTestKey(contentId),
    canTrack: true
});
const setContentVariationCookie = ({ contentId, value }) => setCookie({
    name: getContentTestKey(contentId),
    value,
    canTrack: true
});
const checkIsBuilderContentWithVariations = (item) => checkIsDefined(item.id) && checkIsDefined(item.variations) && Object.keys(item.variations).length > 0;
/**
 * Randomly assign a variation to a user
 */
const getRandomVariationId = ({ id, variations }) => {
    let n = 0;
    const random = Math.random();
    // loop over variations test ratios, incrementing a counter,
    // until we find the variation that this user should be assigned to
    for (const id in variations) {
        const testRatio = variations[id]?.testRatio;
        n += testRatio;
        if (random < n) {
            return id;
        }
    }
    // the variations array does not include the default variation.
    // if we arrive here, then it means that the random number fits in the default variation bucket.
    return id;
};
const getAndSetVariantId = (args) => {
    // if variation not found in storage, assign a random variation to this user
    const randomVariationId = getRandomVariationId(args);
    // store variation in cookies/storage
    setContentVariationCookie({
        contentId: args.id,
        value: randomVariationId
    }).catch(err => {
        logger.error('could not store A/B test variation: ', err);
    });
    return randomVariationId;
};
const getTestFields = ({ item, testGroupId }) => {
    const variationValue = item.variations[testGroupId];
    if (testGroupId === item.id ||
        // handle edge-case where `testGroupId` points to non-existing variation
        !variationValue) {
        return {
            testVariationId: item.id,
            testVariationName: 'Default'
        };
    }
    else {
        return {
            data: variationValue.data,
            testVariationId: variationValue.id,
            testVariationName: variationValue.name || (variationValue.id === item.id ? 'Default' : '')
        };
    }
};
export const handleABTestingSync = ({ item, canTrack }) => {
    /**
     * We cannot SSR in React-Native.
     */
    if (TARGET === 'reactNative')
        return item;
    if (!canTrack) {
        return item;
    }
    if (!item) {
        return undefined;
    }
    if (!checkIsBuilderContentWithVariations(item)) {
        return item;
    }
    const testGroupId = getContentVariationCookieSync({
        contentId: item.id
    }) || getAndSetVariantId({
        variations: item.variations,
        id: item.id
    });
    const variationValue = getTestFields({
        item,
        testGroupId
    });
    return {
        ...item,
        ...variationValue
    };
};
export const handleABTesting = async ({ item, canTrack }) => {
    if (!canTrack) {
        return item;
    }
    if (!checkIsBuilderContentWithVariations(item)) {
        return item;
    }
    const cookieValue = await getContentVariationCookie({
        contentId: item.id
    });
    const testGroupId = cookieValue || getAndSetVariantId({
        variations: item.variations,
        id: item.id
    });
    const variationValue = getTestFields({
        item,
        testGroupId
    });
    return {
        ...item,
        ...variationValue
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWItdGVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaGVscGVycy9hYi10ZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBSXJELE9BQU8sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMvRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE1BQU0sb0JBQW9CLEdBQUcsZUFBZSxDQUFDO0FBQzdDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxFQUFVLEVBQUUsRUFBRSxDQUFDLEdBQUcsb0JBQW9CLElBQUksRUFBRSxFQUFFLENBQUM7QUFDMUUsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLEVBQ2pDLFNBQVMsRUFHVixFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUM7SUFDZCxJQUFJLEVBQUUsaUJBQWlCLENBQUMsU0FBUyxDQUFDO0lBQ2xDLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQyxDQUFDO0FBQ0gsTUFBTSw2QkFBNkIsR0FBRyxDQUFDLEVBQ3JDLFNBQVMsRUFHVixFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDbEIsSUFBSSxFQUFFLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztJQUNsQyxRQUFRLEVBQUUsSUFBSTtDQUNmLENBQUMsQ0FBQztBQUNILE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxFQUNqQyxTQUFTLEVBQ1QsS0FBSyxFQUlOLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUNkLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7SUFDbEMsS0FBSztJQUNMLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxtQ0FBbUMsR0FBRyxDQUFDLElBQW9C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UUFDdkIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1FBQzNCLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtLQUNaLENBQUMsQ0FBQztJQUNILE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJO1FBQ0osV0FBVztLQUNaLENBQUMsQ0FBQztJQUNILE9BQU87UUFDTCxHQUFHLElBQUk7UUFDUCxHQUFHLGNBQWM7S0FDbEIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxLQUFLLEVBQUUsRUFDcEMsSUFBSSxFQUNKLFFBQVEsRUFHRSxFQUEyQixFQUFFO0lBQ3ZDLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDYixPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzlDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxNQUFNLFdBQVcsR0FBRyxNQUFNLHlCQUF5QixDQUFDO1FBQ2xELFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRTtLQUNuQixDQUFDLENBQUM7SUFDSCxNQUFNLFdBQVcsR0FBRyxXQUFXLElBQUksa0JBQWtCLENBQUM7UUFDcEQsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1FBQzNCLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtLQUNaLENBQUMsQ0FBQztJQUNILE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJO1FBQ0osV0FBVztLQUNaLENBQUMsQ0FBQztJQUNILE9BQU87UUFDTCxHQUFHLElBQUk7UUFDUCxHQUFHLGNBQWM7S0FDbEIsQ0FBQztBQUNKLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRBUkdFVCB9IGZyb20gJy4uL2NvbnN0YW50cy90YXJnZXQnO1xuaW1wb3J0IHsgY2hlY2tJc0RlZmluZWQgfSBmcm9tICcuLi9oZWxwZXJzL251bGxhYmxlJztcbmltcG9ydCB0eXBlIHsgQnVpbGRlckNvbnRlbnQsIEJ1aWxkZXJDb250ZW50VmFyaWF0aW9uIH0gZnJvbSAnLi4vdHlwZXMvYnVpbGRlci1jb250ZW50JztcbmltcG9ydCB0eXBlIHsgQ2FuVHJhY2sgfSBmcm9tICcuLi90eXBlcy9jYW4tdHJhY2snO1xuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSwgT3ZlcndyaXRlIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXNjcmlwdCc7XG5pbXBvcnQgeyBnZXRDb29raWUsIGdldENvb2tpZVN5bmMsIHNldENvb2tpZSB9IGZyb20gJy4vY29va2llJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmNvbnN0IEJVSUxERVJfU1RPUkVfUFJFRklYID0gJ2J1aWxkZXIudGVzdHMnO1xuY29uc3QgZ2V0Q29udGVudFRlc3RLZXkgPSAoaWQ6IHN0cmluZykgPT4gYCR7QlVJTERFUl9TVE9SRV9QUkVGSVh9LiR7aWR9YDtcbmNvbnN0IGdldENvbnRlbnRWYXJpYXRpb25Db29raWUgPSAoe1xuICBjb250ZW50SWRcbn06IHtcbiAgY29udGVudElkOiBzdHJpbmc7XG59KSA9PiBnZXRDb29raWUoe1xuICBuYW1lOiBnZXRDb250ZW50VGVzdEtleShjb250ZW50SWQpLFxuICBjYW5UcmFjazogdHJ1ZVxufSk7XG5jb25zdCBnZXRDb250ZW50VmFyaWF0aW9uQ29va2llU3luYyA9ICh7XG4gIGNvbnRlbnRJZFxufToge1xuICBjb250ZW50SWQ6IHN0cmluZztcbn0pID0+IGdldENvb2tpZVN5bmMoe1xuICBuYW1lOiBnZXRDb250ZW50VGVzdEtleShjb250ZW50SWQpLFxuICBjYW5UcmFjazogdHJ1ZVxufSk7XG5jb25zdCBzZXRDb250ZW50VmFyaWF0aW9uQ29va2llID0gKHtcbiAgY29udGVudElkLFxuICB2YWx1ZVxufToge1xuICBjb250ZW50SWQ6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn0pID0+IHNldENvb2tpZSh7XG4gIG5hbWU6IGdldENvbnRlbnRUZXN0S2V5KGNvbnRlbnRJZCksXG4gIHZhbHVlLFxuICBjYW5UcmFjazogdHJ1ZVxufSk7XG50eXBlIEJ1aWxkZXJDb250ZW50V2l0aFZhcmlhdGlvbnMgPSBPdmVyd3JpdGU8QnVpbGRlckNvbnRlbnQsIFJlcXVpcmVkPFBpY2s8QnVpbGRlckNvbnRlbnQsICd2YXJpYXRpb25zJyB8ICdpZCc+Pj47XG5jb25zdCBjaGVja0lzQnVpbGRlckNvbnRlbnRXaXRoVmFyaWF0aW9ucyA9IChpdGVtOiBCdWlsZGVyQ29udGVudCk6IGl0ZW0gaXMgQnVpbGRlckNvbnRlbnRXaXRoVmFyaWF0aW9ucyA9PiBjaGVja0lzRGVmaW5lZChpdGVtLmlkKSAmJiBjaGVja0lzRGVmaW5lZChpdGVtLnZhcmlhdGlvbnMpICYmIE9iamVjdC5rZXlzKGl0ZW0udmFyaWF0aW9ucykubGVuZ3RoID4gMDtcblxuLyoqXG4gKiBSYW5kb21seSBhc3NpZ24gYSB2YXJpYXRpb24gdG8gYSB1c2VyXG4gKi9cbmNvbnN0IGdldFJhbmRvbVZhcmlhdGlvbklkID0gKHtcbiAgaWQsXG4gIHZhcmlhdGlvbnNcbn06IEJ1aWxkZXJDb250ZW50V2l0aFZhcmlhdGlvbnMpID0+IHtcbiAgbGV0IG4gPSAwO1xuICBjb25zdCByYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xuXG4gIC8vIGxvb3Agb3ZlciB2YXJpYXRpb25zIHRlc3QgcmF0aW9zLCBpbmNyZW1lbnRpbmcgYSBjb3VudGVyLFxuICAvLyB1bnRpbCB3ZSBmaW5kIHRoZSB2YXJpYXRpb24gdGhhdCB0aGlzIHVzZXIgc2hvdWxkIGJlIGFzc2lnbmVkIHRvXG4gIGZvciAoY29uc3QgaWQgaW4gdmFyaWF0aW9ucykge1xuICAgIGNvbnN0IHRlc3RSYXRpbyA9IHZhcmlhdGlvbnNbaWRdPy50ZXN0UmF0aW87XG4gICAgbiArPSB0ZXN0UmF0aW8hO1xuICAgIGlmIChyYW5kb20gPCBuKSB7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfVxuICB9XG5cbiAgLy8gdGhlIHZhcmlhdGlvbnMgYXJyYXkgZG9lcyBub3QgaW5jbHVkZSB0aGUgZGVmYXVsdCB2YXJpYXRpb24uXG4gIC8vIGlmIHdlIGFycml2ZSBoZXJlLCB0aGVuIGl0IG1lYW5zIHRoYXQgdGhlIHJhbmRvbSBudW1iZXIgZml0cyBpbiB0aGUgZGVmYXVsdCB2YXJpYXRpb24gYnVja2V0LlxuICByZXR1cm4gaWQ7XG59O1xuY29uc3QgZ2V0QW5kU2V0VmFyaWFudElkID0gKGFyZ3M6IEJ1aWxkZXJDb250ZW50V2l0aFZhcmlhdGlvbnMpID0+IHtcbiAgLy8gaWYgdmFyaWF0aW9uIG5vdCBmb3VuZCBpbiBzdG9yYWdlLCBhc3NpZ24gYSByYW5kb20gdmFyaWF0aW9uIHRvIHRoaXMgdXNlclxuICBjb25zdCByYW5kb21WYXJpYXRpb25JZCA9IGdldFJhbmRvbVZhcmlhdGlvbklkKGFyZ3MpO1xuXG4gIC8vIHN0b3JlIHZhcmlhdGlvbiBpbiBjb29raWVzL3N0b3JhZ2VcbiAgc2V0Q29udGVudFZhcmlhdGlvbkNvb2tpZSh7XG4gICAgY29udGVudElkOiBhcmdzLmlkLFxuICAgIHZhbHVlOiByYW5kb21WYXJpYXRpb25JZFxuICB9KS5jYXRjaChlcnIgPT4ge1xuICAgIGxvZ2dlci5lcnJvcignY291bGQgbm90IHN0b3JlIEEvQiB0ZXN0IHZhcmlhdGlvbjogJywgZXJyKTtcbiAgfSk7XG4gIHJldHVybiByYW5kb21WYXJpYXRpb25JZDtcbn07XG50eXBlIFRlc3RGaWVsZHMgPSB7XG4gIGRhdGE/OiBCdWlsZGVyQ29udGVudFZhcmlhdGlvblsnZGF0YSddO1xuICB0ZXN0VmFyaWF0aW9uSWQ/OiBzdHJpbmc7XG4gIHRlc3RWYXJpYXRpb25OYW1lOiBzdHJpbmc7XG59O1xuY29uc3QgZ2V0VGVzdEZpZWxkcyA9ICh7XG4gIGl0ZW0sXG4gIHRlc3RHcm91cElkXG59OiB7XG4gIGl0ZW06IEJ1aWxkZXJDb250ZW50V2l0aFZhcmlhdGlvbnM7XG4gIHRlc3RHcm91cElkOiBzdHJpbmc7XG59KTogVGVzdEZpZWxkcyA9PiB7XG4gIGNvbnN0IHZhcmlhdGlvblZhbHVlID0gaXRlbS52YXJpYXRpb25zW3Rlc3RHcm91cElkXTtcbiAgaWYgKHRlc3RHcm91cElkID09PSBpdGVtLmlkIHx8XG4gIC8vIGhhbmRsZSBlZGdlLWNhc2Ugd2hlcmUgYHRlc3RHcm91cElkYCBwb2ludHMgdG8gbm9uLWV4aXN0aW5nIHZhcmlhdGlvblxuICAhdmFyaWF0aW9uVmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGVzdFZhcmlhdGlvbklkOiBpdGVtLmlkLFxuICAgICAgdGVzdFZhcmlhdGlvbk5hbWU6ICdEZWZhdWx0J1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHZhcmlhdGlvblZhbHVlLmRhdGEsXG4gICAgICB0ZXN0VmFyaWF0aW9uSWQ6IHZhcmlhdGlvblZhbHVlLmlkLFxuICAgICAgdGVzdFZhcmlhdGlvbk5hbWU6IHZhcmlhdGlvblZhbHVlLm5hbWUgfHwgKHZhcmlhdGlvblZhbHVlLmlkID09PSBpdGVtLmlkID8gJ0RlZmF1bHQnIDogJycpXG4gICAgfTtcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBoYW5kbGVBQlRlc3RpbmdTeW5jID0gKHtcbiAgaXRlbSxcbiAgY2FuVHJhY2tcbn06IHtcbiAgaXRlbTogTnVsbGFibGU8QnVpbGRlckNvbnRlbnQ+O1xufSAmIENhblRyYWNrKTogTnVsbGFibGU8QnVpbGRlckNvbnRlbnQ+ID0+IHtcbiAgLyoqXG4gICAqIFdlIGNhbm5vdCBTU1IgaW4gUmVhY3QtTmF0aXZlLlxuICAgKi9cbiAgaWYgKFRBUkdFVCA9PT0gJ3JlYWN0TmF0aXZlJykgcmV0dXJuIGl0ZW07XG4gIGlmICghY2FuVHJhY2spIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmICghY2hlY2tJc0J1aWxkZXJDb250ZW50V2l0aFZhcmlhdGlvbnMoaXRlbSkpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuICBjb25zdCB0ZXN0R3JvdXBJZCA9IGdldENvbnRlbnRWYXJpYXRpb25Db29raWVTeW5jKHtcbiAgICBjb250ZW50SWQ6IGl0ZW0uaWRcbiAgfSkgfHwgZ2V0QW5kU2V0VmFyaWFudElkKHtcbiAgICB2YXJpYXRpb25zOiBpdGVtLnZhcmlhdGlvbnMsXG4gICAgaWQ6IGl0ZW0uaWRcbiAgfSk7XG4gIGNvbnN0IHZhcmlhdGlvblZhbHVlID0gZ2V0VGVzdEZpZWxkcyh7XG4gICAgaXRlbSxcbiAgICB0ZXN0R3JvdXBJZFxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICAuLi5pdGVtLFxuICAgIC4uLnZhcmlhdGlvblZhbHVlXG4gIH07XG59O1xuZXhwb3J0IGNvbnN0IGhhbmRsZUFCVGVzdGluZyA9IGFzeW5jICh7XG4gIGl0ZW0sXG4gIGNhblRyYWNrXG59OiB7XG4gIGl0ZW06IEJ1aWxkZXJDb250ZW50O1xufSAmIENhblRyYWNrKTogUHJvbWlzZTxCdWlsZGVyQ29udGVudD4gPT4ge1xuICBpZiAoIWNhblRyYWNrKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cbiAgaWYgKCFjaGVja0lzQnVpbGRlckNvbnRlbnRXaXRoVmFyaWF0aW9ucyhpdGVtKSkge1xuICAgIHJldHVybiBpdGVtO1xuICB9XG4gIGNvbnN0IGNvb2tpZVZhbHVlID0gYXdhaXQgZ2V0Q29udGVudFZhcmlhdGlvbkNvb2tpZSh7XG4gICAgY29udGVudElkOiBpdGVtLmlkXG4gIH0pO1xuICBjb25zdCB0ZXN0R3JvdXBJZCA9IGNvb2tpZVZhbHVlIHx8IGdldEFuZFNldFZhcmlhbnRJZCh7XG4gICAgdmFyaWF0aW9uczogaXRlbS52YXJpYXRpb25zLFxuICAgIGlkOiBpdGVtLmlkXG4gIH0pO1xuICBjb25zdCB2YXJpYXRpb25WYWx1ZSA9IGdldFRlc3RGaWVsZHMoe1xuICAgIGl0ZW0sXG4gICAgdGVzdEdyb3VwSWRcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgLi4uaXRlbSxcbiAgICAuLi52YXJpYXRpb25WYWx1ZVxuICB9O1xufSJdfQ==
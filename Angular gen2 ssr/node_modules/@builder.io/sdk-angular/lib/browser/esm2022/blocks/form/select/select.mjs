import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import { isEditing } from "../../../functions/is-editing";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class SelectComponent {
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    trackByOption0(index, option) {
        return `${option.name}-${index}`;
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.node_0_select = null;
        this.elRef0_state_0 = null;
    }
    ngOnInit() {
        this.node_0_select =
            isEditing() && this.defaultValue ? this.defaultValue : "default-key";
        this.elRef0_state_0 = {};
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0);
        this.setAttributes(this.elRef0?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_select =
                isEditing() && this.defaultValue ? this.defaultValue : "default-key";
            this.elRef0_state_0 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0, changes["elRef0_state_0"]?.currentValue);
            this.setAttributes(this.elRef0?.nativeElement, this.attributes, changes["attributes"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SelectComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SelectComponent, isStandalone: true, selector: "select-component", inputs: { defaultValue: "defaultValue", attributes: "attributes", value: "value", name: "name", required: "required", options: "options" }, viewQueries: [{ propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <select
      [attr.value]="value"
      [attr.defaultValue]="defaultValue"
      [attr.name]="name"
      [attr.required]="required"
      #elRef0
    >
      <ng-container
        *ngFor="let option of options; index as index; trackBy: trackByOption0"
      >
        <option [attr.value]="option.value">
          {{option.name || option.value}}
        </option>
      </ng-container>
    </select>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SelectComponent, decorators: [{
            type: Component,
            args: [{ selector: "select-component", template: `
    <select
      [attr.value]="value"
      [attr.defaultValue]="defaultValue"
      [attr.name]="name"
      [attr.required]="required"
      #elRef0
    >
      <ng-container
        *ngFor="let option of options; index as index; trackBy: trackByOption0"
      >
        <option [attr.value]="option.value">
          {{option.name || option.value}}
        </option>
      </ng-container>
    </select>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { defaultValue: [{
                type: Input
            }], attributes: [{
                type: Input
            }], value: [{
                type: Input
            }], name: [{
                type: Input
            }], required: [{
                type: Input
            }], options: [{
                type: Input
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,
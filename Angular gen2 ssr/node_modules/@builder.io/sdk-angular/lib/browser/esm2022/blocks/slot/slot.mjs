import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import Blocks from "../../components/blocks/blocks";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class BuilderSlot {
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.node_0_div = null;
        this.node_1_div = null;
        this.node_2_Blocks = null;
        this.node_3_Blocks = null;
        this.node_4_Blocks = null;
    }
    ngOnInit() {
        this.node_0_div = {
            pointerEvents: "auto",
        };
        this.node_1_div = {
            ...(!this.builderContext.context?.symbolId && {
                "builder-slot": this.name,
            }),
        };
        this.node_2_Blocks = this.builderContext.context?.symbolId;
        this.node_3_Blocks = `symbol.data.${this.name}`;
        this.node_4_Blocks = this.builderContext.rootState?.[this.name];
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.node_1_div);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_div = {
                pointerEvents: "auto",
            };
            this.node_1_div = {
                ...(!this.builderContext.context?.symbolId && {
                    "builder-slot": this.name,
                }),
            };
            this.node_2_Blocks = this.builderContext.context?.symbolId;
            this.node_3_Blocks = `symbol.data.${this.name}`;
            this.node_4_Blocks = this.builderContext.rootState?.[this.name];
            this.setAttributes(this.elRef0?.nativeElement, this.node_1_div, changes["node_1_div"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderSlot, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BuilderSlot, isStandalone: true, selector: "builder-slot", inputs: { builderContext: "builderContext", name: "name", builderComponents: "builderComponents" }, viewQueries: [{ propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div [ngStyle]="node_0_div" #elRef0>
      <blocks
        [parent]="node_2_Blocks"
        [path]="node_3_Blocks"
        [context]="builderContext"
        [registeredComponents]="builderComponents"
        [blocks]="node_4_Blocks"
      ></blocks>
    </div>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: Blocks, selector: "blocks", inputs: ["blocks", "parent", "path", "styleProp", "className", "context", "linkComponent", "registeredComponents"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderSlot, decorators: [{
            type: Component,
            args: [{ selector: "builder-slot", template: `
    <div [ngStyle]="node_0_div" #elRef0>
      <blocks
        [parent]="node_2_Blocks"
        [path]="node_3_Blocks"
        [context]="builderContext"
        [registeredComponents]="builderComponents"
        [blocks]="node_4_Blocks"
      ></blocks>
    </div>
  `, standalone: true, imports: [CommonModule, Blocks], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { builderContext: [{
                type: Input
            }], name: [{
                type: Input
            }], builderComponents: [{
                type: Input
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,
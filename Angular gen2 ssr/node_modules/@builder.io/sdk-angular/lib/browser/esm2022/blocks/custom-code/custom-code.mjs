import { ChangeDetectionStrategy } from "@angular/core";
import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export default class CustomCode {
    ngOnInit() {
        this.node_0_div =
            "builder-custom-code" + (this.replaceNodes ? " replace-nodes" : "");
        if (typeof window !== "undefined") {
            // TODO: Move this function to standalone one in '@builder.io/utils'
            if (!this.elementRef.nativeElement?.getElementsByTagName ||
                typeof window === "undefined") {
                return;
            }
            const scripts = this.elementRef.nativeElement.getElementsByTagName("script");
            for (let i = 0; i < scripts.length; i++) {
                const script = scripts[i];
                if (script.src) {
                    if (this.scriptsInserted.includes(script.src)) {
                        continue;
                    }
                    this.scriptsInserted.push(script.src);
                    const newScript = document.createElement("script");
                    newScript.async = true;
                    newScript.src = script.src;
                    document.head.appendChild(newScript);
                }
                else if (!script.type ||
                    [
                        "text/javascript",
                        "application/javascript",
                        "application/ecmascript",
                    ].includes(script.type)) {
                    if (this.scriptsRun.includes(script.innerText)) {
                        continue;
                    }
                    try {
                        this.scriptsRun.push(script.innerText);
                        new Function(script.innerText)();
                    }
                    catch (error) {
                        console.warn("`CustomCode`: Error running script:", error);
                    }
                }
            }
        }
    }
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.scriptsInserted = [];
        this.scriptsRun = [];
        this.node_0_div = null;
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_div =
                "builder-custom-code" + (this.replaceNodes ? " replace-nodes" : "");
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CustomCode, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CustomCode, isStandalone: true, selector: "custom-code", inputs: { replaceNodes: "replaceNodes", code: "code" }, viewQueries: [{ propertyName: "elementRef", first: true, predicate: ["elementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div #elementRef [class]="node_0_div" [innerHTML]="sanitizer.bypassSecurityTrustHtml(code)"></div>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CustomCode, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: "custom-code", template: `
    <div #elementRef [class]="node_0_div" [innerHTML]="sanitizer.bypassSecurityTrustHtml(code)"></div>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { replaceNodes: [{
                type: Input
            }], code: [{
                type: Input
            }], elementRef: [{
                type: ViewChild,
                args: ["elementRef"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWNvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmxvY2tzL2N1c3RvbS1jb2RlL2N1c3RvbS1jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFFVCxLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUF1Qi9DLE1BQU0sQ0FBQyxPQUFPLE9BQU8sVUFBVTtJQVU3QixRQUFRO1FBQ04sSUFBSSxDQUFDLFVBQVU7WUFDYixxQkFBcUIsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV0RSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxvRUFBb0U7WUFDcEUsSUFDRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLG9CQUFvQjtnQkFDcEQsT0FBTyxNQUFNLEtBQUssV0FBVyxFQUM3QjtnQkFDQSxPQUFPO2FBQ1I7WUFDRCxNQUFNLE9BQU8sR0FDWCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7b0JBQ2QsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQzdDLFNBQVM7cUJBQ1Y7b0JBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUN0QyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUNuRCxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztvQkFDdkIsU0FBUyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO29CQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDdEM7cUJBQU0sSUFDTCxDQUFDLE1BQU0sQ0FBQyxJQUFJO29CQUNaO3dCQUNFLGlCQUFpQjt3QkFDakIsd0JBQXdCO3dCQUN4Qix3QkFBd0I7cUJBQ3pCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFDdkI7b0JBQ0EsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7d0JBQzlDLFNBQVM7cUJBQ1Y7b0JBQ0QsSUFBSTt3QkFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQ3ZDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO3FCQUNsQztvQkFBQyxPQUFPLEtBQUssRUFBRTt3QkFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3FCQUM1RDtpQkFDRjthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsWUFBc0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQW5EN0Msb0JBQWUsR0FBRyxFQUFFLENBQUM7UUFDckIsZUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNoQixlQUFVLEdBQUcsSUFBSSxDQUFDO0lBaUQ4QixDQUFDO0lBQ25ELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsVUFBVTtnQkFDYixxQkFBcUIsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN2RTtJQUNILENBQUM7K0dBL0RrQixVQUFVO21HQUFWLFVBQVUsOFBBYm5COztHQUVULGtHQVNTLFlBQVk7OzRGQUVILFVBQVU7a0JBaEI5QixTQUFTO3NDQUNTLHVCQUF1QixDQUFDLE1BQU0sWUFDdkMsYUFBYSxZQUNYOztHQUVULGNBUVcsSUFBSSxXQUNQLENBQUMsWUFBWSxDQUFDO21HQUdkLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUVtQixVQUFVO3NCQUFsQyxTQUFTO3VCQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBWaWV3Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbUNvZGVQcm9wcyB7XG4gIGNvZGU6IHN0cmluZztcbiAgcmVwbGFjZU5vZGVzPzogYm9vbGVhbjtcbn1cblxuQENvbXBvbmVudCh7XG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuc2VsZWN0b3I6IFwiY3VzdG9tLWNvZGVcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2ICNlbGVtZW50UmVmIFtjbGFzc109XCJub2RlXzBfZGl2XCIgW2lubmVySFRNTF09XCJzYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoY29kZSlcIj48L2Rpdj5cbiAgYCxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgICAgOmhvc3Qge1xuICAgICAgICBkaXNwbGF5OiBjb250ZW50cztcbiAgICAgIH1cbiAgICBgLFxuICBdLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbn0pXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXN0b21Db2RlIHtcbiAgQElucHV0KCkgcmVwbGFjZU5vZGVzITogQ3VzdG9tQ29kZVByb3BzW1wicmVwbGFjZU5vZGVzXCJdO1xuICBASW5wdXQoKSBjb2RlITogQ3VzdG9tQ29kZVByb3BzW1wiY29kZVwiXTtcblxuICBAVmlld0NoaWxkKFwiZWxlbWVudFJlZlwiKSBlbGVtZW50UmVmITogRWxlbWVudFJlZjtcblxuICBzY3JpcHRzSW5zZXJ0ZWQgPSBbXTtcbiAgc2NyaXB0c1J1biA9IFtdO1xuICBub2RlXzBfZGl2ID0gbnVsbDtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm5vZGVfMF9kaXYgPVxuICAgICAgXCJidWlsZGVyLWN1c3RvbS1jb2RlXCIgKyAodGhpcy5yZXBsYWNlTm9kZXMgPyBcIiByZXBsYWNlLW5vZGVzXCIgOiBcIlwiKTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgZnVuY3Rpb24gdG8gc3RhbmRhbG9uZSBvbmUgaW4gJ0BidWlsZGVyLmlvL3V0aWxzJ1xuICAgICAgaWYgKFxuICAgICAgICAhdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ/LmdldEVsZW1lbnRzQnlUYWdOYW1lIHx8XG4gICAgICAgIHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCJcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBzY3JpcHRzID1cbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gc2NyaXB0c1tpXTtcbiAgICAgICAgaWYgKHNjcmlwdC5zcmMpIHtcbiAgICAgICAgICBpZiAodGhpcy5zY3JpcHRzSW5zZXJ0ZWQuaW5jbHVkZXMoc2NyaXB0LnNyYykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNjcmlwdHNJbnNlcnRlZC5wdXNoKHNjcmlwdC5zcmMpO1xuICAgICAgICAgIGNvbnN0IG5ld1NjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgbmV3U2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgICBuZXdTY3JpcHQuc3JjID0gc2NyaXB0LnNyYztcbiAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5ld1NjcmlwdCk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgIXNjcmlwdC50eXBlIHx8XG4gICAgICAgICAgW1xuICAgICAgICAgICAgXCJ0ZXh0L2phdmFzY3JpcHRcIixcbiAgICAgICAgICAgIFwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiLFxuICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0XCIsXG4gICAgICAgICAgXS5pbmNsdWRlcyhzY3JpcHQudHlwZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc2NyaXB0c1J1bi5pbmNsdWRlcyhzY3JpcHQuaW5uZXJUZXh0KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnNjcmlwdHNSdW4ucHVzaChzY3JpcHQuaW5uZXJUZXh0KTtcbiAgICAgICAgICAgIG5ldyBGdW5jdGlvbihzY3JpcHQuaW5uZXJUZXh0KSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJgQ3VzdG9tQ29kZWA6IEVycm9yIHJ1bm5pbmcgc2NyaXB0OlwiLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7fVxubmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLm5vZGVfMF9kaXYgPVxuICAgICAgICBcImJ1aWxkZXItY3VzdG9tLWNvZGVcIiArICh0aGlzLnJlcGxhY2VOb2RlcyA/IFwiIHJlcGxhY2Utbm9kZXNcIiA6IFwiXCIpO1xuICAgIH1cbiAgfVxufVxuIl19
import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import * as i0 from "@angular/core";
export default class BuilderTextarea {
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.elRef0_state_0 = null;
    }
    ngOnInit() {
        this.elRef0_state_0 = {};
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0);
        this.setAttributes(this.elRef0?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.elRef0_state_0 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0, changes["elRef0_state_0"]?.currentValue);
            this.setAttributes(this.elRef0?.nativeElement, this.attributes, changes["attributes"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderTextarea, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BuilderTextarea, isStandalone: true, selector: "builder-textarea", inputs: { attributes: "attributes", placeholder: "placeholder", name: "name", value: "value", defaultValue: "defaultValue", required: "required" }, viewQueries: [{ propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <textarea
      [attr.placeholder]="placeholder"
      [attr.name]="name"
      [attr.value]="value"
      [attr.defaultValue]="defaultValue"
      [attr.required]="required"
      #elRef0
    ></textarea>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BuilderTextarea, decorators: [{
            type: Component,
            args: [{ selector: "builder-textarea", template: `
    <textarea
      [attr.placeholder]="placeholder"
      [attr.name]="name"
      [attr.value]="value"
      [attr.defaultValue]="defaultValue"
      [attr.required]="required"
      #elRef0
    ></textarea>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { attributes: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], name: [{
                type: Input
            }], value: [{
                type: Input
            }], defaultValue: [{
                type: Input
            }], required: [{
                type: Input
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYmxvY2tzL2Zvcm0vdGV4dGFyZWEvdGV4dGFyZWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBR1QsS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUF3Qy9DLE1BQU0sQ0FBQyxPQUFPLE9BQU8sZUFBZTtJQWFsQyxhQUFhLENBQUMsRUFBZSxFQUFFLEtBQVUsRUFBRSxPQUFhO1FBQ3RELElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUCxPQUFPO1NBQ1I7UUFDRCxNQUFNLE1BQU0sR0FBRyxPQUFPLE9BQU8sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDbEMsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUUsRUFBRSxDQUFDO2lCQUMvQjtnQkFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDbkIsR0FBRyxFQUNILElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUNsQixFQUFFLEVBQ0YsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FDWixDQUNGLENBQUM7YUFDSDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUN0RTtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFlBQW9CLFFBQW1CO1FBQW5CLGFBQVEsR0FBUixRQUFRLENBQVc7UUEzQnZDLGlCQUFZLEdBQUcsSUFBSSxHQUFHLEVBQXNCLENBQUM7UUFFN0MsbUJBQWMsR0FBRyxJQUFJLENBQUM7SUF5Qm9CLENBQUM7SUFFM0MsUUFBUTtRQUNOLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsYUFBYSxDQUNoQixJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFDMUIsSUFBSSxDQUFDLGNBQWMsRUFDbkIsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsWUFBWSxDQUN4QyxDQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FDaEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQzFCLElBQUksQ0FBQyxVQUFVLEVBQ2YsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FDcEMsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxLQUFLLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDM0MsRUFBRSxFQUFFLENBQUM7U0FDTjtJQUNILENBQUM7K0dBcEVrQixlQUFlO21HQUFmLGVBQWUsdVZBcEJ4Qjs7Ozs7Ozs7O0dBU1Qsa0dBU1MsWUFBWTs7NEZBRUgsZUFBZTtrQkF0Qm5DLFNBQVM7K0JBQ0Usa0JBQWtCLFlBQ2xCOzs7Ozs7Ozs7R0FTVCxjQVFXLElBQUksV0FDUCxDQUFDLFlBQVksQ0FBQztnR0FHZCxVQUFVO3NCQUFsQixLQUFLO2dCQUNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBRWUsTUFBTTtzQkFBMUIsU0FBUzt1QkFBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBWaWV3Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMixcbiAgSW5wdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5cbi8qKlxuICogVGhpcyBpbXBvcnQgaXMgdXNlZCBieSB0aGUgU3ZlbHRlIFNESy4gRG8gbm90IHJlbW92ZS5cbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIFRleHRhcmVhUHJvcHMge1xuICBhdHRyaWJ1dGVzPzogYW55O1xuICBuYW1lPzogc3RyaW5nO1xuICB2YWx1ZT86IHN0cmluZztcbiAgZGVmYXVsdFZhbHVlPzogc3RyaW5nO1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xufVxuXG5pbXBvcnQgeyBmaWx0ZXJBdHRycyB9IGZyb20gXCIuLi8uLi9oZWxwZXJzXCI7XG5pbXBvcnQgeyBzZXRBdHRycyB9IGZyb20gXCIuLi8uLi9oZWxwZXJzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJidWlsZGVyLXRleHRhcmVhXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHRleHRhcmVhXG4gICAgICBbYXR0ci5wbGFjZWhvbGRlcl09XCJwbGFjZWhvbGRlclwiXG4gICAgICBbYXR0ci5uYW1lXT1cIm5hbWVcIlxuICAgICAgW2F0dHIudmFsdWVdPVwidmFsdWVcIlxuICAgICAgW2F0dHIuZGVmYXVsdFZhbHVlXT1cImRlZmF1bHRWYWx1ZVwiXG4gICAgICBbYXR0ci5yZXF1aXJlZF09XCJyZXF1aXJlZFwiXG4gICAgICAjZWxSZWYwXG4gICAgPjwvdGV4dGFyZWE+XG4gIGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogY29udGVudHM7XG4gICAgICB9XG4gICAgYCxcbiAgXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG59KVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVpbGRlclRleHRhcmVhIHtcbiAgQElucHV0KCkgYXR0cmlidXRlcyE6IFRleHRhcmVhUHJvcHNbXCJhdHRyaWJ1dGVzXCJdO1xuICBASW5wdXQoKSBwbGFjZWhvbGRlciE6IFRleHRhcmVhUHJvcHNbXCJwbGFjZWhvbGRlclwiXTtcbiAgQElucHV0KCkgbmFtZSE6IFRleHRhcmVhUHJvcHNbXCJuYW1lXCJdO1xuICBASW5wdXQoKSB2YWx1ZSE6IFRleHRhcmVhUHJvcHNbXCJ2YWx1ZVwiXTtcbiAgQElucHV0KCkgZGVmYXVsdFZhbHVlITogVGV4dGFyZWFQcm9wc1tcImRlZmF1bHRWYWx1ZVwiXTtcbiAgQElucHV0KCkgcmVxdWlyZWQhOiBUZXh0YXJlYVByb3BzW1wicmVxdWlyZWRcIl07XG5cbiAgQFZpZXdDaGlsZChcImVsUmVmMFwiKSBlbFJlZjAhOiBFbGVtZW50UmVmO1xuXG4gIF9saXN0ZW5lckZucyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPigpO1xuXG4gIGVsUmVmMF9zdGF0ZV8wID0gbnVsbDtcbiAgc2V0QXR0cmlidXRlcyhlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IHR5cGVvZiBjaGFuZ2VzID09PSBcInVuZGVmaW5lZFwiID8gdmFsdWUgOiBjaGFuZ2VzO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICBrZXkucmVwbGFjZShcIm9uXCIsIFwiXCIpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICB0YXJnZXRba2V5XVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXkudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0gPz8gXCJcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5lbFJlZjBfc3RhdGVfMCA9IHt9O1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLmVsUmVmMD8ubmF0aXZlRWxlbWVudCwgdGhpcy5lbFJlZjBfc3RhdGVfMCk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMuZWxSZWYwPy5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLmVsUmVmMF9zdGF0ZV8wID0ge307XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXMoXG4gICAgICAgIHRoaXMuZWxSZWYwPy5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0aGlzLmVsUmVmMF9zdGF0ZV8wLFxuICAgICAgICBjaGFuZ2VzW1wiZWxSZWYwX3N0YXRlXzBcIl0/LmN1cnJlbnRWYWx1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhcbiAgICAgICAgdGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyxcbiAgICAgICAgY2hhbmdlc1tcImF0dHJpYnV0ZXNcIl0/LmN1cnJlbnRWYWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGZuIG9mIHRoaXMuX2xpc3RlbmVyRm5zLnZhbHVlcygpKSB7XG4gICAgICBmbigpO1xuICAgIH1cbiAgfVxufVxuIl19
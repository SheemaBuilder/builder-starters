export const componentInfo = {
    name: 'Form:Form',
    // editableTags: ['builder-form-error']
    defaults: {
        responsiveStyles: {
            large: {
                marginTop: '15px',
                paddingBottom: '15px'
            }
        }
    },
    image: 'https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fef36d2a846134910b64b88e6d18c5ca5',
    inputs: [{
            name: 'sendSubmissionsTo',
            type: 'string',
            // TODO: save to builder data and user can download as csv
            // TODO: easy for mode too or computed add/remove fields form mode
            // so you can edit details and high level mode at same time...
            // Later - more integrations like mailchimp
            // /api/v1/form-submit?to=mailchimp
            enum: [{
                    label: 'Send to email',
                    value: 'email',
                    helperText: 'Send form submissions to the email address of your choosing'
                }, {
                    label: 'Custom',
                    value: 'custom',
                    helperText: 'Handle where the form requests go manually with a little code, e.g. to your own custom backend'
                }],
            defaultValue: 'email'
        }, {
            name: 'sendSubmissionsToEmail',
            type: 'string',
            required: true,
            // TODO: required: () => options.get("sendSubmissionsTo") === "email"
            defaultValue: 'your@email.com',
            showIf: 'options.get("sendSubmissionsTo") === "email"'
        }, {
            name: 'sendWithJs',
            type: 'boolean',
            helperText: 'Set to false to use basic html form action',
            defaultValue: true,
            showIf: 'options.get("sendSubmissionsTo") === "custom"'
        }, {
            name: 'name',
            type: 'string',
            defaultValue: 'My form'
            // advanced: true
        }, {
            name: 'action',
            type: 'string',
            helperText: 'URL to send the form data to',
            showIf: 'options.get("sendSubmissionsTo") === "custom"'
        }, {
            name: 'contentType',
            type: 'string',
            defaultValue: 'application/json',
            advanced: true,
            // TODO: do automatically if file input
            enum: ['application/json', 'multipart/form-data', 'application/x-www-form-urlencoded'],
            showIf: 'options.get("sendSubmissionsTo") === "custom" && options.get("sendWithJs") === true'
        }, {
            name: 'method',
            type: 'string',
            showIf: 'options.get("sendSubmissionsTo") === "custom"',
            defaultValue: 'POST',
            advanced: true
        }, {
            name: 'previewState',
            type: 'string',
            // TODO: persist: false flag
            enum: ['unsubmitted', 'sending', 'success', 'error'],
            defaultValue: 'unsubmitted',
            helperText: 'Choose a state to edit, e.g. choose "success" to show what users see on success and edit the message',
            showIf: 'options.get("sendSubmissionsTo") !== "zapier" && options.get("sendWithJs") === true'
        }, {
            name: 'successUrl',
            type: 'url',
            helperText: 'Optional URL to redirect the user to on form submission success',
            showIf: 'options.get("sendSubmissionsTo") !== "zapier" && options.get("sendWithJs") === true'
        }, {
            name: 'resetFormOnSubmit',
            type: 'boolean',
            showIf: "options.get('sendSubmissionsTo') === 'custom' && options.get('sendWithJs') === true",
            advanced: true
        }, {
            name: 'successMessage',
            type: 'uiBlocks',
            hideFromUI: true,
            defaultValue: [{
                    '@type': '@builder.io/sdk:Element',
                    responsiveStyles: {
                        large: {
                            marginTop: '10px'
                        }
                    },
                    component: {
                        name: 'Text',
                        options: {
                            text: '<span>Thanks!</span>'
                        }
                    }
                }]
        }, {
            name: 'validate',
            type: 'boolean',
            defaultValue: true,
            advanced: true
        }, {
            name: 'errorMessagePath',
            type: 'text',
            advanced: true,
            helperText: 'Path to where to get the error message from in a JSON response to display to the user, e.g. "error.message" for a response like { "error": { "message": "this username is taken" }}'
        }, {
            name: 'errorMessage',
            type: 'uiBlocks',
            hideFromUI: true,
            defaultValue: [{
                    '@type': '@builder.io/sdk:Element',
                    responsiveStyles: {
                        large: {
                            marginTop: '10px'
                        }
                    },
                    bindings: {
                        'component.options.text': 'state.formErrorMessage || block.component.options.text'
                    },
                    component: {
                        name: 'Text',
                        options: {
                            text: '<span>Form submission error :( Please check your answers and try again</span>'
                        }
                    }
                }]
        }, {
            name: 'sendingMessage',
            type: 'uiBlocks',
            hideFromUI: true,
            defaultValue: [{
                    '@type': '@builder.io/sdk:Element',
                    responsiveStyles: {
                        large: {
                            marginTop: '10px'
                        }
                    },
                    component: {
                        name: 'Text',
                        options: {
                            text: '<span>Sending...</span>'
                        }
                    }
                }]
        }, {
            name: 'customHeaders',
            type: 'map',
            valueType: {
                type: 'string'
            },
            advanced: true,
            showIf: 'options.get("sendSubmissionsTo") === "custom" && options.get("sendWithJs") === true'
        }],
    noWrap: true,
    canHaveChildren: true,
    defaultChildren: [{
            '@type': '@builder.io/sdk:Element',
            responsiveStyles: {
                large: {
                    marginTop: '10px'
                }
            },
            component: {
                name: 'Text',
                options: {
                    text: '<span>Enter your name</span>'
                }
            }
        }, {
            '@type': '@builder.io/sdk:Element',
            responsiveStyles: {
                large: {
                    marginTop: '10px'
                }
            },
            component: {
                name: 'Form:Input',
                options: {
                    name: 'name',
                    placeholder: 'Jane Doe'
                }
            }
        }, {
            '@type': '@builder.io/sdk:Element',
            responsiveStyles: {
                large: {
                    marginTop: '10px'
                }
            },
            component: {
                name: 'Text',
                options: {
                    text: '<span>Enter your email</span>'
                }
            }
        }, {
            '@type': '@builder.io/sdk:Element',
            responsiveStyles: {
                large: {
                    marginTop: '10px'
                }
            },
            component: {
                name: 'Form:Input',
                options: {
                    name: 'email',
                    placeholder: 'jane@doe.com'
                }
            }
        }, {
            '@type': '@builder.io/sdk:Element',
            responsiveStyles: {
                large: {
                    marginTop: '10px'
                }
            },
            component: {
                name: 'Form:SubmitButton',
                options: {
                    text: 'Submit'
                }
            }
        }],
    shouldReceiveBuilderProps: {
        builderBlock: true,
        builderContext: true,
        builderComponents: true,
        builderLinkComponent: true
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYmxvY2tzL2Zvcm0vZm9ybS9jb21wb25lbnQtaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQWtCO0lBQzFDLElBQUksRUFBRSxXQUFXO0lBQ2pCLHVDQUF1QztJQUN2QyxRQUFRLEVBQUU7UUFDUixnQkFBZ0IsRUFBRTtZQUNoQixLQUFLLEVBQUU7Z0JBQ0wsU0FBUyxFQUFFLE1BQU07Z0JBQ2pCLGFBQWEsRUFBRSxNQUFNO2FBQ3RCO1NBQ0Y7S0FDRjtJQUNELEtBQUssRUFBRSw4R0FBOEc7SUFDckgsTUFBTSxFQUFFLENBQUM7WUFDUCxJQUFJLEVBQUUsbUJBQW1CO1lBQ3pCLElBQUksRUFBRSxRQUFRO1lBQ2QsMERBQTBEO1lBQzFELGtFQUFrRTtZQUNsRSw4REFBOEQ7WUFDOUQsMkNBQTJDO1lBQzNDLG1DQUFtQztZQUNuQyxJQUFJLEVBQUUsQ0FBQztvQkFDTCxLQUFLLEVBQUUsZUFBZTtvQkFDdEIsS0FBSyxFQUFFLE9BQU87b0JBQ2QsVUFBVSxFQUFFLDZEQUE2RDtpQkFDMUUsRUFBRTtvQkFDRCxLQUFLLEVBQUUsUUFBUTtvQkFDZixLQUFLLEVBQUUsUUFBUTtvQkFDZixVQUFVLEVBQUUsZ0dBQWdHO2lCQUM3RyxDQUFDO1lBQ0YsWUFBWSxFQUFFLE9BQU87U0FDdEIsRUFBRTtZQUNELElBQUksRUFBRSx3QkFBd0I7WUFDOUIsSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUUsSUFBSTtZQUNkLHFFQUFxRTtZQUNyRSxZQUFZLEVBQUUsZ0JBQWdCO1lBQzlCLE1BQU0sRUFBRSw4Q0FBOEM7U0FDdkQsRUFBRTtZQUNELElBQUksRUFBRSxZQUFZO1lBQ2xCLElBQUksRUFBRSxTQUFTO1lBQ2YsVUFBVSxFQUFFLDRDQUE0QztZQUN4RCxZQUFZLEVBQUUsSUFBSTtZQUNs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LEVBQUUsTUFBTTtnQkFDWixPQUFPLEVBQUU7b0JBQ1AsSUFBSSxFQUFFLCtCQUErQjtpQkFDdEM7YUFDRjtTQUNGLEVBQUU7WUFDRCxPQUFPLEVBQUUseUJBQXlCO1lBQ2xDLGdCQUFnQixFQUFFO2dCQUNoQixLQUFLLEVBQUU7b0JBQ0wsU0FBUyxFQUFFLE1BQU07aUJBQ2xCO2FBQ0Y7WUFDRCxTQUFTLEVBQUU7Z0JBQ1QsSUFBSSxFQUFFLFlBQVk7Z0JBQ2xCLE9BQU8sRUFBRTtvQkFDUCxJQUFJLEVBQUUsT0FBTztvQkFDYixXQUFXLEVBQUUsY0FBYztpQkFDNUI7YUFDRjtTQUNGLEVBQUU7WUFDRCxPQUFPLEVBQUUseUJBQXlCO1lBQ2xDLGdCQUFnQixFQUFFO2dCQUNoQixLQUFLLEVBQUU7b0JBQ0wsU0FBUyxFQUFFLE1BQU07aUJBQ2xCO2FBQ0Y7WUFDRCxTQUFTLEVBQUU7Z0JBQ1QsSUFBSSxFQUFFLG1CQUFtQjtnQkFDekIsT0FBTyxFQUFFO29CQUNQLElBQUksRUFBRSxRQUFRO2lCQUNmO2FBQ0Y7U0FDRixDQUFDO0lBQ0YseUJBQXlCLEVBQUU7UUFDekIsWUFBWSxFQUFFLElBQUk7UUFDbEIsY0FBYyxFQUFFLElBQUk7UUFDcEIsaUJBQWlCLEVBQUUsSUFBSTtRQUN2QixvQkFBb0IsRUFBRSxJQUFJO0tBQzNCO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ29tcG9uZW50SW5mbyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2NvbXBvbmVudHMnO1xuZXhwb3J0IGNvbnN0IGNvbXBvbmVudEluZm86IENvbXBvbmVudEluZm8gPSB7XG4gIG5hbWU6ICdGb3JtOkZvcm0nLFxuICAvLyBlZGl0YWJsZVRhZ3M6IFsnYnVpbGRlci1mb3JtLWVycm9yJ11cbiAgZGVmYXVsdHM6IHtcbiAgICByZXNwb25zaXZlU3R5bGVzOiB7XG4gICAgICBsYXJnZToge1xuICAgICAgICBtYXJnaW5Ub3A6ICcxNXB4JyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogJzE1cHgnXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpbWFnZTogJ2h0dHBzOi8vY2RuLmJ1aWxkZXIuaW8vYXBpL3YxL2ltYWdlL2Fzc2V0cyUyRklzeFBLTW8yZ1BSUktlYWtVenRqMUQ2dXFlZDIlMkZlZjM2ZDJhODQ2MTM0OTEwYjY0Yjg4ZTZkMThjNWNhNScsXG4gIGlucHV0czogW3tcbiAgICBuYW1lOiAnc2VuZFN1Ym1pc3Npb25zVG8nLFxuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIC8vIFRPRE86IHNhdmUgdG8gYnVpbGRlciBkYXRhIGFuZCB1c2VyIGNhbiBkb3dubG9hZCBhcyBjc3ZcbiAgICAvLyBUT0RPOiBlYXN5IGZvciBtb2RlIHRvbyBvciBjb21wdXRlZCBhZGQvcmVtb3ZlIGZpZWxkcyBmb3JtIG1vZGVcbiAgICAvLyBzbyB5b3UgY2FuIGVkaXQgZGV0YWlscyBhbmQgaGlnaCBsZXZlbCBtb2RlIGF0IHNhbWUgdGltZS4uLlxuICAgIC8vIExhdGVyIC0gbW9yZSBpbnRlZ3JhdGlvbnMgbGlrZSBtYWlsY2hpbXBcbiAgICAvLyAvYXBpL3YxL2Zvcm0tc3VibWl0P3RvPW1haWxjaGltcFxuICAgIGVudW06IFt7XG4gICAgICBsYWJlbDogJ1NlbmQgdG8gZW1haWwnLFxuICAgICAgdmFsdWU6ICdlbWFpbCcsXG4gICAgICBoZWxwZXJUZXh0OiAnU2VuZCBmb3JtIHN1Ym1pc3Npb25zIHRvIHRoZSBlbWFpbCBhZGRyZXNzIG9mIHlvdXIgY2hvb3NpbmcnXG4gICAgfSwge1xuICAgICAgbGFiZWw6ICdDdXN0b20nLFxuICAgICAgdmFsdWU6ICdjdXN0b20nLFxuICAgICAgaGVscGVyVGV4dDogJ0hhbmRsZSB3aGVyZSB0aGUgZm9ybSByZXF1ZXN0cyBnbyBtYW51YWxseSB3aXRoIGEgbGl0dGxlIGNvZGUsIGUuZy4gdG8geW91ciBvd24gY3VzdG9tIGJhY2tlbmQnXG4gICAgfV0sXG4gICAgZGVmYXVsdFZhbHVlOiAnZW1haWwnXG4gIH0sIHtcbiAgICBuYW1lOiAnc2VuZFN1Ym1pc3Npb25zVG9FbWFpbCcsXG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgLy8gVE9ETzogcmVxdWlyZWQ6ICgpID0+IG9wdGlvbnMuZ2V0KFwic2VuZFN1Ym1pc3Npb25zVG9cIikgPT09IFwiZW1haWxcIlxuICAgIGRlZmF1bHRWYWx1ZTogJ3lvdXJAZW1haWwuY29tJyxcbiAgICBzaG93SWY6ICdvcHRpb25zLmdldChcInNlbmRTdWJtaXNzaW9uc1RvXCIpID09PSBcImVtYWlsXCInXG4gIH0sIHtcbiAgICBuYW1lOiAnc2VuZFdpdGhKcycsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgIGhlbHBlclRleHQ6ICdTZXQgdG8gZmFsc2UgdG8gdXNlIGJhc2ljIGh0bWwgZm9ybSBhY3Rpb24nLFxuICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICBzaG93SWY6ICdvcHRpb25zLmdldChcInNlbmRTdWJtaXNzaW9uc1RvXCIpID09PSBcImN1c3RvbVwiJ1xuICB9LCB7XG4gICAgbmFtZTogJ25hbWUnLFxuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGRlZmF1bHRWYWx1ZTogJ015IGZvcm0nXG4gICAgLy8gYWR2YW5jZWQ6IHRydWVcbiAgfSwge1xuICAgIG5hbWU6ICdhY3Rpb24nLFxuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGhlbHBlclRleHQ6ICdVUkwgdG8gc2VuZCB0aGUgZm9ybSBkYXRhIHRvJyxcbiAgICBzaG93SWY6ICdvcHRpb25zLmdldChcInNlbmRTdWJtaXNzaW9uc1RvXCIpID09PSBcImN1c3RvbVwiJ1xuICB9LCB7XG4gICAgbmFtZTogJ2NvbnRlbnRUeXBlJyxcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICBkZWZhdWx0VmFsdWU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICBhZHZhbmNlZDogdHJ1ZSxcbiAgICAvLyBUT0RPOiBkbyBhdXRvbWF0aWNhbGx5IGlmIGZpbGUgaW5wdXRcbiAgICBlbnVtOiBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXSxcbiAgICBzaG93SWY6ICdvcHRpb25zLmdldChcInNlbmRTdWJtaXNzaW9uc1RvXCIpID09PSBcImN1c3RvbVwiICYmIG9wdGlvbnMuZ2V0KFwic2VuZFdpdGhKc1wiKSA9PT0gdHJ1ZSdcbiAgfSwge1xuICAgIG5hbWU6ICdtZXRob2QnLFxuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIHNob3dJZjogJ29wdGlvbnMuZ2V0KFwic2VuZFN1Ym1pc3Npb25zVG9cIikgPT09IFwiY3VzdG9tXCInLFxuICAgIGRlZmF1bHRWYWx1ZTogJ1BPU1QnLFxuICAgIGFkdmFuY2VkOiB0cnVlXG4gIH0sIHtcbiAgICBuYW1lOiAncHJldmlld1N0YXRlJyxcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAvLyBUT0RPOiBwZXJzaXN0OiBmYWxzZSBmbGFnXG4gICAgZW51bTogWyd1bnN1Ym1pdHRlZCcsICdzZW5kaW5nJywgJ3N1Y2Nlc3MnLCAnZXJyb3InXSxcbiAgICBkZWZhdWx0VmFsdWU6ICd1bnN1Ym1pdHRlZCcsXG4gICAgaGVscGVyVGV4dDogJ0Nob29zZSBhIHN0YXRlIHRvIGVkaXQsIGUuZy4gY2hvb3NlIFwic3VjY2Vzc1wiIHRvIHNob3cgd2hhdCB1c2VycyBzZWUgb24gc3VjY2VzcyBhbmQgZWRpdCB0aGUgbWVzc2FnZScsXG4gICAgc2hvd0lmOiAnb3B0aW9ucy5nZXQoXCJzZW5kU3VibWlzc2lvbnNUb1wiKSAhPT0gXCJ6YXBpZXJcIiAmJiBvcHRpb25zLmdldChcInNlbmRXaXRoSnNcIikgPT09IHRydWUnXG4gIH0sIHtcbiAgICBuYW1lOiAnc3VjY2Vzc1VybCcsXG4gICAgdHlwZTogJ3VybCcsXG4gICAgaGVscGVyVGV4dDogJ09wdGlvbmFsIFVSTCB0byByZWRpcmVjdCB0aGUgdXNlciB0byBvbiBmb3JtIHN1Ym1pc3Npb24gc3VjY2VzcycsXG4gICAgc2hvd0lmOiAnb3B0aW9ucy5nZXQoXCJzZW5kU3VibWlzc2lvbnNUb1wiKSAhPT0gXCJ6YXBpZXJcIiAmJiBvcHRpb25zLmdldChcInNlbmRXaXRoSnNcIikgPT09IHRydWUnXG4gIH0sIHtcbiAgICBuYW1lOiAncmVzZXRGb3JtT25TdWJtaXQnLFxuICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICBzaG93SWY6IFwib3B0aW9ucy5nZXQoJ3NlbmRTdWJtaXNzaW9uc1RvJykgPT09ICdjdXN0b20nICYmIG9wdGlvbnMuZ2V0KCdzZW5kV2l0aEpzJykgPT09IHRydWVcIixcbiAgICBhZHZhbmNlZDogdHJ1ZVxuICB9LCB7XG4gICAgbmFtZTogJ3N1Y2Nlc3NNZXNzYWdlJyxcbiAgICB0eXBlOiAndWlCbG9ja3MnLFxuICAgIGhpZGVGcm9tVUk6IHRydWUsXG4gICAgZGVmYXVsdFZhbHVlOiBbe1xuICAgICAgJ0B0eXBlJzogJ0BidWlsZGVyLmlvL3NkazpFbGVtZW50JyxcbiAgICAgIHJlc3BvbnNpdmVTdHlsZXM6IHtcbiAgICAgICAgbGFyZ2U6IHtcbiAgICAgICAgICBtYXJnaW5Ub3A6ICcxMHB4J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29tcG9uZW50OiB7XG4gICAgICAgIG5hbWU6ICdUZXh0JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHRleHQ6ICc8c3Bhbj5UaGFua3MhPC9zcGFuPidcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dXG4gIH0sIHtcbiAgICBuYW1lOiAndmFsaWRhdGUnLFxuICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgYWR2YW5jZWQ6IHRydWVcbiAgfSwge1xuICAgIG5hbWU6ICdlcnJvck1lc3NhZ2VQYXRoJyxcbiAgICB0eXBlOiAndGV4dCcsXG4gICAgYWR2YW5jZWQ6IHRydWUsXG4gICAgaGVscGVyVGV4dDogJ1BhdGggdG8gd2hlcmUgdG8gZ2V0IHRoZSBlcnJvciBtZXNzYWdlIGZyb20gaW4gYSBKU09OIHJlc3BvbnNlIHRvIGRpc3BsYXkgdG8gdGhlIHVzZXIsIGUuZy4gXCJlcnJvci5tZXNzYWdlXCIgZm9yIGEgcmVzcG9uc2UgbGlrZSB7IFwiZXJyb3JcIjogeyBcIm1lc3NhZ2VcIjogXCJ0aGlzIHVzZXJuYW1lIGlzIHRha2VuXCIgfX0nXG4gIH0sIHtcbiAgICBuYW1lOiAnZXJyb3JNZXNzYWdlJyxcbiAgICB0eXBlOiAndWlCbG9ja3MnLFxuICAgIGhpZGVGcm9tVUk6IHRydWUsXG4gICAgZGVmYXVsdFZhbHVlOiBbe1xuICAgICAgJ0B0eXBlJzogJ0BidWlsZGVyLmlvL3NkazpFbGVtZW50JyxcbiAgICAgIHJlc3BvbnNpdmVTdHlsZXM6IHtcbiAgICAgICAgbGFyZ2U6IHtcbiAgICAgICAgICBtYXJnaW5Ub3A6ICcxMHB4J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmluZGluZ3M6IHtcbiAgICAgICAgJ2NvbXBvbmVudC5vcHRpb25zLnRleHQnOiAnc3RhdGUuZm9ybUVycm9yTWVzc2FnZSB8fCBibG9jay5jb21wb25lbnQub3B0aW9ucy50ZXh0J1xuICAgICAgfSxcbiAgICAgIGNvbXBvbmVudDoge1xuICAgICAgICBuYW1lOiAnVGV4dCcsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICB0ZXh0OiAnPHNwYW4+Rm9ybSBzdWJtaXNzaW9uIGVycm9yIDooIFBsZWFzZSBjaGVjayB5b3VyIGFuc3dlcnMgYW5kIHRyeSBhZ2Fpbjwvc3Bhbj4nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XVxuICB9LCB7XG4gICAgbmFtZTogJ3NlbmRpbmdNZXNzYWdlJyxcbiAgICB0eXBlOiAndWlCbG9ja3MnLFxuICAgIGhpZGVGcm9tVUk6IHRydWUsXG4gICAgZGVmYXVsdFZhbHVlOiBbe1xuICAgICAgJ0B0eXBlJzogJ0BidWlsZGVyLmlvL3NkazpFbGVtZW50JyxcbiAgICAgIHJlc3BvbnNpdmVTdHlsZXM6IHtcbiAgICAgICAgbGFyZ2U6IHtcbiAgICAgICAgICBtYXJnaW5Ub3A6ICcxMHB4J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29tcG9uZW50OiB7XG4gICAgICAgIG5hbWU6ICdUZXh0JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHRleHQ6ICc8c3Bhbj5TZW5kaW5nLi4uPC9zcGFuPidcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dXG4gIH0sIHtcbiAgICBuYW1lOiAnY3VzdG9tSGVhZGVycycsXG4gICAgdHlwZTogJ21hcCcsXG4gICAgdmFsdWVUeXBlOiB7XG4gICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgYWR2YW5jZWQ6IHRydWUsXG4gICAgc2hvd0lmOiAnb3B0aW9ucy5nZXQoXCJzZW5kU3VibWlzc2lvbnNUb1wiKSA9PT0gXCJjdXN0b21cIiAmJiBvcHRpb25zLmdldChcInNlbmRXaXRoSnNcIikgPT09IHRydWUnXG4gIH1dLFxuICBub1dyYXA6IHRydWUsXG4gIGNhbkhhdmVDaGlsZHJlbjogdHJ1ZSxcbiAgZGVmYXVsdENoaWxkcmVuOiBbe1xuICAgICdAdHlwZSc6ICdAYnVpbGRlci5pby9zZGs6RWxlbWVudCcsXG4gICAgcmVzcG9uc2l2ZVN0eWxlczoge1xuICAgICAgbGFyZ2U6IHtcbiAgICAgICAgbWFyZ2luVG9wOiAnMTBweCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBvbmVudDoge1xuICAgICAgbmFtZTogJ1RleHQnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICB0ZXh0OiAnPHNwYW4+RW50ZXIgeW91ciBuYW1lPC9zcGFuPidcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICAnQHR5cGUnOiAnQGJ1aWxkZXIuaW8vc2RrOkVsZW1lbnQnLFxuICAgIHJlc3BvbnNpdmVTdHlsZXM6IHtcbiAgICAgIGxhcmdlOiB7XG4gICAgICAgIG1hcmdpblRvcDogJzEwcHgnXG4gICAgICB9XG4gICAgfSxcbiAgICBjb21wb25lbnQ6IHtcbiAgICAgIG5hbWU6ICdGb3JtOklucHV0JyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgbmFtZTogJ25hbWUnLFxuICAgICAgICBwbGFjZWhvbGRlcjogJ0phbmUgRG9lJ1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgICdAdHlwZSc6ICdAYnVpbGRlci5pby9zZGs6RWxlbWVudCcsXG4gICAgcmVzcG9uc2l2ZVN0eWxlczoge1xuICAgICAgbGFyZ2U6IHtcbiAgICAgICAgbWFyZ2luVG9wOiAnMTBweCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBvbmVudDoge1xuICAgICAgbmFtZTogJ1RleHQnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICB0ZXh0OiAnPHNwYW4+RW50ZXIgeW91ciBlbWFpbDwvc3Bhbj4nXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgJ0B0eXBlJzogJ0BidWlsZGVyLmlvL3NkazpFbGVtZW50JyxcbiAgICByZXNwb25zaXZlU3R5bGVzOiB7XG4gICAgICBsYXJnZToge1xuICAgICAgICBtYXJnaW5Ub3A6ICcxMHB4J1xuICAgICAgfVxuICAgIH0sXG4gICAgY29tcG9uZW50OiB7XG4gICAgICBuYW1lOiAnRm9ybTpJbnB1dCcsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIG5hbWU6ICdlbWFpbCcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiAnamFuZUBkb2UuY29tJ1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgICdAdHlwZSc6ICdAYnVpbGRlci5pby9zZGs6RWxlbWVudCcsXG4gICAgcmVzcG9uc2l2ZVN0eWxlczoge1xuICAgICAgbGFyZ2U6IHtcbiAgICAgICAgbWFyZ2luVG9wOiAnMTBweCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBvbmVudDoge1xuICAgICAgbmFtZTogJ0Zvcm06U3VibWl0QnV0dG9uJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdGV4dDogJ1N1Ym1pdCdcbiAgICAgIH1cbiAgICB9XG4gIH1dLFxuICBzaG91bGRSZWNlaXZlQnVpbGRlclByb3BzOiB7XG4gICAgYnVpbGRlckJsb2NrOiB0cnVlLFxuICAgIGJ1aWxkZXJDb250ZXh0OiB0cnVlLFxuICAgIGJ1aWxkZXJDb21wb25lbnRzOiB0cnVlLFxuICAgIGJ1aWxkZXJMaW5rQ29tcG9uZW50OiB0cnVlXG4gIH1cbn0iXX0=
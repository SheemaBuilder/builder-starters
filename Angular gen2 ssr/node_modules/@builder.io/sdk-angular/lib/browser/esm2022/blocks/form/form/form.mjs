import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import Blocks from "../../../components/blocks/blocks";
import { getEnv } from "../../../functions/get-env";
import { get } from "../../../functions/get";
import { isEditing } from "../../../functions/is-editing";
import { set } from "../../../functions/set";
import { logFetch } from "../../../functions/log-fetch";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class FormComponent {
    mergeNewRootState(newData) {
        const combinedState = {
            ...this.builderContext.rootState,
            ...newData,
        };
        if (this.builderContext.rootSetState) {
            this.builderContext.rootSetState?.(combinedState);
        }
        else {
            this.builderContext.rootState = combinedState;
        }
    }
    submissionState() {
        return (isEditing() && this.previewState) || this.formState;
    }
    onSubmit(event) {
        const sendWithJsProp = this.sendWithJs || this.sendSubmissionsTo === "email";
        if (this.sendSubmissionsTo === "zapier") {
            event.preventDefault();
        }
        else if (sendWithJsProp) {
            if (!(this.action || this.sendSubmissionsTo === "email")) {
                event.preventDefault();
                return;
            }
            event.preventDefault();
            const el = event.currentTarget || event.target;
            const headers = this.customHeaders || {};
            let body;
            const formData = new FormData(el);
            // TODO: maybe support null
            const formPairs = Array.from(el.querySelectorAll("input,select,textarea"))
                .filter((el) => !!el.name)
                .map((el) => {
                let value;
                const key = el.name;
                if (el instanceof HTMLInputElement) {
                    if (el.type === "radio") {
                        if (el.checked) {
                            value = el.name;
                            return {
                                key,
                                value,
                            };
                        }
                    }
                    else if (el.type === "checkbox") {
                        value = el.checked;
                    }
                    else if (el.type === "number" || el.type === "range") {
                        const num = el.valueAsNumber;
                        if (!isNaN(num)) {
                            value = num;
                        }
                    }
                    else if (el.type === "file") {
                        // TODO: one vs multiple files
                        value = el.files;
                    }
                    else {
                        value = el.value;
                    }
                }
                else {
                    value = el.value;
                }
                return {
                    key,
                    value,
                };
            });
            let formContentType = this.contentType;
            if (this.sendSubmissionsTo === "email") {
                formContentType = "multipart/form-data";
            }
            Array.from(formPairs).forEach(({ value }) => {
                if (value instanceof File ||
                    (Array.isArray(value) && value[0] instanceof File) ||
                    value instanceof FileList) {
                    formContentType = "multipart/form-data";
                }
            });
            // TODO: send as urlEncoded or multipart by default
            // because of ease of use and reliability in browser API
            // for encoding the form?
            if (formContentType !== "application/json") {
                body = formData;
            }
            else {
                // Json
                const json = {};
                Array.from(formPairs).forEach(({ value, key }) => {
                    set(json, key, value);
                });
                body = JSON.stringify(json);
            }
            if (formContentType && formContentType !== "multipart/form-data") {
                if (
                /* Zapier doesn't allow content-type header to be sent from browsers */
                !(sendWithJsProp && this.action?.includes("zapier.com"))) {
                    headers["content-type"] = formContentType;
                }
            }
            const presubmitEvent = new CustomEvent("presubmit", {
                detail: {
                    body,
                },
            });
            if (this.formRef.nativeElement) {
                this.formRef.nativeElement.dispatchEvent(presubmitEvent);
                if (presubmitEvent.defaultPrevented) {
                    return;
                }
            }
            this.formState = "sending";
            const formUrl = `${getEnv() === "dev" ? "http://localhost:5000" : "https://builder.io"}/api/v1/form-submit?apiKey=${this.builderContext.apiKey}&to=${btoa(this.sendSubmissionsToEmail || "")}&name=${encodeURIComponent(this.name || "")}`;
            const url = this.sendSubmissionsTo === "email"
                ? formUrl
                : this.action; /* TODO: throw error if no action URL */
            logFetch(url);
            fetch(url, {
                body,
                headers,
                method: this.method || "post",
            }).then(async (res) => {
                let body;
                const contentType = res.headers.get("content-type");
                if (contentType && contentType.indexOf("application/json") !== -1) {
                    body = await res.json();
                }
                else {
                    body = await res.text();
                }
                if (!res.ok && this.errorMessagePath) {
                    /* TODO: allow supplying an error formatter function */
                    let message = get(body, this.errorMessagePath);
                    if (message) {
                        if (typeof message !== "string") {
                            /* TODO: ideally convert json to yaml so it woul dbe like
                        error: - email has been taken */
                            message = JSON.stringify(message);
                        }
                        this.formErrorMessage = message;
                        this.mergeNewRootState({
                            formErrorMessage: message,
                        });
                    }
                }
                this.responseData = body;
                this.formState = res.ok ? "success" : "error";
                if (res.ok) {
                    const submitSuccessEvent = new CustomEvent("submit:success", {
                        detail: {
                            res,
                            body,
                        },
                    });
                    if (this.formRef.nativeElement) {
                        this.formRef.nativeElement.dispatchEvent(submitSuccessEvent);
                        if (submitSuccessEvent.defaultPrevented) {
                            return;
                        }
                        /* TODO: option to turn this on/off? */
                        if (this.resetFormOnSubmit !== false) {
                            this.formRef.nativeElement.reset();
                        }
                    }
                    /* TODO: client side route event first that can be preventDefaulted */
                    if (this.successUrl) {
                        if (this.formRef.nativeElement) {
                            const event = new CustomEvent("route", {
                                detail: {
                                    url: this.successUrl,
                                },
                            });
                            this.formRef.nativeElement.dispatchEvent(event);
                            if (!event.defaultPrevented) {
                                location.href = this.successUrl;
                            }
                        }
                        else {
                            location.href = this.successUrl;
                        }
                    }
                }
            }, (err) => {
                const submitErrorEvent = new CustomEvent("submit:error", {
                    detail: {
                        error: err,
                    },
                });
                if (this.formRef.nativeElement) {
                    this.formRef.nativeElement.dispatchEvent(submitErrorEvent);
                    if (submitErrorEvent.defaultPrevented) {
                        return;
                    }
                }
                this.responseData = err;
                this.formState = "error";
            });
        }
    }
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.formState = "unsubmitted";
        this.responseData = null;
        this.formErrorMessage = "";
        this.node_1_Show = null;
        this.node_2_Show = null;
        this.node_3_Show = null;
        this.node_4_div = null;
        this.node_5_Show = null;
        this.elRef0_state_0 = null;
        this.elRef0_state_1 = null;
    }
    ngOnInit() {
        this.node_1_Show = this.submissionState() === "error";
        this.node_2_Show = this.submissionState() === "sending";
        this.node_3_Show = this.submissionState() === "error" && this.responseData;
        this.node_4_div = JSON.stringify(this.responseData, null, 2);
        this.node_5_Show = this.submissionState() === "success";
        this.elRef0_state_0 = {};
        this.elRef0_state_1 = {};
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0);
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_1);
        this.setAttributes(this.elRef0?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_1_Show = this.submissionState() === "error";
            this.node_2_Show = this.submissionState() === "sending";
            this.node_3_Show =
                this.submissionState() === "error" && this.responseData;
            this.node_4_div = JSON.stringify(this.responseData, null, 2);
            this.node_5_Show = this.submissionState() === "success";
            this.elRef0_state_0 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0, changes["elRef0_state_0"]?.currentValue);
            this.elRef0_state_1 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_1, changes["elRef0_state_1"]?.currentValue);
            this.setAttributes(this.elRef0?.nativeElement, this.attributes, changes["attributes"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FormComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: FormComponent, isStandalone: true, selector: "form-component", inputs: { builderContext: "builderContext", previewState: "previewState", sendWithJs: "sendWithJs", sendSubmissionsTo: "sendSubmissionsTo", action: "action", customHeaders: "customHeaders", contentType: "contentType", sendSubmissionsToEmail: "sendSubmissionsToEmail", name: "name", method: "method", errorMessagePath: "errorMessagePath", resetFormOnSubmit: "resetFormOnSubmit", successUrl: "successUrl", validate: "validate", attributes: "attributes", errorMessage: "errorMessage", sendingMessage: "sendingMessage", successMessage: "successMessage" }, viewQueries: [{ propertyName: "formRef", first: true, predicate: ["formRef"], descendants: true }, { propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <form
      [attr.validate]="validate"
      #formRef
      [attr.action]="!sendWithJs && action"
      [attr.method]="method"
      [attr.name]="name"
      (submit)="onSubmit($event)"
      #elRef0
    >
      <ng-content></ng-content>
      <ng-container *ngIf="node_1_Show">
        <blocks
          path="errorMessage"
          [blocks]="errorMessage!"
          [context]="builderContext"
        ></blocks>
      </ng-container>
      <ng-container *ngIf="node_2_Show">
        <blocks
          path="sendingMessage"
          [blocks]="sendingMessage!"
          [context]="builderContext"
        ></blocks>
      </ng-container>
      <ng-container *ngIf="node_3_Show">
        <pre class="builder-form-error-text pre">{{node_4_div}}</pre>
      </ng-container>
      <ng-container *ngIf="node_5_Show">
        <blocks
          path="successMessage"
          [blocks]="successMessage!"
          [context]="builderContext"
        ></blocks>
      </ng-container>
    </form>
  `, isInline: true, styles: [":host{display:contents}.pre{padding:10px;color:red;text-align:center}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: Blocks, selector: "blocks", inputs: ["blocks", "parent", "path", "styleProp", "className", "context", "linkComponent", "registeredComponents"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FormComponent, decorators: [{
            type: Component,
            args: [{ selector: "form-component", template: `
    <form
      [attr.validate]="validate"
      #formRef
      [attr.action]="!sendWithJs && action"
      [attr.method]="method"
      [attr.name]="name"
      (submit)="onSubmit($event)"
      #elRef0
    >
      <ng-content></ng-content>
      <ng-container *ngIf="node_1_Show">
        <blocks
          path="errorMessage"
          [blocks]="errorMessage!"
          [context]="builderContext"
        ></blocks>
      </ng-container>
      <ng-container *ngIf="node_2_Show">
        <blocks
          path="sendingMessage"
          [blocks]="sendingMessage!"
          [context]="builderContext"
        ></blocks>
      </ng-container>
      <ng-container *ngIf="node_3_Show">
        <pre class="builder-form-error-text pre">{{node_4_div}}</pre>
      </ng-container>
      <ng-container *ngIf="node_5_Show">
        <blocks
          path="successMessage"
          [blocks]="successMessage!"
          [context]="builderContext"
        ></blocks>
      </ng-container>
    </form>
  `, standalone: true, imports: [CommonModule, Blocks], styles: [":host{display:contents}.pre{padding:10px;color:red;text-align:center}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { builderContext: [{
                type: Input
            }], previewState: [{
                type: Input
            }], sendWithJs: [{
                type: Input
            }], sendSubmissionsTo: [{
                type: Input
            }], action: [{
                type: Input
            }], customHeaders: [{
                type: Input
            }], contentType: [{
                type: Input
            }], sendSubmissionsToEmail: [{
                type: Input
            }], name: [{
                type: Input
            }], method: [{
                type: Input
            }], errorMessagePath: [{
                type: Input
            }], resetFormOnSubmit: [{
                type: Input
            }], successUrl: [{
                type: Input
            }], validate: [{
                type: Input
            }], attributes: [{
                type: Input
            }], errorMessage: [{
                type: Input
            }], sendingMessage: [{
                type: Input
            }], successMessage: [{
                type: Input
            }], formRef: [{
                type: ViewChild,
                args: ["formRef"]
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9ibG9ja3MvZm9ybS9mb3JtL2Zvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBR1QsS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQW9DL0MsT0FBTyxNQUFNLE1BQU0sbUNBQW1DLENBQUM7QUFDdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDMUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBUzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7O0FBeUR4RCxNQUFNLENBQUMsT0FBTyxPQUFPLGFBQWE7SUE2QmhDLGlCQUFpQixDQUFDLE9BQXdCO1FBQ3hDLE1BQU0sYUFBYSxHQUFHO1lBQ3BCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTO1lBQ2hDLEdBQUcsT0FBTztTQUNYLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7YUFBTTtZQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQztTQUMvQztJQUNILENBQUM7SUFDRCxlQUFlO1FBQ2IsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzlELENBQUM7SUFDRCxRQUFRLENB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TUFBTSxFQUFFLEVBQUU7WUFDM0MsRUFBRSxFQUFFLENBQUM7U0FDTjtJQUNILENBQUM7K0dBalVrQixhQUFhO21HQUFiLGFBQWEsOHpCQXBEdEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9DVCxnSkFjUyxZQUFZLG1JQUFFLE1BQU07OzRGQUVYLGFBQWE7a0JBdERqQyxTQUFTOytCQUNFLGdCQUFnQixZQUNoQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0NULGNBYVcsSUFBSSxXQUNQLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztnR0FHdEIsY0FBYztzQkFBdEIsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csaUJBQWlCO3NCQUF6QixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxhQUFhO3NCQUFyQixLQUFLO2dCQUNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBQ0csc0JBQXNCO3NCQUE5QixLQUFLO2dCQUNHLElBQUk7c0JBQVosS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUNHLGlCQUFpQjtzQkFBekIsS0FBSztnQkFDRyxVQUFVO3NCQUFsQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLO2dCQUNHLGNBQWM7c0JBQXRCLEtBQUs7Z0JBQ0csY0FBYztzQkFBdEIsS0FBSztnQkFFZ0IsT0FBTztzQkFBNUIsU0FBUzt1QkFBQyxTQUFTO2dCQUVDLE1BQU07c0JBQTFCLFNBQVM7dUJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgVmlld0NoaWxkLFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsXG4gIElucHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuXG4vKipcbiAqIFRoaXMgaW1wb3J0IGlzIHVzZWQgYnkgdGhlIFN2ZWx0ZSBTREsuIERvIG5vdCByZW1vdmUuXG4gKi9cblxuZXhwb3J0IHR5cGUgRm9ybVByb3BzID0gQnVpbGRlckRhdGFQcm9wcyAmXG4gIEJ1aWxkZXJDb21wb25lbnRzUHJvcCAmXG4gIEJ1aWxkZXJMaW5rQ29tcG9uZW50UHJvcCAmIHtcbiAgICBhdHRyaWJ1dGVzPzogYW55O1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgYWN0aW9uPzogc3RyaW5nO1xuICAgIHZhbGlkYXRlPzogYm9vbGVhbjtcbiAgICBtZXRob2Q/OiBzdHJpbmc7XG4gICAgc2VuZFN1Ym1pc3Npb25zVG8/OiBzdHJpbmc7XG4gICAgc2VuZFN1Ym1pc3Npb25zVG9FbWFpbD86IHN0cmluZztcbiAgICBzZW5kV2l0aEpzPzogYm9vbGVhbjtcbiAgICBjb250ZW50VHlwZT86IHN0cmluZztcbiAgICBjdXN0b21IZWFkZXJzPzoge1xuICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG4gICAgc3VjY2Vzc1VybD86IHN0cmluZztcbiAgICBwcmV2aWV3U3RhdGU/OiBGb3JtU3RhdGU7XG4gICAgc3VjY2Vzc01lc3NhZ2U/OiBCdWlsZGVyQmxvY2tbXTtcbiAgICBlcnJvck1lc3NhZ2U/OiBCdWlsZGVyQmxvY2tbXTtcbiAgICBzZW5kaW5nTWVzc2FnZT86IEJ1aWxkZXJCbG9ja1tdO1xuICAgIHJlc2V0Rm9ybU9uU3VibWl0PzogYm9vbGVhbjtcbiAgICBlcnJvck1lc3NhZ2VQYXRoPzogc3RyaW5nO1xuICAgIGNoaWxkcmVuPzogYW55O1xuICB9O1xuLyoqXG4gKiBUaGlzIGltcG9ydCBpcyB1c2VkIGJ5IHRoZSBTdmVsdGUgU0RLLiBEbyBub3QgcmVtb3ZlLlxuICovXG5cbmV4cG9ydCB0eXBlIEZvcm1TdGF0ZSA9IFwidW5zdWJtaXR0ZWRcIiB8IFwic2VuZGluZ1wiIHwgXCJzdWNjZXNzXCIgfCBcImVycm9yXCI7XG5cbmltcG9ydCBCbG9ja3MgZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvYmxvY2tzL2Jsb2Nrc1wiO1xuaW1wb3J0IHsgZ2V0RW52IH0gZnJvbSBcIi4uLy4uLy4uL2Z1bmN0aW9ucy9nZXQtZW52XCI7XG5pbXBvcnQgeyBnZXQgfSBmcm9tIFwiLi4vLi4vLi4vZnVuY3Rpb25zL2dldFwiO1xuaW1wb3J0IHsgaXNFZGl0aW5nIH0gZnJvbSBcIi4uLy4uLy4uL2Z1bmN0aW9ucy9pcy1lZGl0aW5nXCI7XG5pbXBvcnQgeyBzZXQgfSBmcm9tIFwiLi4vLi4vLi4vZnVuY3Rpb25zL3NldFwiO1xuaW1wb3J0IHR5cGUgeyBCdWlsZGVyQmxvY2sgfSBmcm9tIFwiLi4vLi4vLi4vdHlwZXMvYnVpbGRlci1ibG9ja1wiO1xuaW1wb3J0IHR5cGUge1xuICBCdWlsZGVyQ29tcG9uZW50c1Byb3AsXG4gIEJ1aWxkZXJEYXRhUHJvcHMsXG4gIEJ1aWxkZXJMaW5rQ29tcG9uZW50UHJvcCxcbn0gZnJvbSBcIi4uLy4uLy4uL3R5cGVzL2J1aWxkZXItcHJvcHNcIjtcbmltcG9ydCB0eXBlIHsgRGljdGlvbmFyeSB9IGZyb20gXCIuLi8uLi8uLi90eXBlcy90eXBlc2NyaXB0XCI7XG5pbXBvcnQgeyBmaWx0ZXJBdHRycyB9IGZyb20gXCIuLi8uLi9oZWxwZXJzXCI7XG5pbXBvcnQgeyBsb2dGZXRjaCB9IGZyb20gXCIuLi8uLi8uLi9mdW5jdGlvbnMvbG9nLWZldGNoXCI7XG5pbXBvcnQgeyBzZXRBdHRycyB9IGZyb20gXCIuLi8uLi9oZWxwZXJzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJmb3JtLWNvbXBvbmVudFwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxmb3JtXG4gICAgICBbYXR0ci52YWxpZGF0ZV09XCJ2YWxpZGF0ZVwiXG4gICAgICAjZm9ybVJlZlxuICAgICAgW2F0dHIuYWN0aW9uXT1cIiFzZW5kV2l0aEpzICYmIGFjdGlvblwiXG4gICAgICBbYXR0ci5tZXRob2RdPVwibWV0aG9kXCJcbiAgICAgIFthdHRyLm5hbWVdPVwibmFtZVwiXG4gICAgICAoc3VibWl0KT1cIm9uU3VibWl0KCRldmVudClcIlxuICAgICAgI2VsUmVmMFxuICAgID5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJub2RlXzFfU2hvd1wiPlxuICAgICAgICA8YmxvY2tzXG4gICAgICAgICAgcGF0aD1cImVycm9yTWVzc2FnZVwiXG4gICAgICAgICAgW2Jsb2Nrc109XCJlcnJvck1lc3NhZ2UhXCJcbiAgICAgICAgICBbY29udGV4dF09XCJidWlsZGVyQ29udGV4dFwiXG4gICAgICAgID48L2Jsb2Nrcz5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIm5vZGVfMl9TaG93XCI+XG4gICAgICAgIDxibG9ja3NcbiAgICAgICAgICBwYXRoPVwic2VuZGluZ01lc3NhZ2VcIlxuICAgICAgICAgIFtibG9ja3NdPVwic2VuZGluZ01lc3NhZ2UhXCJcbiAgICAgICAgICBbY29udGV4dF09XCJidWlsZGVyQ29udGV4dFwiXG4gICAgICAgID48L2Jsb2Nrcz5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIm5vZGVfM19TaG93XCI+XG4gICAgICAgIDxwcmUgY2xhc3M9XCJidWlsZGVyLWZvcm0tZXJyb3ItdGV4dCBwcmVcIj57e25vZGVfNF9kaXZ9fTwvcHJlPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwibm9kZV81X1Nob3dcIj5cbiAgICAgICAgPGJsb2Nrc1xuICAgICAgICAgIHBhdGg9XCJzdWNjZXNzTWVzc2FnZVwiXG4gICAgICAgICAgW2Jsb2Nrc109XCJzdWNjZXNzTWVzc2FnZSFcIlxuICAgICAgICAgIFtjb250ZXh0XT1cImJ1aWxkZXJDb250ZXh0XCJcbiAgICAgICAgPjwvYmxvY2tzPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9mb3JtPlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xuICAgICAgfVxuICAgICAgLnByZSB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIH1cbiAgICBgLFxuICBdLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBCbG9ja3NdLFxufSlcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1Db21wb25lbnQge1xuICBASW5wdXQoKSBidWlsZGVyQ29udGV4dCE6IEZvcm1Qcm9wc1tcImJ1aWxkZXJDb250ZXh0XCJdO1xuICBASW5wdXQoKSBwcmV2aWV3U3RhdGUhOiBGb3JtUHJvcHNbXCJwcmV2aWV3U3RhdGVcIl07XG4gIEBJbnB1dCgpIHNlbmRXaXRoSnMhOiBGb3JtUHJvcHNbXCJzZW5kV2l0aEpzXCJdO1xuICBASW5wdXQoKSBzZW5kU3VibWlzc2lvbnNUbyE6IEZvcm1Qcm9wc1tcInNlbmRTdWJtaXNzaW9uc1RvXCJdO1xuICBASW5wdXQoKSBhY3Rpb24hOiBGb3JtUHJvcHNbXCJhY3Rpb25cIl07XG4gIEBJbnB1dCgpIGN1c3RvbUhlYWRlcnMhOiBGb3JtUHJvcHNbXCJjdXN0b21IZWFkZXJzXCJdO1xuICBASW5wdXQoKSBjb250ZW50VHlwZSE6IEZvcm1Qcm9wc1tcImNvbnRlbnRUeXBlXCJdO1xuICBASW5wdXQoKSBzZW5kU3VibWlzc2lvbnNUb0VtYWlsITogRm9ybVByb3BzW1wic2VuZFN1Ym1pc3Npb25zVG9FbWFpbFwiXTtcbiAgQElucHV0KCkgbmFtZSE6IEZvcm1Qcm9wc1tcIm5hbWVcIl07XG4gIEBJbnB1dCgpIG1ldGhvZCE6IEZvcm1Qcm9wc1tcIm1ldGhvZFwiXTtcbiAgQElucHV0KCkgZXJyb3JNZXNzYWdlUGF0aCE6IEZvcm1Qcm9wc1tcImVycm9yTWVzc2FnZVBhdGhcIl07XG4gIEBJbnB1dCgpIHJlc2V0Rm9ybU9uU3VibWl0ITogRm9ybVByb3BzW1wicmVzZXRGb3JtT25TdWJtaXRcIl07XG4gIEBJbnB1dCgpIHN1Y2Nlc3NVcmwhOiBGb3JtUHJvcHNbXCJzdWNjZXNzVXJsXCJdO1xuICBASW5wdXQoKSB2YWxpZGF0ZSE6IEZvcm1Qcm9wc1tcInZhbGlkYXRlXCJdO1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogRm9ybVByb3BzW1wiYXR0cmlidXRlc1wiXTtcbiAgQElucHV0KCkgZXJyb3JNZXNzYWdlITogRm9ybVByb3BzW1wiZXJyb3JNZXNzYWdlXCJdO1xuICBASW5wdXQoKSBzZW5kaW5nTWVzc2FnZSE6IEZvcm1Qcm9wc1tcInNlbmRpbmdNZXNzYWdlXCJdO1xuICBASW5wdXQoKSBzdWNjZXNzTWVzc2FnZSE6IEZvcm1Qcm9wc1tcInN1Y2Nlc3NNZXNzYWdlXCJdO1xuXG4gIEBWaWV3Q2hpbGQoXCJmb3JtUmVmXCIpIGZvcm1SZWYhOiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGQoXCJlbFJlZjBcIikgZWxSZWYwITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBmb3JtU3RhdGUgPSBcInVuc3VibWl0dGVkXCI7XG4gIHJlc3BvbnNlRGF0YSA9IG51bGw7XG4gIGZvcm1FcnJvck1lc3NhZ2UgPSBcIlwiO1xuICBtZXJnZU5ld1Jvb3RTdGF0ZShuZXdEYXRhOiBEaWN0aW9uYXJ5PGFueT4pIHtcbiAgICBjb25zdCBjb21iaW5lZFN0YXRlID0ge1xuICAgICAgLi4udGhpcy5idWlsZGVyQ29udGV4dC5yb290U3RhdGUsXG4gICAgICAuLi5uZXdEYXRhLFxuICAgIH07XG4gICAgaWYgKHRoaXMuYnVpbGRlckNvbnRleHQucm9vdFNldFN0YXRlKSB7XG4gICAgICB0aGlzLmJ1aWxkZXJDb250ZXh0LnJvb3RTZXRTdGF0ZT8uKGNvbWJpbmVkU3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJ1aWxkZXJDb250ZXh0LnJvb3RTdGF0ZSA9IGNvbWJpbmVkU3RhdGU7XG4gICAgfVxuICB9XG4gIHN1Ym1pc3Npb25TdGF0ZSgpIHtcbiAgICByZXR1cm4gKGlzRWRpdGluZygpICYmIHRoaXMucHJldmlld1N0YXRlKSB8fCB0aGlzLmZvcm1TdGF0ZTtcbiAgfVxuICBvblN1Ym1pdChldmVudDogYW55KSB7XG4gICAgY29uc3Qgc2VuZFdpdGhKc1Byb3AgPVxuICAgICAgdGhpcy5zZW5kV2l0aEpzIHx8IHRoaXMuc2VuZFN1Ym1pc3Npb25zVG8gPT09IFwiZW1haWxcIjtcbiAgICBpZiAodGhpcy5zZW5kU3VibWlzc2lvbnNUbyA9PT0gXCJ6YXBpZXJcIikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKHNlbmRXaXRoSnNQcm9wKSB7XG4gICAgICBpZiAoISh0aGlzLmFjdGlvbiB8fCB0aGlzLnNlbmRTdWJtaXNzaW9uc1RvID09PSBcImVtYWlsXCIpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBlbCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgfHwgZXZlbnQudGFyZ2V0O1xuICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuY3VzdG9tSGVhZGVycyB8fCB7fTtcbiAgICAgIGxldCBib2R5OiBhbnk7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShlbCk7XG5cbiAgICAgIC8vIFRPRE86IG1heWJlIHN1cHBvcnQgbnVsbFxuICAgICAgY29uc3QgZm9ybVBhaXJzOiB7XG4gICAgICAgIGtleTogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogRmlsZSB8IGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmcgfCBGaWxlTGlzdDtcbiAgICAgIH1bXSA9IEFycmF5LmZyb20oZWwucXVlcnlTZWxlY3RvckFsbChcImlucHV0LHNlbGVjdCx0ZXh0YXJlYVwiKSlcbiAgICAgICAgLmZpbHRlcigoZWwpID0+ICEhKGVsIGFzIEhUTUxJbnB1dEVsZW1lbnQpLm5hbWUpXG4gICAgICAgIC5tYXAoKGVsKSA9PiB7XG4gICAgICAgICAgbGV0IHZhbHVlOiBhbnk7XG4gICAgICAgICAgY29uc3Qga2V5ID0gKGVsIGFzIEhUTUxJbWFnZUVsZW1lbnQpLm5hbWU7XG4gICAgICAgICAgaWYgKGVsIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsLnR5cGUgPT09IFwicmFkaW9cIikge1xuICAgICAgICAgICAgICBpZiAoZWwuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZWwubmFtZTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbC50eXBlID09PSBcImNoZWNrYm94XCIpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBlbC5jaGVja2VkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbC50eXBlID09PSBcIm51bWJlclwiIHx8IGVsLnR5cGUgPT09IFwicmFuZ2VcIikge1xuICAgICAgICAgICAgICBjb25zdCBudW0gPSBlbC52YWx1ZUFzTnVtYmVyO1xuICAgICAgICAgICAgICBpZiAoIWlzTmFOKG51bSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbC50eXBlID09PSBcImZpbGVcIikge1xuICAgICAgICAgICAgICAvLyBUT0RPOiBvbmUgdnMgbXVsdGlwbGUgZmlsZXNcbiAgICAgICAgICAgICAgdmFsdWUgPSBlbC5maWxlcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gZWwudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gKGVsIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICBsZXQgZm9ybUNvbnRlbnRUeXBlID0gdGhpcy5jb250ZW50VHlwZTtcbiAgICAgIGlmICh0aGlzLnNlbmRTdWJtaXNzaW9uc1RvID09PSBcImVtYWlsXCIpIHtcbiAgICAgICAgZm9ybUNvbnRlbnRUeXBlID0gXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI7XG4gICAgICB9XG4gICAgICBBcnJheS5mcm9tKGZvcm1QYWlycykuZm9yRWFjaCgoeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIEZpbGUgfHxcbiAgICAgICAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWVbMF0gaW5zdGFuY2VvZiBGaWxlKSB8fFxuICAgICAgICAgIHZhbHVlIGluc3RhbmNlb2YgRmlsZUxpc3RcbiAgICAgICAgKSB7XG4gICAgICAgICAgZm9ybUNvbnRlbnRUeXBlID0gXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBUT0RPOiBzZW5kIGFzIHVybEVuY29kZWQgb3IgbXVsdGlwYXJ0IGJ5IGRlZmF1bHRcbiAgICAgIC8vIGJlY2F1c2Ugb2YgZWFzZSBvZiB1c2UgYW5kIHJlbGlhYmlsaXR5IGluIGJyb3dzZXIgQVBJXG4gICAgICAvLyBmb3IgZW5jb2RpbmcgdGhlIGZvcm0/XG4gICAgICBpZiAoZm9ybUNvbnRlbnRUeXBlICE9PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgICBib2R5ID0gZm9ybURhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBKc29uXG4gICAgICAgIGNvbnN0IGpzb24gPSB7fTtcbiAgICAgICAgQXJyYXkuZnJvbShmb3JtUGFpcnMpLmZvckVhY2goKHsgdmFsdWUsIGtleSB9KSA9PiB7XG4gICAgICAgICAgc2V0KGpzb24sIGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGpzb24pO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm1Db250ZW50VHlwZSAmJiBmb3JtQ29udGVudFR5cGUgIT09IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAvKiBaYXBpZXIgZG9lc24ndCBhbGxvdyBjb250ZW50LXR5cGUgaGVhZGVyIHRvIGJlIHNlbnQgZnJvbSBicm93c2VycyAqL1xuICAgICAgICAgICEoc2VuZFdpdGhKc1Byb3AgJiYgdGhpcy5hY3Rpb24/LmluY2x1ZGVzKFwiemFwaWVyLmNvbVwiKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IGZvcm1Db250ZW50VHlwZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgcHJlc3VibWl0RXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXCJwcmVzdWJtaXRcIiwge1xuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICBib2R5LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5mb3JtUmVmLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5mb3JtUmVmLm5hdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChwcmVzdWJtaXRFdmVudCk7XG4gICAgICAgIGlmIChwcmVzdWJtaXRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmZvcm1TdGF0ZSA9IFwic2VuZGluZ1wiO1xuICAgICAgY29uc3QgZm9ybVVybCA9IGAke1xuICAgICAgICBnZXRFbnYoKSA9PT0gXCJkZXZcIiA/IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwXCIgOiBcImh0dHBzOi8vYnVpbGRlci5pb1wiXG4gICAgICB9L2FwaS92MS9mb3JtLXN1Ym1pdD9hcGlLZXk9JHt0aGlzLmJ1aWxkZXJDb250ZXh0LmFwaUtleX0mdG89JHtidG9hKFxuICAgICAgICB0aGlzLnNlbmRTdWJtaXNzaW9uc1RvRW1haWwgfHwgXCJcIlxuICAgICAgKX0mbmFtZT0ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLm5hbWUgfHwgXCJcIil9YDtcbiAgICAgIGNvbnN0IHVybCA9XG4gICAgICAgIHRoaXMuc2VuZFN1Ym1pc3Npb25zVG8gPT09IFwiZW1haWxcIlxuICAgICAgICAgID8gZm9ybVVybFxuICAgICAgICAgIDogdGhpcy5hY3Rpb24hOyAvKiBUT0RPOiB0aHJvdyBlcnJvciBpZiBubyBhY3Rpb24gVVJMICovXG5cbiAgICAgIGxvZ0ZldGNoKHVybCk7XG4gICAgICBmZXRjaCh1cmwsIHtcbiAgICAgICAgYm9keSxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgbWV0aG9kOiB0aGlzLm1ldGhvZCB8fCBcInBvc3RcIixcbiAgICAgIH0pLnRoZW4oXG4gICAgICAgIGFzeW5jIChyZXMpID0+IHtcbiAgICAgICAgICBsZXQgYm9keTtcbiAgICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlcy5oZWFkZXJzLmdldChcImNvbnRlbnQtdHlwZVwiKTtcbiAgICAgICAgICBpZiAoY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuaW5kZXhPZihcImFwcGxpY2F0aW9uL2pzb25cIikgIT09IC0xKSB7XG4gICAgICAgICAgICBib2R5ID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcmVzLm9rICYmIHRoaXMuZXJyb3JNZXNzYWdlUGF0aCkge1xuICAgICAgICAgICAgLyogVE9ETzogYWxsb3cgc3VwcGx5aW5nIGFuIGVycm9yIGZvcm1hdHRlciBmdW5jdGlvbiAqL1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBnZXQoYm9keSwgdGhpcy5lcnJvck1lc3NhZ2VQYXRoKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIC8qIFRPRE86IGlkZWFsbHkgY29udmVydCBqc29uIHRvIHlhbWwgc28gaXQgd291bCBkYmUgbGlrZVxuICAgICAgICAgICAgZXJyb3I6IC0gZW1haWwgaGFzIGJlZW4gdGFrZW4gKi9cbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5mb3JtRXJyb3JNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgdGhpcy5tZXJnZU5ld1Jvb3RTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZm9ybUVycm9yTWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucmVzcG9uc2VEYXRhID0gYm9keTtcbiAgICAgICAgICB0aGlzLmZvcm1TdGF0ZSA9IHJlcy5vayA/IFwic3VjY2Vzc1wiIDogXCJlcnJvclwiO1xuICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgIGNvbnN0IHN1Ym1pdFN1Y2Nlc3NFdmVudCA9IG5ldyBDdXN0b21FdmVudChcInN1Ym1pdDpzdWNjZXNzXCIsIHtcbiAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZvcm1SZWYubmF0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICB0aGlzLmZvcm1SZWYubmF0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KHN1Ym1pdFN1Y2Nlc3NFdmVudCk7XG4gICAgICAgICAgICAgIGlmIChzdWJtaXRTdWNjZXNzRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvKiBUT0RPOiBvcHRpb24gdG8gdHVybiB0aGlzIG9uL29mZj8gKi9cbiAgICAgICAgICAgICAgaWYgKHRoaXMucmVzZXRGb3JtT25TdWJtaXQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtUmVmLm5hdGl2ZUVsZW1lbnQucmVzZXQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBUT0RPOiBjbGllbnQgc2lkZSByb3V0ZSBldmVudCBmaXJzdCB0aGF0IGNhbiBiZSBwcmV2ZW50RGVmYXVsdGVkICovXG4gICAgICAgICAgICBpZiAodGhpcy5zdWNjZXNzVXJsKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmZvcm1SZWYubmF0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFwicm91dGVcIiwge1xuICAgICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5zdWNjZXNzVXJsLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1SZWYubmF0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB0aGlzLnN1Y2Nlc3NVcmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB0aGlzLnN1Y2Nlc3NVcmw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICBjb25zdCBzdWJtaXRFcnJvckV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFwic3VibWl0OmVycm9yXCIsIHtcbiAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICBlcnJvcjogZXJyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAodGhpcy5mb3JtUmVmLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybVJlZi5uYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQoc3VibWl0RXJyb3JFdmVudCk7XG4gICAgICAgICAgICBpZiAoc3VibWl0RXJyb3JFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yZXNwb25zZURhdGEgPSBlcnI7XG4gICAgICAgICAgdGhpcy5mb3JtU3RhdGUgPSBcImVycm9yXCI7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIG5vZGVfMV9TaG93ID0gbnVsbDtcbiAgbm9kZV8yX1Nob3cgPSBudWxsO1xuICBub2RlXzNfU2hvdyA9IG51bGw7XG4gIG5vZGVfNF9kaXYgPSBudWxsO1xuICBub2RlXzVfU2hvdyA9IG51bGw7XG4gIGVsUmVmMF9zdGF0ZV8wID0gbnVsbDtcbiAgc2V0QXR0cmlidXRlcyhlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnksIGNoYW5nZXM/OiBhbnkpIHtcbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IHR5cGVvZiBjaGFuZ2VzID09PSBcInVuZGVmaW5lZFwiID8gdmFsdWUgOiBjaGFuZ2VzO1xuICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJGbnMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5nZXQoa2V5KSEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lckZucy5zZXQoXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICBrZXkucmVwbGFjZShcIm9uXCIsIFwiXCIpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICB0YXJnZXRba2V5XVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsLCBrZXkudG9Mb3dlckNhc2UoKSwgdGFyZ2V0W2tleV0gPz8gXCJcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZWxSZWYwX3N0YXRlXzEgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm5vZGVfMV9TaG93ID0gdGhpcy5zdWJtaXNzaW9uU3RhdGUoKSA9PT0gXCJlcnJvclwiO1xuICAgIHRoaXMubm9kZV8yX1Nob3cgPSB0aGlzLnN1Ym1pc3Npb25TdGF0ZSgpID09PSBcInNlbmRpbmdcIjtcbiAgICB0aGlzLm5vZGVfM19TaG93ID0gdGhpcy5zdWJtaXNzaW9uU3RhdGUoKSA9PT0gXCJlcnJvclwiICYmIHRoaXMucmVzcG9uc2VEYXRhO1xuICAgIHRoaXMubm9kZV80X2RpdiA9IEpTT04uc3RyaW5naWZ5KHRoaXMucmVzcG9uc2VEYXRhLCBudWxsLCAyKTtcbiAgICB0aGlzLm5vZGVfNV9TaG93ID0gdGhpcy5zdWJtaXNzaW9uU3RhdGUoKSA9PT0gXCJzdWNjZXNzXCI7XG4gICAgdGhpcy5lbFJlZjBfc3RhdGVfMCA9IHt9O1xuICAgIHRoaXMuZWxSZWYwX3N0YXRlXzEgPSB7fTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuZWxSZWYwX3N0YXRlXzApO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLmVsUmVmMD8ubmF0aXZlRWxlbWVudCwgdGhpcy5lbFJlZjBfc3RhdGVfMSk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMuZWxSZWYwPy5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLm5vZGVfMV9TaG93ID0gdGhpcy5zdWJtaXNzaW9uU3RhdGUoKSA9PT0gXCJlcnJvclwiO1xuICAgICAgdGhpcy5ub2RlXzJfU2hvdyA9IHRoaXMuc3VibWlzc2lvblN0YXRlKCkgPT09IFwic2VuZGluZ1wiO1xuICAgICAgdGhpcy5ub2RlXzNfU2hvdyA9XG4gICAgICAgIHRoaXMuc3VibWlzc2lvblN0YXRlKCkgPT09IFwiZXJyb3JcIiAmJiB0aGlzLnJlc3BvbnNlRGF0YTtcbiAgICAgIHRoaXMubm9kZV80X2RpdiA9IEpTT04uc3RyaW5naWZ5KHRoaXMucmVzcG9uc2VEYXRhLCBudWxsLCAyKTtcbiAgICAgIHRoaXMubm9kZV81X1Nob3cgPSB0aGlzLnN1Ym1pc3Npb25TdGF0ZSgpID09PSBcInN1Y2Nlc3NcIjtcbiAgICAgIHRoaXMuZWxSZWYwX3N0YXRlXzAgPSB7fTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhcbiAgICAgICAgdGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMuZWxSZWYwX3N0YXRlXzAsXG4gICAgICAgIGNoYW5nZXNbXCJlbFJlZjBfc3RhdGVfMFwiXT8uY3VycmVudFZhbHVlXG4gICAgICApO1xuICAgICAgdGhpcy5lbFJlZjBfc3RhdGVfMSA9IHt9O1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKFxuICAgICAgICB0aGlzLmVsUmVmMD8ubmF0aXZlRWxlbWVudCxcbiAgICAgICAgdGhpcy5lbFJlZjBfc3RhdGVfMSxcbiAgICAgICAgY2hhbmdlc1tcImVsUmVmMF9zdGF0ZV8xXCJdPy5jdXJyZW50VmFsdWVcbiAgICAgICk7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXMoXG4gICAgICAgIHRoaXMuZWxSZWYwPy5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMsXG4gICAgICAgIGNoYW5nZXNbXCJhdHRyaWJ1dGVzXCJdPy5jdXJyZW50VmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBmbiBvZiB0aGlzLl9saXN0ZW5lckZucy52YWx1ZXMoKSkge1xuICAgICAgZm4oKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
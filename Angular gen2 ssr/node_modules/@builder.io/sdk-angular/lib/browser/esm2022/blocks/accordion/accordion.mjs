import { Component, Input } from "@angular/core";
import { CommonModule } from "@angular/common";
import Blocks from "../../components/blocks/index";
import { convertOrderNumberToString } from "./helpers";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class Accordion {
    constructor() {
        this.open = [];
        this.node_0_div = (item, index) => this.getAccordionTitleClassName(index);
        this.node_1_div = (item, index) => ({
            ...this.accordionTitleStyles,
            ...(this.grid && {
                width: this.gridRowWidth,
                ...{
                    order: this.openGridItemOrder !== null
                        ? convertOrderNumberToString(index)
                        : convertOrderNumberToString(index + 1),
                },
            }),
        });
        this.node_3_Blocks = (item, index) => `items.${index}.title`;
        this.node_4_Show = (item, index) => this.open.includes(index);
        this.node_5_div = (item, index) => this.getAccordionDetailClassName(index);
        this.node_6_Blocks = (item, index) => `items.${index}.detail`;
    }
    get onlyOneAtATime() {
        return Boolean(this.grid || this.oneAtATime);
    }
    get accordionStyles() {
        const styles = {
            display: "flex",
            alignItems: "stretch",
            flexDirection: "column",
            ...(this.grid && {
                flexDirection: "row",
                alignItems: "flex-start",
                flexWrap: "wrap",
            }),
        };
        return styles;
    }
    get accordionTitleStyles() {
        const shared = {
            display: "flex",
            flexDirection: "column",
        };
        const styles = {
            ...shared,
            alignItems: "stretch",
            cursor: "pointer",
        };
        return Object.fromEntries(Object.entries(styles).filter(([_, value]) => value !== undefined));
    }
    getAccordionTitleClassName(index) {
        return `builder-accordion-title builder-accordion-title-${this.open.includes(index) ? "open" : "closed"}`;
    }
    getAccordionDetailClassName(index) {
        return `builder-accordion-detail builder-accordion-detail-${this.open.includes(index) ? "open" : "closed"}`;
    }
    get openGridItemOrder() {
        let itemOrder = null;
        const getOpenGridItemPosition = this.grid && this.open.length;
        if (getOpenGridItemPosition && document) {
            const openItemIndex = this.open[0];
            const openItem = document.querySelector(`.builder-accordion-title[data-index="${openItemIndex}"]`);
            let subjectItem = openItem;
            itemOrder = openItemIndex;
            if (subjectItem) {
                let prevItemRect = subjectItem.getBoundingClientRect();
                while ((subjectItem = subjectItem && subjectItem.nextElementSibling)) {
                    if (subjectItem) {
                        if (subjectItem.classList.contains("builder-accordion-detail")) {
                            continue;
                        }
                        const subjectItemRect = subjectItem.getBoundingClientRect();
                        if (subjectItemRect.left > prevItemRect.left) {
                            const index = parseInt(subjectItem.getAttribute("data-index") || "", 10);
                            if (!isNaN(index)) {
                                prevItemRect = subjectItemRect;
                                itemOrder = index;
                            }
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        }
        if (typeof itemOrder === "number") {
            itemOrder = itemOrder + 1;
        }
        return itemOrder;
    }
    get accordionDetailStyles() {
        const styles = {
            ...{
                order: typeof this.openGridItemOrder === "number"
                    ? this.openGridItemOrder
                    : undefined,
            },
            ...(this.grid && {
                width: "100%",
            }),
        };
        return Object.fromEntries(Object.entries(styles).filter(([_, value]) => value !== undefined));
    }
    onClick(index) {
        if (this.open.includes(index)) {
            this.open = this.onlyOneAtATime
                ? []
                : this.open.filter((item) => item !== index);
        }
        else {
            this.open = this.onlyOneAtATime ? [index] : this.open.concat(index);
        }
    }
    trackByItem0(index, item) {
        return index;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: Accordion, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: Accordion, isStandalone: true, selector: "accordion", inputs: { grid: "grid", oneAtATime: "oneAtATime", gridRowWidth: "gridRowWidth", items: "items", builderBlock: "builderBlock", builderContext: "builderContext", builderComponents: "builderComponents", builderLinkComponent: "builderLinkComponent" }, ngImport: i0, template: `
    <div class="builder-accordion" [ngStyle]="accordionStyles">
      <ng-container
        *ngFor="let item of items; index as index; trackBy: trackByItem0"
      >
        <ng-container>
          <div
            [class]="node_0_div(item, index)"
            [ngStyle]="node_1_div(item, index)"
            [attr.data-index]="index"
            (click)="onClick(index)"
          >
            <blocks
              [blocks]="item.title"
              [path]="node_3_Blocks(item, index)"
              [parent]="builderBlock.id"
              [context]="builderContext"
              [registeredComponents]="builderComponents"
              [linkComponent]="builderLinkComponent"
            ></blocks>
          </div>
          <ng-container *ngIf="node_4_Show(item, index)">
            <div
              [class]="node_5_div(item, index)"
              [ngStyle]="accordionDetailStyles"
            >
              <blocks
                [blocks]="item.detail"
                [path]="node_6_Blocks(item, index)"
                [parent]="builderBlock.id"
                [context]="builderContext"
                [registeredComponents]="builderComponents"
                [linkComponent]="builderLinkComponent"
              ></blocks>
            </div>
          </ng-container>
        </ng-container>
      </ng-container>
    </div>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: Blocks, selector: "blocks", inputs: ["blocks", "parent", "path", "styleProp", "className", "context", "linkComponent", "registeredComponents"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: Accordion, decorators: [{
            type: Component,
            args: [{ selector: "accordion", template: `
    <div class="builder-accordion" [ngStyle]="accordionStyles">
      <ng-container
        *ngFor="let item of items; index as index; trackBy: trackByItem0"
      >
        <ng-container>
          <div
            [class]="node_0_div(item, index)"
            [ngStyle]="node_1_div(item, index)"
            [attr.data-index]="index"
            (click)="onClick(index)"
          >
            <blocks
              [blocks]="item.title"
              [path]="node_3_Blocks(item, index)"
              [parent]="builderBlock.id"
              [context]="builderContext"
              [registeredComponents]="builderComponents"
              [linkComponent]="builderLinkComponent"
            ></blocks>
          </div>
          <ng-container *ngIf="node_4_Show(item, index)">
            <div
              [class]="node_5_div(item, index)"
              [ngStyle]="accordionDetailStyles"
            >
              <blocks
                [blocks]="item.detail"
                [path]="node_6_Blocks(item, index)"
                [parent]="builderBlock.id"
                [context]="builderContext"
                [registeredComponents]="builderComponents"
                [linkComponent]="builderLinkComponent"
              ></blocks>
            </div>
          </ng-container>
        </ng-container>
      </ng-container>
    </div>
  `, standalone: true, imports: [CommonModule, Blocks], styles: [":host{display:contents}\n"] }]
        }], propDecorators: { grid: [{
                type: Input
            }], oneAtATime: [{
                type: Input
            }], gridRowWidth: [{
                type: Input
            }], items: [{
                type: Input
            }], builderBlock: [{
                type: Input
            }], builderContext: [{
                type: Input
            }], builderComponents: [{
                type: Input
            }], builderLinkComponent: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
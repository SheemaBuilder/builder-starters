import { TARGET } from '../../constants/target';
import { isBrowser } from '../../functions/is-browser';
import { isEditing } from '../../functions/is-editing';
import { FILTER_WITH_CUSTOM_TARGETING_SCRIPT, PERSONALIZATION_SCRIPT } from './helpers/inlined-fns';
export function checkShouldRenderVariants(variants, canTrack) {
    const hasVariants = variants && variants.length > 0;
    if (TARGET === 'reactNative')
        return false;
    if (!hasVariants)
        return false;
    if (!canTrack)
        return false;
    if (TARGET === 'vue' || TARGET === 'svelte')
        return true;
    if (isBrowser())
        return false;
    return true;
}
export function getBlocksToRender({ variants, previewingIndex, isHydrated, filteredVariants, fallbackBlocks }) {
    const fallback = {
        blocks: fallbackBlocks ?? [],
        path: 'this.children'
    };
    if (isHydrated && isEditing()) {
        // If editing a specific variant
        if (typeof previewingIndex === 'number' && previewingIndex < (variants?.length ?? 0)) {
            const variant = variants[previewingIndex];
            return {
                blocks: variant.blocks,
                path: `component.options.variants.${previewingIndex}.blocks`
            };
        }
        // Otherwise we're editing the default variant
        return fallback;
    }
    // If we're on the browser, check if there's a winning variant
    if (isBrowser()) {
        const winningVariant = filteredVariants?.[0];
        if (winningVariant) {
            return {
                blocks: winningVariant.blocks,
                path: `component.options.variants.${variants?.indexOf(winningVariant)}.blocks`
            };
        }
    }
    // If no winning variant or we are on the server, return the default variant
    return fallback;
}
export const getPersonalizationScript = (variants, blockId, locale) => {
    return `
  (function() {
    ${FILTER_WITH_CUSTOM_TARGETING_SCRIPT}
    ${PERSONALIZATION_SCRIPT}
    getPersonalizedVariant(${JSON.stringify(variants)}, "${blockId}"${locale ? `, "${locale}"` : ''})
  })();
  `;
};
export { filterWithCustomTargeting } from './helpers/inlined-fns';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9ibG9ja3MvcGVyc29uYWxpemF0aW9uLWNvbnRhaW5lci9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXZELE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBY3BHLE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxRQUFtRCxFQUFFLFFBQWlCO0lBQzlHLE1BQU0sV0FBVyxHQUFHLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNwRCxJQUFJLE1BQU0sS0FBSyxhQUFhO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDM0MsSUFBSSxDQUFDLFdBQVc7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUMvQixJQUFJLENBQUMsUUFBUTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQzVCLElBQUksTUFBTSxLQUFLLEtBQUssSUFBSSxNQUFNLEtBQUssUUFBUTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3pELElBQUksU0FBUyxFQUFFO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDOUIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBQ0QsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQ2hDLFFBQVEsRUFDUixlQUFlLEVBQ2YsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixjQUFjLEVBT2Y7SUFJQyxNQUFNLFFBQVEsR0FBRztRQUNmLE1BQU0sRUFBRSxjQUFjLElBQUksRUFBRTtRQUM1QixJQUFJLEVBQUUsZUFBZTtLQUN0QixDQUFDO0lBQ0YsSUFBSSxVQUFVLElBQUksU0FBUyxFQUFFLEVBQUU7UUFDN0IsZ0NBQWdDO1FBQ2hDLElBQUksT0FBTyxlQUFlLEtBQUssUUFBUSxJQUFJLGVBQWUsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDcEYsTUFBTSxPQUFPLEdBQUcsUUFBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzNDLE9BQU87Z0JBQ0wsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO2dCQUN0QixJQUFJLEVBQUUsOEJBQThCLGVBQWUsU0FBUzthQUM3RCxDQUFDO1NBQ0g7UUFDRCw4Q0FBOEM7UUFDOUMsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFFRCw4REFBOEQ7SUFDOUQsSUFBSSxTQUFTLEVBQUUsRUFBRTtRQUNmLE1BQU0sY0FBYyxHQUFHLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxjQUFjLEVBQUU7WUFDbEIsT0FBTztnQkFDTCxNQUFNLEVBQUUsY0FBYyxDQUFDLE1BQU07Z0JBQzdCLElBQUksRUFBRSw4QkFBOEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUMsU0FBUzthQUMvRSxDQUFDO1NBQ0g7S0FDRjtJQUVELDRFQUE0RTtJQUM1RSxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBQ0QsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxRQUFtRCxFQUFFLE9BQWUsRUFBRSxNQUFlLEVBQUUsRUFBRTtJQUNoSSxPQUFPOztNQUVILG1DQUFtQztNQUNuQyxzQkFBc0I7NkJBQ0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxPQUFPLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFOztHQUVoRyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBQ0YsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdUJBQXVCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUQVJHRVQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvdGFyZ2V0JztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9pcy1icm93c2VyJztcbmltcG9ydCB7IGlzRWRpdGluZyB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9pcy1lZGl0aW5nJztcbmltcG9ydCB0eXBlIHsgQnVpbGRlckJsb2NrIH0gZnJvbSAnLi4vLi4vdHlwZXMvYnVpbGRlci1ibG9jayc7XG5pbXBvcnQgeyBGSUxURVJfV0lUSF9DVVNUT01fVEFSR0VUSU5HX1NDUklQVCwgUEVSU09OQUxJWkFUSU9OX1NDUklQVCB9IGZyb20gJy4vaGVscGVycy9pbmxpbmVkLWZucyc7XG5pbXBvcnQgdHlwZSB7IFBlcnNvbmFsaXphdGlvbkNvbnRhaW5lclByb3BzIH0gZnJvbSAnLi9wZXJzb25hbGl6YXRpb24tY29udGFpbmVyLnR5cGVzJztcbmV4cG9ydCB0eXBlIFVzZXJBdHRyaWJ1dGVzID0ge1xuICBkYXRlPzogc3RyaW5nIHwgRGF0ZTtcbiAgdXJsUGF0aD86IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogYW55O1xufTtcbnR5cGUgUXVlcnlPcGVyYXRvciA9ICdpcycgfCAnaXNOb3QnIHwgJ2NvbnRhaW5zJyB8ICdzdGFydHNXaXRoJyB8ICdlbmRzV2l0aCcgfCAnZ3JlYXRlclRoYW4nIHwgJ2xlc3NUaGFuJyB8ICdncmVhdGVyVGhhbk9yRXF1YWxUbycgfCAnbGVzc1RoYW5PckVxdWFsVG8nO1xudHlwZSBRdWVyeVZhbHVlID0gc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IEFycmF5PHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4+O1xuZXhwb3J0IHR5cGUgUXVlcnkgPSB7XG4gIHByb3BlcnR5OiBzdHJpbmc7XG4gIG9wZXJhdG9yOiBRdWVyeU9wZXJhdG9yO1xuICB2YWx1ZTogUXVlcnlWYWx1ZTtcbn07XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tTaG91bGRSZW5kZXJWYXJpYW50cyh2YXJpYW50czogUGVyc29uYWxpemF0aW9uQ29udGFpbmVyUHJvcHNbJ3ZhcmlhbnRzJ10sIGNhblRyYWNrOiBib29sZWFuKSB7XG4gIGNvbnN0IGhhc1ZhcmlhbnRzID0gdmFyaWFudHMgJiYgdmFyaWFudHMubGVuZ3RoID4gMDtcbiAgaWYgKFRBUkdFVCA9PT0gJ3JlYWN0TmF0aXZlJykgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWhhc1ZhcmlhbnRzKSByZXR1cm4gZmFsc2U7XG4gIGlmICghY2FuVHJhY2spIHJldHVybiBmYWxzZTtcbiAgaWYgKFRBUkdFVCA9PT0gJ3Z1ZScgfHwgVEFSR0VUID09PSAnc3ZlbHRlJykgcmV0dXJuIHRydWU7XG4gIGlmIChpc0Jyb3dzZXIoKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRCbG9ja3NUb1JlbmRlcih7XG4gIHZhcmlhbnRzLFxuICBwcmV2aWV3aW5nSW5kZXgsXG4gIGlzSHlkcmF0ZWQsXG4gIGZpbHRlcmVkVmFyaWFudHMsXG4gIGZhbGxiYWNrQmxvY2tzXG59OiB7XG4gIHZhcmlhbnRzOiBQZXJzb25hbGl6YXRpb25Db250YWluZXJQcm9wc1sndmFyaWFudHMnXTtcbiAgcHJldmlld2luZ0luZGV4PzogbnVtYmVyIHwgbnVsbDtcbiAgaXNIeWRyYXRlZDogYm9vbGVhbjtcbiAgZmlsdGVyZWRWYXJpYW50czogUGVyc29uYWxpemF0aW9uQ29udGFpbmVyUHJvcHNbJ3ZhcmlhbnRzJ107XG4gIGZhbGxiYWNrQmxvY2tzPzogQnVpbGRlckJsb2NrW107XG59KToge1xuICBibG9ja3M6IEJ1aWxkZXJCbG9ja1tdO1xuICBwYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59IHtcbiAgY29uc3QgZmFsbGJhY2sgPSB7XG4gICAgYmxvY2tzOiBmYWxsYmFja0Jsb2NrcyA/PyBbXSxcbiAgICBwYXRoOiAndGhpcy5jaGlsZHJlbidcbiAgfTtcbiAgaWYgKGlzSHlkcmF0ZWQgJiYgaXNFZGl0aW5nKCkpIHtcbiAgICAvLyBJZiBlZGl0aW5nIGEgc3BlY2lmaWMgdmFyaWFudFxuICAgIGlmICh0eXBlb2YgcHJldmlld2luZ0luZGV4ID09PSAnbnVtYmVyJyAmJiBwcmV2aWV3aW5nSW5kZXggPCAodmFyaWFudHM/Lmxlbmd0aCA/PyAwKSkge1xuICAgICAgY29uc3QgdmFyaWFudCA9IHZhcmlhbnRzIVtwcmV2aWV3aW5nSW5kZXhdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmxvY2tzOiB2YXJpYW50LmJsb2NrcyxcbiAgICAgICAgcGF0aDogYGNvbXBvbmVudC5vcHRpb25zLnZhcmlhbnRzLiR7cHJldmlld2luZ0luZGV4fS5ibG9ja3NgXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2Ugd2UncmUgZWRpdGluZyB0aGUgZGVmYXVsdCB2YXJpYW50XG4gICAgcmV0dXJuIGZhbGxiYWNrO1xuICB9XG5cbiAgLy8gSWYgd2UncmUgb24gdGhlIGJyb3dzZXIsIGNoZWNrIGlmIHRoZXJlJ3MgYSB3aW5uaW5nIHZhcmlhbnRcbiAgaWYgKGlzQnJvd3NlcigpKSB7XG4gICAgY29uc3Qgd2lubmluZ1ZhcmlhbnQgPSBmaWx0ZXJlZFZhcmlhbnRzPy5bMF07XG4gICAgaWYgKHdpbm5pbmdWYXJpYW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBibG9ja3M6IHdpbm5pbmdWYXJpYW50LmJsb2NrcyxcbiAgICAgICAgcGF0aDogYGNvbXBvbmVudC5vcHRpb25zLnZhcmlhbnRzLiR7dmFyaWFudHM/LmluZGV4T2Yod2lubmluZ1ZhcmlhbnQpfS5ibG9ja3NgXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIG5vIHdpbm5pbmcgdmFyaWFudCBvciB3ZSBhcmUgb24gdGhlIHNlcnZlciwgcmV0dXJuIHRoZSBkZWZhdWx0IHZhcmlhbnRcbiAgcmV0dXJuIGZhbGxiYWNrO1xufVxuZXhwb3J0IGNvbnN0IGdldFBlcnNvbmFsaXphdGlvblNjcmlwdCA9ICh2YXJpYW50czogUGVyc29uYWxpemF0aW9uQ29udGFpbmVyUHJvcHNbJ3ZhcmlhbnRzJ10sIGJsb2NrSWQ6IHN0cmluZywgbG9jYWxlPzogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBgXG4gIChmdW5jdGlvbigpIHtcbiAgICAke0ZJTFRFUl9XSVRIX0NVU1RPTV9UQVJHRVRJTkdfU0NSSVBUfVxuICAgICR7UEVSU09OQUxJWkFUSU9OX1NDUklQVH1cbiAgICBnZXRQZXJzb25hbGl6ZWRWYXJpYW50KCR7SlNPTi5zdHJpbmdpZnkodmFyaWFudHMpfSwgXCIke2Jsb2NrSWR9XCIke2xvY2FsZSA/IGAsIFwiJHtsb2NhbGV9XCJgIDogJyd9KVxuICB9KSgpO1xuICBgO1xufTtcbmV4cG9ydCB7IGZpbHRlcldpdGhDdXN0b21UYXJnZXRpbmcgfSBmcm9tICcuL2hlbHBlcnMvaW5saW5lZC1mbnMnIl19
import { Component, Input } from "@angular/core";
import { CommonModule } from "@angular/common";
import Blocks from "../../components/blocks/blocks";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class Tabs {
    constructor() {
        this.activeTab = null;
        this.node_0_div = null;
        this.node_1_span = (tab, index) => `builder-tab-wrap ${this.activeTab === index ? "builder-tab-active" : ""}`;
        this.node_2_span = (tab, index) => ({
            ...(this.activeTab === index ? this.activeTabStyle : {}),
        });
        this.node_4_Blocks = (tab, index) => `tabs.${index}.label`;
        this.node_5_Show = null;
        this.node_6_Blocks = null;
        this.node_7_Blocks = null;
    }
    activeTabContent(active) {
        return this.tabs && this.tabs[active].content;
    }
    onClick(index) {
        if (index === this.activeTab && this.collapsible) {
            this.activeTab = -1;
        }
        else {
            this.activeTab = index;
        }
    }
    trackByTab0(index, tab) {
        return index;
    }
    ngOnInit() {
        this.activeTab = this.defaultActiveTab ? this.defaultActiveTab - 1 : 0;
        this.node_0_div = {
            display: "flex",
            flexDirection: "row",
            justifyContent: this.tabHeaderLayout || "flex-start",
            overflow: "auto",
        };
        this.node_5_Show = this.activeTabContent(this.activeTab);
        this.node_6_Blocks = `tabs.${this.activeTab}.content`;
        this.node_7_Blocks = this.activeTabContent(this.activeTab);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_div = {
                display: "flex",
                flexDirection: "row",
                justifyContent: this.tabHeaderLayout || "flex-start",
                overflow: "auto",
            };
            this.node_5_Show = this.activeTabContent(this.activeTab);
            this.node_6_Blocks = `tabs.${this.activeTab}.content`;
            this.node_7_Blocks = this.activeTabContent(this.activeTab);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: Tabs, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: Tabs, isStandalone: true, selector: "tabs", inputs: { tabHeaderLayout: "tabHeaderLayout", defaultActiveTab: "defaultActiveTab", tabs: "tabs", collapsible: "collapsible", activeTabStyle: "activeTabStyle", builderBlock: "builderBlock", builderContext: "builderContext", builderComponents: "builderComponents", builderLinkComponent: "builderLinkComponent" }, usesOnChanges: true, ngImport: i0, template: `
    <div>
      <div class="builder-tabs-wrap" [ngStyle]="node_0_div">
        <ng-container
          *ngFor="let tab of tabs; index as index; trackBy: trackByTab0"
        >
          <span
            [class]="node_1_span(tab, index)"
            [ngStyle]="node_2_span(tab, index)"
            (click)="onClick(index)"
          >
            <blocks
              [parent]="builderBlock.id"
              [path]="node_4_Blocks(tab, index)"
              [blocks]="tab.label"
              [context]="builderContext"
              [registeredComponents]="builderComponents"
              [linkComponent]="builderLinkComponent"
            ></blocks>
          </span>
        </ng-container>
      </div>
      <ng-container *ngIf="node_5_Show">
        <div>
          <blocks
            [parent]="builderBlock.id"
            [path]="node_6_Blocks"
            [blocks]="node_7_Blocks"
            [context]="builderContext"
            [registeredComponents]="builderComponents"
            [linkComponent]="builderLinkComponent"
          ></blocks>
        </div>
      </ng-container>
    </div>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: Blocks, selector: "blocks", inputs: ["blocks", "parent", "path", "styleProp", "className", "context", "linkComponent", "registeredComponents"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: Tabs, decorators: [{
            type: Component,
            args: [{ selector: "tabs", template: `
    <div>
      <div class="builder-tabs-wrap" [ngStyle]="node_0_div">
        <ng-container
          *ngFor="let tab of tabs; index as index; trackBy: trackByTab0"
        >
          <span
            [class]="node_1_span(tab, index)"
            [ngStyle]="node_2_span(tab, index)"
            (click)="onClick(index)"
          >
            <blocks
              [parent]="builderBlock.id"
              [path]="node_4_Blocks(tab, index)"
              [blocks]="tab.label"
              [context]="builderContext"
              [registeredComponents]="builderComponents"
              [linkComponent]="builderLinkComponent"
            ></blocks>
          </span>
        </ng-container>
      </div>
      <ng-container *ngIf="node_5_Show">
        <div>
          <blocks
            [parent]="builderBlock.id"
            [path]="node_6_Blocks"
            [blocks]="node_7_Blocks"
            [context]="builderContext"
            [registeredComponents]="builderComponents"
            [linkComponent]="builderLinkComponent"
          ></blocks>
        </div>
      </ng-container>
    </div>
  `, standalone: true, imports: [CommonModule, Blocks], styles: [":host{display:contents}\n"] }]
        }], propDecorators: { tabHeaderLayout: [{
                type: Input
            }], defaultActiveTab: [{
                type: Input
            }], tabs: [{
                type: Input
            }], collapsible: [{
                type: Input
            }], activeTabStyle: [{
                type: Input
            }], builderBlock: [{
                type: Input
            }], builderContext: [{
                type: Input
            }], builderComponents: [{
                type: Input
            }], builderLinkComponent: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import { isEditing } from "../../functions/is-editing";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class ImgComponent {
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.node_0_img = null;
        this.node_1_img = null;
        this.elRef0_state_0 = null;
    }
    ngOnInit() {
        this.node_0_img = {
            objectFit: this.backgroundSize || "cover",
            objectPosition: this.backgroundPosition || "center",
        };
        this.node_1_img = (isEditing() && this.imgSrc) || "default-key";
        this.elRef0_state_0 = {};
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0);
        this.setAttributes(this.elRef0?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_img = {
                objectFit: this.backgroundSize || "cover",
                objectPosition: this.backgroundPosition || "center",
            };
            this.node_1_img = (isEditing() && this.imgSrc) || "default-key";
            this.elRef0_state_0 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0, changes["elRef0_state_0"]?.currentValue);
            this.setAttributes(this.elRef0?.nativeElement, this.attributes, changes["attributes"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ImgComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ImgComponent, isStandalone: true, selector: "img-component", inputs: { backgroundSize: "backgroundSize", backgroundPosition: "backgroundPosition", imgSrc: "imgSrc", altText: "altText", image: "image", attributes: "attributes" }, viewQueries: [{ propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <img
      [ngStyle]="node_0_img"
      [attr.alt]="altText"
      [attr.src]="imgSrc || image"
      #elRef0
    />
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ImgComponent, decorators: [{
            type: Component,
            args: [{ selector: "img-component", template: `
    <img
      [ngStyle]="node_0_img"
      [attr.alt]="altText"
      [attr.src]="imgSrc || image"
      #elRef0
    />
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { backgroundSize: [{
                type: Input
            }], backgroundPosition: [{
                type: Input
            }], imgSrc: [{
                type: Input
            }], altText: [{
                type: Input
            }], image: [{
                type: Input
            }], attributes: [{
                type: Input
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,
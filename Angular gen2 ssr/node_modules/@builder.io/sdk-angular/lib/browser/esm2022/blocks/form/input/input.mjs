import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import { isEditing } from "../../../functions/is-editing";
import * as i0 from "@angular/core";
export default class FormInputComponent {
    setAttributes(el, value, changes) {
        if (!el) {
            return;
        }
        const target = typeof changes === "undefined" ? value : changes;
        Object.keys(target).forEach((key) => {
            if (key.startsWith("on")) {
                if (this._listenerFns.has(key)) {
                    this._listenerFns.get(key)();
                }
                this._listenerFns.set(key, this.renderer.listen(el, key.replace("on", "").toLowerCase(), target[key]));
            }
            else {
                this.renderer.setAttribute(el, key.toLowerCase(), target[key] ?? "");
            }
        });
    }
    constructor(renderer) {
        this.renderer = renderer;
        this._listenerFns = new Map();
        this.node_0_input = null;
        this.elRef0_state_0 = null;
    }
    ngOnInit() {
        this.node_0_input =
            isEditing() && this.defaultValue ? this.defaultValue : "default-key";
        this.elRef0_state_0 = {};
    }
    ngAfterViewInit() {
        this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0);
        this.setAttributes(this.elRef0?.nativeElement, this.attributes);
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_input =
                isEditing() && this.defaultValue ? this.defaultValue : "default-key";
            this.elRef0_state_0 = {};
            this.setAttributes(this.elRef0?.nativeElement, this.elRef0_state_0, changes["elRef0_state_0"]?.currentValue);
            this.setAttributes(this.elRef0?.nativeElement, this.attributes, changes["attributes"]?.currentValue);
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FormInputComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: FormInputComponent, isStandalone: true, selector: "form-input-component", inputs: { defaultValue: "defaultValue", attributes: "attributes", placeholder: "placeholder", type: "type", name: "name", value: "value", required: "required" }, viewQueries: [{ propertyName: "elRef0", first: true, predicate: ["elRef0"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <input
      [attr.placeholder]="placeholder"
      [attr.type]="type"
      [attr.name]="name"
      [attr.value]="value"
      [attr.defaultValue]="defaultValue"
      [attr.required]="required"
      #elRef0
    />
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FormInputComponent, decorators: [{
            type: Component,
            args: [{ selector: "form-input-component", template: `
    <input
      [attr.placeholder]="placeholder"
      [attr.type]="type"
      [attr.name]="name"
      [attr.value]="value"
      [attr.defaultValue]="defaultValue"
      [attr.required]="required"
      #elRef0
    />
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { defaultValue: [{
                type: Input
            }], attributes: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], type: [{
                type: Input
            }], name: [{
                type: Input
            }], value: [{
                type: Input
            }], required: [{
                type: Input
            }], elRef0: [{
                type: ViewChild,
                args: ["elRef0"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYmxvY2tzL2Zvcm0vaW5wdXQvaW5wdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBR1QsS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQWdCL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQTJCMUQsTUFBTSxDQUFDLE9BQU8sT0FBTyxrQkFBa0I7SUFlckMsYUFBYSxDQUFDLEVBQWUsRUFBRSxLQUFVLEVBQUUsT0FBYTtRQUN0RCxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1AsT0FBTztTQUNSO1FBQ0QsTUFBTSxNQUFNLEdBQUcsT0FBTyxPQUFPLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2xDLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFFLEVBQUUsQ0FBQztpQkFDL0I7Z0JBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQ25CLEdBQUcsRUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDbEIsRUFBRSxFQUNGLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUNuQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQ1osQ0FDRixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7YUFDdEU7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFvQixRQUFtQjtRQUFuQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBNUJ2QyxpQkFBWSxHQUFHLElBQUksR0FBRyxFQUFzQixDQUFDO1FBRTdDLGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLG1CQUFjLEdBQUcsSUFBSSxDQUFDO0lBeUJvQixDQUFDO0lBRTNDLFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWTtZQUNmLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUN2RSxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7WUFDakMsSUFBSSxDQUFDLFlBQVk7Z0JBQ2YsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxhQUFhLENBQ2hCLElBQUksQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUMxQixJQUFJLENBQUMsY0FBYyxFQUNuQixPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxZQUFZLENBQ3hDLENBQUM7WUFDRixJQUFJLENBQUMsYUFBYSxDQUNoQixJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFDMUIsSUFBSSxDQUFDLFVBQVUsRUFDZixPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUNwQyxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULEtBQUssTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUMzQyxFQUFFLEVBQUUsQ0FBQztTQUNOO0lBQ0gsQ0FBQzsrR0ExRWtCLGtCQUFrQjttR0FBbEIsa0JBQWtCLHlXQXJCM0I7Ozs7Ozs7Ozs7R0FVVCxrR0FTUyxZQUFZOzs0RkFFSCxrQkFBa0I7a0JBdkJ0QyxTQUFTOytCQUNFLHNCQUFzQixZQUN0Qjs7Ozs7Ozs7OztHQVVULGNBUVcsSUFBSSxXQUNQLENBQUMsWUFBWSxDQUFDO2dHQUdkLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLElBQUk7c0JBQVosS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBRWUsTUFBTTtzQkFBMUIsU0FBUzt1QkFBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBWaWV3Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMixcbiAgSW5wdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5cbi8qKlxuICogVGhpcyBpbXBvcnQgaXMgdXNlZCBieSB0aGUgU3ZlbHRlIFNESy4gRG8gbm90IHJlbW92ZS5cbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1JbnB1dFByb3BzIHtcbiAgdHlwZT86IHN0cmluZztcbiAgYXR0cmlidXRlcz86IGFueTtcbiAgbmFtZT86IHN0cmluZztcbiAgdmFsdWU/OiBzdHJpbmc7XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBkZWZhdWx0VmFsdWU/OiBzdHJpbmc7XG4gIHJlcXVpcmVkPzogYm9vbGVhbjtcbn1cblxuaW1wb3J0IHsgaXNFZGl0aW5nIH0gZnJvbSBcIi4uLy4uLy4uL2Z1bmN0aW9ucy9pcy1lZGl0aW5nXCI7XG5pbXBvcnQgeyBmaWx0ZXJBdHRycyB9IGZyb20gXCIuLi8uLi9oZWxwZXJzXCI7XG5pbXBvcnQgeyBzZXRBdHRycyB9IGZyb20gXCIuLi8uLi9oZWxwZXJzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJmb3JtLWlucHV0LWNvbXBvbmVudFwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxpbnB1dFxuICAgICAgW2F0dHIucGxhY2Vob2xkZXJdPVwicGxhY2Vob2xkZXJcIlxuICAgICAgW2F0dHIudHlwZV09XCJ0eXBlXCJcbiAgICAgIFthdHRyLm5hbWVdPVwibmFtZVwiXG4gICAgICBbYXR0ci52YWx1ZV09XCJ2YWx1ZVwiXG4gICAgICBbYXR0ci5kZWZhdWx0VmFsdWVdPVwiZGVmYXVsdFZhbHVlXCJcbiAgICAgIFthdHRyLnJlcXVpcmVkXT1cInJlcXVpcmVkXCJcbiAgICAgICNlbFJlZjBcbiAgICAvPlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xuICAgICAgfVxuICAgIGAsXG4gIF0sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxufSlcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1JbnB1dENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGRlZmF1bHRWYWx1ZSE6IEZvcm1JbnB1dFByb3BzW1wiZGVmYXVsdFZhbHVlXCJdO1xuICBASW5wdXQoKSBhdHRyaWJ1dGVzITogRm9ybUlucHV0UHJvcHNbXCJhdHRyaWJ1dGVzXCJdO1xuICBASW5wdXQoKSBwbGFjZWhvbGRlciE6IEZvcm1JbnB1dFByb3BzW1wicGxhY2Vob2xkZXJcIl07XG4gIEBJbnB1dCgpIHR5cGUhOiBGb3JtSW5wdXRQcm9wc1tcInR5cGVcIl07XG4gIEBJbnB1dCgpIG5hbWUhOiBGb3JtSW5wdXRQcm9wc1tcIm5hbWVcIl07XG4gIEBJbnB1dCgpIHZhbHVlITogRm9ybUlucHV0UHJvcHNbXCJ2YWx1ZVwiXTtcbiAgQElucHV0KCkgcmVxdWlyZWQhOiBGb3JtSW5wdXRQcm9wc1tcInJlcXVpcmVkXCJdO1xuXG4gIEBWaWV3Q2hpbGQoXCJlbFJlZjBcIikgZWxSZWYwITogRWxlbWVudFJlZjtcblxuICBfbGlzdGVuZXJGbnMgPSBuZXcgTWFwPHN0cmluZywgKCkgPT4gdm9pZD4oKTtcblxuICBub2RlXzBfaW5wdXQgPSBudWxsO1xuICBlbFJlZjBfc3RhdGVfMCA9IG51bGw7XG4gIHNldEF0dHJpYnV0ZXMoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYW55LCBjaGFuZ2VzPzogYW55KSB7XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSB0eXBlb2YgY2hhbmdlcyA9PT0gXCJ1bmRlZmluZWRcIiA/IHZhbHVlIDogY2hhbmdlcztcbiAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKFwib25cIikpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRm5zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuZ2V0KGtleSkhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJGbnMuc2V0KFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihcbiAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAga2V5LnJlcGxhY2UoXCJvblwiLCBcIlwiKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgdGFyZ2V0W2tleV1cbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbCwga2V5LnRvTG93ZXJDYXNlKCksIHRhcmdldFtrZXldID8/IFwiXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubm9kZV8wX2lucHV0ID1cbiAgICAgIGlzRWRpdGluZygpICYmIHRoaXMuZGVmYXVsdFZhbHVlID8gdGhpcy5kZWZhdWx0VmFsdWUgOiBcImRlZmF1bHQta2V5XCI7XG4gICAgdGhpcy5lbFJlZjBfc3RhdGVfMCA9IHt9O1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLmVsUmVmMD8ubmF0aXZlRWxlbWVudCwgdGhpcy5lbFJlZjBfc3RhdGVfMCk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMuZWxSZWYwPy5uYXRpdmVFbGVtZW50LCB0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLm5vZGVfMF9pbnB1dCA9XG4gICAgICAgIGlzRWRpdGluZygpICYmIHRoaXMuZGVmYXVsdFZhbHVlID8gdGhpcy5kZWZhdWx0VmFsdWUgOiBcImRlZmF1bHQta2V5XCI7XG4gICAgICB0aGlzLmVsUmVmMF9zdGF0ZV8wID0ge307XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXMoXG4gICAgICAgIHRoaXMuZWxSZWYwPy5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0aGlzLmVsUmVmMF9zdGF0ZV8wLFxuICAgICAgICBjaGFuZ2VzW1wiZWxSZWYwX3N0YXRlXzBcIl0/LmN1cnJlbnRWYWx1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhcbiAgICAgICAgdGhpcy5lbFJlZjA/Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyxcbiAgICAgICAgY2hhbmdlc1tcImF0dHJpYnV0ZXNcIl0/LmN1cnJlbnRWYWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGZuIG9mIHRoaXMuX2xpc3RlbmVyRm5zLnZhbHVlcygpKSB7XG4gICAgICBmbigpO1xuICAgIH1cbiAgfVxufVxuIl19
import { getBuilderSearchParams } from './get-builder-search-params/index';
import { fetchOneEntry } from './get-content/index';
/**
 * Given an `apiKey` and `url` (or `path` + `searchParams`), provides all props that `Content` needs to render Builder Content.
 *
 * @example
 * ```jsx
 * const builderProps = await fetchBuilderProps({
 *    apiKey: 'API_KEY',
 *    // provide `url`
 *    url: yourPageUrl,
 *    // OR provide `path` + `searchParams`
 *    path: yourPath,
 *    searchParams: yourSearchParams,
 * });
 *
 * return <Content {...builderProps} />;
 * ```
 */
export const fetchBuilderProps = async (_args) => {
    const urlPath = _args.path || _args.url?.pathname || _args.userAttributes?.urlPath;
    const getContentArgs = {
        ..._args,
        apiKey: _args.apiKey,
        model: _args.model || 'page',
        userAttributes: {
            ..._args.userAttributes,
            ...(urlPath ? {
                urlPath
            } : {})
        },
        options: getBuilderSearchParams(_args.searchParams || _args.url?.searchParams || _args.options)
    };
    return {
        apiKey: getContentArgs.apiKey,
        model: getContentArgs.model,
        content: await fetchOneEntry(getContentArgs)
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2gtYnVpbGRlci1wcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9mdW5jdGlvbnMvZmV0Y2gtYnVpbGRlci1wcm9wcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFtQ3BEOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxFQUFFLEtBQTZCLEVBQWdDLEVBQUU7SUFDckcsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQztJQUNuRixNQUFNLGNBQWMsR0FBc0I7UUFDeEMsR0FBRyxLQUFLO1FBQ1IsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1FBQ3BCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxJQUFJLE1BQU07UUFDNUIsY0FBYyxFQUFFO1lBQ2QsR0FBRyxLQUFLLENBQUMsY0FBYztZQUN2QixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDWixPQUFPO2FBQ1IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ1I7UUFDRCxPQUFPLEVBQUUsc0JBQXNCLENBQUMsS0FBSyxDQUFDLFlBQVksSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLFlBQVksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDO0tBQ2hHLENBQUM7SUFDRixPQUFPO1FBQ0wsTUFBTSxFQUFFLGNBQWMsQ0FBQyxNQUFNO1FBQzdCLEtBQUssRUFBRSxjQUFjLENBQUMsS0FBSztRQUMzQixPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUMsY0FBYyxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbnRlbnRWYXJpYW50c1BycHMgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRlbnQtdmFyaWFudHMvY29udGVudC12YXJpYW50cy50eXBlcyc7XG5pbXBvcnQgdHlwZSB7IERpY3Rpb25hcnkgfSBmcm9tICcuLi90eXBlcy90eXBlc2NyaXB0JztcbmltcG9ydCB7IGdldEJ1aWxkZXJTZWFyY2hQYXJhbXMgfSBmcm9tICcuL2dldC1idWlsZGVyLXNlYXJjaC1wYXJhbXMvaW5kZXgnO1xuaW1wb3J0IHsgZmV0Y2hPbmVFbnRyeSB9IGZyb20gJy4vZ2V0LWNvbnRlbnQvaW5kZXgnO1xuaW1wb3J0IHR5cGUgeyBHZXRDb250ZW50T3B0aW9ucyB9IGZyb20gJy4vZ2V0LWNvbnRlbnQvdHlwZXMnO1xudHlwZSBHZXRCdWlsZGVyUHJvcHNPcHRpb25zID0gKE9taXQ8R2V0Q29udGVudE9wdGlvbnMsICdtb2RlbCc+ICYge1xuICBtb2RlbD86IHN0cmluZztcbn0pICYgKHtcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IFVSTCBwYXRoLiBVc2VkIHRvIGRldGVybWluZSB0aGUgYHVybFBhdGhgIGZvciB0YXJnZXRpbmcgY29udGVudC5cbiAgICpcbiAgICogQ2Fubm90IGJlIHVzZWQgd2l0aCBgdXJsYC5cbiAgICovXG4gIHBhdGg6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgVVJMIHNlYXJjaCBwYXJhbXMuIFVzZWQgdG8gcGFyc2UgdGhlIGBzZWFyY2hQYXJhbXNgIGZvciB0YXJnZXRpbmcgY29udGVudC5cbiAgICpcbiAgICogQ2Fubm90IGJlIHVzZWQgd2l0aCBgdXJsYC5cbiAgICovXG4gIHNlYXJjaFBhcmFtcz86IFVSTFNlYXJjaFBhcmFtcyB8IERpY3Rpb25hcnk8c3RyaW5nIHwgc3RyaW5nW10+O1xuICB1cmw/OiB1bmRlZmluZWQ7XG59IHwge1xuICAvKipcbiAgICogVGhlIGN1cnJlbnQgVVJMLiBVc2VkIHRvIGRldGVybWluZSB0aGUgYHVybFBhdGhgIGZvciB0YXJnZXRpbmcgY29udGVudCBhbmRcbiAgICogdG8gcGFyc2UgdGhlIGBzZWFyY2hQYXJhbXNgIGZvciB0YXJnZXRpbmcgY29udGVudC5cbiAgICpcbiAgICogQ2Fubm90IGJlIHVzZWQgd2l0aCBgcGF0aGAgb3IgYHNlYXJjaFBhcmFtc2AuXG4gICAqL1xuICB1cmw6IFVSTDtcbiAgcGF0aD86IHVuZGVmaW5lZDtcbiAgc2VhcmNoUGFyYW1zPzogdW5kZWZpbmVkO1xufSB8IHtcbiAgdXJsPzogdW5kZWZpbmVkO1xuICBwYXRoPzogdW5kZWZpbmVkO1xuICBzZWFyY2hQYXJhbXM/OiB1bmRlZmluZWQ7XG59KTtcblxuLyoqXG4gKiBHaXZlbiBhbiBgYXBpS2V5YCBhbmQgYHVybGAgKG9yIGBwYXRoYCArIGBzZWFyY2hQYXJhbXNgKSwgcHJvdmlkZXMgYWxsIHByb3BzIHRoYXQgYENvbnRlbnRgIG5lZWRzIHRvIHJlbmRlciBCdWlsZGVyIENvbnRlbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzeFxuICogY29uc3QgYnVpbGRlclByb3BzID0gYXdhaXQgZmV0Y2hCdWlsZGVyUHJvcHMoe1xuICogICAgYXBpS2V5OiAnQVBJX0tFWScsXG4gKiAgICAvLyBwcm92aWRlIGB1cmxgXG4gKiAgICB1cmw6IHlvdXJQYWdlVXJsLFxuICogICAgLy8gT1IgcHJvdmlkZSBgcGF0aGAgKyBgc2VhcmNoUGFyYW1zYFxuICogICAgcGF0aDogeW91clBhdGgsXG4gKiAgICBzZWFyY2hQYXJhbXM6IHlvdXJTZWFyY2hQYXJhbXMsXG4gKiB9KTtcbiAqXG4gKiByZXR1cm4gPENvbnRlbnQgey4uLmJ1aWxkZXJQcm9wc30gLz47XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IGZldGNoQnVpbGRlclByb3BzID0gYXN5bmMgKF9hcmdzOiBHZXRCdWlsZGVyUHJvcHNPcHRpb25zKTogUHJvbWlzZTxDb250ZW50VmFyaWFudHNQcnBzPiA9PiB7XG4gIGNvbnN0IHVybFBhdGggPSBfYXJncy5wYXRoIHx8IF9hcmdzLnVybD8ucGF0aG5hbWUgfHwgX2FyZ3MudXNlckF0dHJpYnV0ZXM/LnVybFBhdGg7XG4gIGNvbnN0IGdldENvbnRlbnRBcmdzOiBHZXRDb250ZW50T3B0aW9ucyA9IHtcbiAgICAuLi5fYXJncyxcbiAgICBhcGlLZXk6IF9hcmdzLmFwaUtleSxcbiAgICBtb2RlbDogX2FyZ3MubW9kZWwgfHwgJ3BhZ2UnLFxuICAgIHVzZXJBdHRyaWJ1dGVzOiB7XG4gICAgICAuLi5fYXJncy51c2VyQXR0cmlidXRlcyxcbiAgICAgIC4uLih1cmxQYXRoID8ge1xuICAgICAgICB1cmxQYXRoXG4gICAgICB9IDoge30pXG4gICAgfSxcbiAgICBvcHRpb25zOiBnZXRCdWlsZGVyU2VhcmNoUGFyYW1zKF9hcmdzLnNlYXJjaFBhcmFtcyB8fCBfYXJncy51cmw/LnNlYXJjaFBhcmFtcyB8fCBfYXJncy5vcHRpb25zKVxuICB9O1xuICByZXR1cm4ge1xuICAgIGFwaUtleTogZ2V0Q29udGVudEFyZ3MuYXBpS2V5LFxuICAgIG1vZGVsOiBnZXRDb250ZW50QXJncy5tb2RlbCxcbiAgICBjb250ZW50OiBhd2FpdCBmZXRjaE9uZUVudHJ5KGdldENvbnRlbnRBcmdzKVxuICB9O1xufSJdfQ==
import { isBrowser } from '../is-browser';
import { isEditing } from '../is-editing';
import { getUserAttributes } from '../track/helpers';
export const getFunctionArguments = ({ builder, context, event, state }) => {
    return Object.entries({
        state,
        Builder: builder,
        // legacy
        builder,
        context,
        event
    });
};
export const getBuilderGlobals = () => ({
    isEditing: isEditing(),
    isBrowser: isBrowser(),
    isServer: !isBrowser(),
    getUserAttributes: () => getUserAttributes()
});
export const parseCode = (code, { isExpression = true }) => {
    // Be able to handle simple expressions like "state.foo" or "1 + 1"
    // as well as full blocks like "var foo = "bar"; return foo"
    const useReturn = 
    // we disable this for cases where we definitely don't want a return
    isExpression && !(code.includes(';') || code.includes(' return ') || code.trim().startsWith('return '));
    const useCode = useReturn ? `return (${code});` : code;
    return useCode;
};
export function flattenState({ rootState, localState, rootSetState }) {
    return new Proxy(rootState, {
        get: (target, prop) => {
            if (localState && prop in localState) {
                return localState[prop];
            }
            const val = target[prop];
            if (typeof val === 'object' && val !== null) {
                return flattenState({
                    rootState: val,
                    localState: undefined,
                    rootSetState: rootSetState ? subState => {
                        target[prop] = subState;
                        rootSetState(target);
                    } : undefined
                });
            }
            return val;
        },
        set: (target, prop, value) => {
            if (localState && prop in localState) {
                throw new Error('Writing to local state is not allowed as it is read-only.');
            }
            target[prop] = value;
            rootSetState?.(target);
            return true;
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9mdW5jdGlvbnMvZXZhbHVhdGUvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFrQnJELE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsRUFDbkMsT0FBTyxFQUNQLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUdOLEVBQUUsRUFBRTtJQUNILE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNwQixLQUFLO1FBQ0wsT0FBTyxFQUFFLE9BQU87UUFDaEIsU0FBUztRQUNULE9BQU87UUFDUCxPQUFPO1FBQ1AsS0FBSztLQUNOLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQW1CLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELFNBQVMsRUFBRSxTQUFTLEVBQUU7SUFDdEIsU0FBUyxFQUFFLFNBQVMsRUFBRTtJQUN0QixRQUFRLEVBQUUsQ0FBQyxTQUFTLEVBQUU7SUFDdEIsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLENBQUMsaUJBQWlCLEVBQUU7Q0FDN0MsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQ3RDLFlBQVksR0FBRyxJQUFJLEVBQ2lCLEVBQUUsRUFBRTtJQUN4QyxtRUFBbUU7SUFDbkUsNERBQTREO0lBQzVELE1BQU0sU0FBUztJQUNmLG9FQUFvRTtJQUNwRSxZQUFZLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDeEcsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDdkQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxVQUFVLFlBQVksQ0FBQyxFQUMzQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFLYjtJQUNDLE9BQU8sSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1FBQzFCLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNwQixJQUFJLFVBQVUsSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFO2dCQUNwQyxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QjtZQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO2dCQUMzQyxPQUFPLFlBQVksQ0FBQztvQkFDbEIsU0FBUyxFQUFFLEdBQUc7b0JBQ2QsVUFBVSxFQUFFLFNBQVM7b0JBQ3JCLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFO3dCQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDO3dCQUN4QixZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztpQkFDZCxDQUFDLENBQUM7YUFDSjtZQUNELE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztRQUNELEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxVQUFVLElBQUksSUFBSSxJQUFJLFVBQVUsRUFBRTtnQkFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFDO2FBQzlFO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNyQixZQUFZLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2QixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBCdWlsZGVyQ29udGV4dEludGVyZmFjZSwgQnVpbGRlclJlbmRlclN0YXRlIH0gZnJvbSAnLi4vLi4vY29udGV4dC90eXBlcyc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi9pcy1icm93c2VyJztcbmltcG9ydCB7IGlzRWRpdGluZyB9IGZyb20gJy4uL2lzLWVkaXRpbmcnO1xuaW1wb3J0IHsgZ2V0VXNlckF0dHJpYnV0ZXMgfSBmcm9tICcuLi90cmFjay9oZWxwZXJzJztcbmV4cG9ydCB0eXBlIEV2YWx1YXRvckFyZ3MgPSBPbWl0PEV4ZWN1dG9yQXJncywgJ2J1aWxkZXInIHwgJ2V2ZW50Jz4gJiB7XG4gIGV2ZW50PzogRXZlbnQ7XG4gIGlzRXhwcmVzc2lvbj86IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgQnVpbGRlckdsb2JhbHMgPSB7XG4gIGlzRWRpdGluZzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgaXNCcm93c2VyOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICBpc1NlcnZlcjogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgZ2V0VXNlckF0dHJpYnV0ZXM6IHR5cGVvZiBnZXRVc2VyQXR0cmlidXRlcztcbn07XG5leHBvcnQgdHlwZSBFeGVjdXRvckFyZ3MgPSBQaWNrPEJ1aWxkZXJDb250ZXh0SW50ZXJmYWNlLCAnbG9jYWxTdGF0ZScgfCAnY29udGV4dCcgfCAncm9vdFN0YXRlJyB8ICdyb290U2V0U3RhdGUnPiAmIHtcbiAgY29kZTogc3RyaW5nO1xuICBidWlsZGVyOiBCdWlsZGVyR2xvYmFscztcbiAgZXZlbnQ6IEV2ZW50IHwgdW5kZWZpbmVkO1xufTtcbmV4cG9ydCB0eXBlIEV4ZWN1dG9yID0gKGFyZ3M6IEV4ZWN1dG9yQXJncykgPT4gYW55O1xuZXhwb3J0IHR5cGUgRnVuY3Rpb25Bcmd1bWVudHMgPSBSZXR1cm5UeXBlPHR5cGVvZiBnZXRGdW5jdGlvbkFyZ3VtZW50cz47XG5leHBvcnQgY29uc3QgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSAoe1xuICBidWlsZGVyLFxuICBjb250ZXh0LFxuICBldmVudCxcbiAgc3RhdGVcbn06IFBpY2s8RXhlY3V0b3JBcmdzLCAnYnVpbGRlcicgfCAnY29udGV4dCcgfCAnZXZlbnQnPiAmIHtcbiAgc3RhdGU6IEJ1aWxkZXJSZW5kZXJTdGF0ZTtcbn0pID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHtcbiAgICBzdGF0ZSxcbiAgICBCdWlsZGVyOiBidWlsZGVyLFxuICAgIC8vIGxlZ2FjeVxuICAgIGJ1aWxkZXIsXG4gICAgY29udGV4dCxcbiAgICBldmVudFxuICB9KTtcbn07XG5leHBvcnQgY29uc3QgZ2V0QnVpbGRlckdsb2JhbHMgPSAoKTogQnVpbGRlckdsb2JhbHMgPT4gKHtcbiAgaXNFZGl0aW5nOiBpc0VkaXRpbmcoKSxcbiAgaXNCcm93c2VyOiBpc0Jyb3dzZXIoKSxcbiAgaXNTZXJ2ZXI6ICFpc0Jyb3dzZXIoKSxcbiAgZ2V0VXNlckF0dHJpYnV0ZXM6ICgpID0+IGdldFVzZXJBdHRyaWJ1dGVzKClcbn0pO1xuZXhwb3J0IGNvbnN0IHBhcnNlQ29kZSA9IChjb2RlOiBzdHJpbmcsIHtcbiAgaXNFeHByZXNzaW9uID0gdHJ1ZVxufTogUGljazxFdmFsdWF0b3JBcmdzLCAnaXNFeHByZXNzaW9uJz4pID0+IHtcbiAgLy8gQmUgYWJsZSB0byBoYW5kbGUgc2ltcGxlIGV4cHJlc3Npb25zIGxpa2UgXCJzdGF0ZS5mb29cIiBvciBcIjEgKyAxXCJcbiAgLy8gYXMgd2VsbCBhcyBmdWxsIGJsb2NrcyBsaWtlIFwidmFyIGZvbyA9IFwiYmFyXCI7IHJldHVybiBmb29cIlxuICBjb25zdCB1c2VSZXR1cm4gPVxuICAvLyB3ZSBkaXNhYmxlIHRoaXMgZm9yIGNhc2VzIHdoZXJlIHdlIGRlZmluaXRlbHkgZG9uJ3Qgd2FudCBhIHJldHVyblxuICBpc0V4cHJlc3Npb24gJiYgIShjb2RlLmluY2x1ZGVzKCc7JykgfHwgY29kZS5pbmNsdWRlcygnIHJldHVybiAnKSB8fCBjb2RlLnRyaW0oKS5zdGFydHNXaXRoKCdyZXR1cm4gJykpO1xuICBjb25zdCB1c2VDb2RlID0gdXNlUmV0dXJuID8gYHJldHVybiAoJHtjb2RlfSk7YCA6IGNvZGU7XG4gIHJldHVybiB1c2VDb2RlO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuU3RhdGUoe1xuICByb290U3RhdGUsXG4gIGxvY2FsU3RhdGUsXG4gIHJvb3RTZXRTdGF0ZVxufToge1xuICByb290U3RhdGU6IFJlY29yZDxzdHJpbmcgfCBzeW1ib2wsIGFueT47XG4gIGxvY2FsU3RhdGU6IFJlY29yZDxzdHJpbmcgfCBzeW1ib2wsIGFueT4gfCB1bmRlZmluZWQ7XG4gIHJvb3RTZXRTdGF0ZTogKChyb290U3RhdGU6IEJ1aWxkZXJSZW5kZXJTdGF0ZSkgPT4gdm9pZCkgfCB1bmRlZmluZWQ7XG59KTogQnVpbGRlclJlbmRlclN0YXRlIHtcbiAgcmV0dXJuIG5ldyBQcm94eShyb290U3RhdGUsIHtcbiAgICBnZXQ6ICh0YXJnZXQsIHByb3ApID0+IHtcbiAgICAgIGlmIChsb2NhbFN0YXRlICYmIHByb3AgaW4gbG9jYWxTdGF0ZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxTdGF0ZVtwcm9wXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbCA9IHRhcmdldFtwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZsYXR0ZW5TdGF0ZSh7XG4gICAgICAgICAgcm9vdFN0YXRlOiB2YWwsXG4gICAgICAgICAgbG9jYWxTdGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICAgIHJvb3RTZXRTdGF0ZTogcm9vdFNldFN0YXRlID8gc3ViU3RhdGUgPT4ge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gc3ViU3RhdGU7XG4gICAgICAgICAgICByb290U2V0U3RhdGUodGFyZ2V0KTtcbiAgICAgICAgICB9IDogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuICAgIHNldDogKHRhcmdldCwgcHJvcCwgdmFsdWUpID0+IHtcbiAgICAgIGlmIChsb2NhbFN0YXRlICYmIHByb3AgaW4gbG9jYWxTdGF0ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyaXRpbmcgdG8gbG9jYWwgc3RhdGUgaXMgbm90IGFsbG93ZWQgYXMgaXQgaXMgcmVhZC1vbmx5LicpO1xuICAgICAgfVxuICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICByb290U2V0U3RhdGU/Lih0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn0iXX0=
/**
 * Recursively traverses an object or array, invoking a callback on each value.
 *
 * @param {any} obj - The object or array to traverse. Can also handle primitives, null, or undefined.
 * @param {TraverseCallback} callback - The function to invoke on each value. Receives the current value
 * and an `update` function to modify the value in its parent container.
 * @param {any} [parent=null] - The parent object or array of the current value. Used internally.
 * @param {any} [key=null] - The key or index of the current value in its parent. Used internally.
 * @param {WeakSet} [visited=new WeakSet()] - Tracks visited objects to handle circular references. Used internally.
 *
 * @example
 * // Example: Doubling all numbers in an object
 * const obj = { a: 1, b: [2, 3, { c: 4 }] };
 * traverse(obj, (value, update) => {
 *   if (typeof value === 'number') {
 *     update(value * 2);
 *   }
 * });
 * console.log(obj); // { a: 2, b: [4, 6, { c: 8 }] }
 *
 * @example
 * // Example: Handling circular references
 * const obj = { a: 1 };
 * obj.self = obj;
 * traverse(obj, (value, update) => {
 *   if (typeof value === 'number') {
 *     update(value * 2);
 *   }
 * });
 * console.log(obj.a); // 2
 */
export function traverse(obj, callback, parent = null, key = null, visited = new WeakSet()) {
    if (obj == null || typeof obj !== 'object') {
        callback(obj, (newValue) => {
            if (parent !== null && key !== null) {
                parent[key] = newValue;
            }
        });
        return;
    }
    if (visited.has(obj)) {
        return;
    }
    visited.add(obj);
    if (Array.isArray(obj)) {
        obj.forEach((item, index) => {
            const update = (newValue) => {
                obj[index] = newValue;
            };
            callback(item, update);
            traverse(item, callback, obj, index, visited);
        });
    }
    else {
        Object.entries(obj).forEach(([key, value]) => {
            const update = (newValue) => {
                obj[key] = newValue;
            };
            callback(value, update);
            traverse(value, callback, obj, key, visited);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhdmVyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnVuY3Rpb25zL3RyYXZlcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Qkc7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQVEsRUFBRSxRQUEwQixFQUFFLFNBQWMsSUFBSSxFQUFFLE1BQVcsSUFBSSxFQUFFLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRTtJQUN6SCxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQzFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFhLEVBQUUsRUFBRTtZQUM5QixJQUFJLE1BQU0sS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtnQkFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQzthQUN4QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTztLQUNSO0lBQ0QsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLE9BQU87S0FDUjtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDMUIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxRQUFhLEVBQUUsRUFBRTtnQkFDL0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQztZQUN4QixDQUFDLENBQUM7WUFDRixRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7S0FDSjtTQUFNO1FBQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQzNDLE1BQU0sTUFBTSxHQUFHLENBQUMsUUFBYSxFQUFFLEVBQUU7Z0JBQy9CLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7WUFDdEIsQ0FBQyxDQUFDO1lBQ0YsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4QixRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBUcmF2ZXJzZUNhbGxiYWNrID0gKHZhbHVlOiBhbnksIHVwZGF0ZTogKG5ld1ZhbHVlOiBhbnkpID0+IHZvaWQpID0+IHZvaWQ7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2VzIGFuIG9iamVjdCBvciBhcnJheSwgaW52b2tpbmcgYSBjYWxsYmFjayBvbiBlYWNoIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBvYmogLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIHRyYXZlcnNlLiBDYW4gYWxzbyBoYW5kbGUgcHJpbWl0aXZlcywgbnVsbCwgb3IgdW5kZWZpbmVkLlxuICogQHBhcmFtIHtUcmF2ZXJzZUNhbGxiYWNrfSBjYWxsYmFjayAtIFRoZSBmdW5jdGlvbiB0byBpbnZva2Ugb24gZWFjaCB2YWx1ZS4gUmVjZWl2ZXMgdGhlIGN1cnJlbnQgdmFsdWVcbiAqIGFuZCBhbiBgdXBkYXRlYCBmdW5jdGlvbiB0byBtb2RpZnkgdGhlIHZhbHVlIGluIGl0cyBwYXJlbnQgY29udGFpbmVyLlxuICogQHBhcmFtIHthbnl9IFtwYXJlbnQ9bnVsbF0gLSBUaGUgcGFyZW50IG9iamVjdCBvciBhcnJheSBvZiB0aGUgY3VycmVudCB2YWx1ZS4gVXNlZCBpbnRlcm5hbGx5LlxuICogQHBhcmFtIHthbnl9IFtrZXk9bnVsbF0gLSBUaGUga2V5IG9yIGluZGV4IG9mIHRoZSBjdXJyZW50IHZhbHVlIGluIGl0cyBwYXJlbnQuIFVzZWQgaW50ZXJuYWxseS5cbiAqIEBwYXJhbSB7V2Vha1NldH0gW3Zpc2l0ZWQ9bmV3IFdlYWtTZXQoKV0gLSBUcmFja3MgdmlzaXRlZCBvYmplY3RzIHRvIGhhbmRsZSBjaXJjdWxhciByZWZlcmVuY2VzLiBVc2VkIGludGVybmFsbHkuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEV4YW1wbGU6IERvdWJsaW5nIGFsbCBudW1iZXJzIGluIGFuIG9iamVjdFxuICogY29uc3Qgb2JqID0geyBhOiAxLCBiOiBbMiwgMywgeyBjOiA0IH1dIH07XG4gKiB0cmF2ZXJzZShvYmosICh2YWx1ZSwgdXBkYXRlKSA9PiB7XG4gKiAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gKiAgICAgdXBkYXRlKHZhbHVlICogMik7XG4gKiAgIH1cbiAqIH0pO1xuICogY29uc29sZS5sb2cob2JqKTsgLy8geyBhOiAyLCBiOiBbNCwgNiwgeyBjOiA4IH1dIH1cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXhhbXBsZTogSGFuZGxpbmcgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICogY29uc3Qgb2JqID0geyBhOiAxIH07XG4gKiBvYmouc2VsZiA9IG9iajtcbiAqIHRyYXZlcnNlKG9iaiwgKHZhbHVlLCB1cGRhdGUpID0+IHtcbiAqICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAqICAgICB1cGRhdGUodmFsdWUgKiAyKTtcbiAqICAgfVxuICogfSk7XG4gKiBjb25zb2xlLmxvZyhvYmouYSk7IC8vIDJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYXZlcnNlKG9iajogYW55LCBjYWxsYmFjazogVHJhdmVyc2VDYWxsYmFjaywgcGFyZW50OiBhbnkgPSBudWxsLCBrZXk6IGFueSA9IG51bGwsIHZpc2l0ZWQgPSBuZXcgV2Vha1NldCgpKTogdm9pZCB7XG4gIGlmIChvYmogPT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIGNhbGxiYWNrKG9iaiwgKG5ld1ZhbHVlOiBhbnkpID0+IHtcbiAgICAgIGlmIChwYXJlbnQgIT09IG51bGwgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAgIHBhcmVudFtrZXldID0gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh2aXNpdGVkLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZpc2l0ZWQuYWRkKG9iaik7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBvYmouZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZSA9IChuZXdWYWx1ZTogYW55KSA9PiB7XG4gICAgICAgIG9ialtpbmRleF0gPSBuZXdWYWx1ZTtcbiAgICAgIH07XG4gICAgICBjYWxsYmFjayhpdGVtLCB1cGRhdGUpO1xuICAgICAgdHJhdmVyc2UoaXRlbSwgY2FsbGJhY2ssIG9iaiwgaW5kZXgsIHZpc2l0ZWQpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIE9iamVjdC5lbnRyaWVzKG9iaikuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBjb25zdCB1cGRhdGUgPSAobmV3VmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBvYmpba2V5XSA9IG5ld1ZhbHVlO1xuICAgICAgfTtcbiAgICAgIGNhbGxiYWNrKHZhbHVlLCB1cGRhdGUpO1xuICAgICAgdHJhdmVyc2UodmFsdWUsIGNhbGxiYWNrLCBvYmosIGtleSwgdmlzaXRlZCk7XG4gICAgfSk7XG4gIH1cbn0iXX0=
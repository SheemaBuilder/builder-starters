import { Component, Input } from "@angular/core";
import { CommonModule } from "@angular/common";
import { TARGET } from "../../constants/target";
import { handleABTestingSync } from "../../helpers/ab-tests";
import { getDefaultCanTrack } from "../../helpers/canTrack";
import ContentComponent from "../content/content";
import InlinedScript from "../inlined-script";
import InlinedStyles from "../inlined-styles";
import { checkShouldRenderVariants, getInitVariantsFnsScriptString, getUpdateCookieAndStylesScript, getVariants, } from "./helpers";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class ContentVariants {
    constructor() {
        this.TARGET = TARGET;
        this.getVariants = getVariants;
        this.shouldRenderVariants = null;
        this.node_0_InlinedScript = null;
    }
    get updateCookieAndStylesScriptStr() {
        return getUpdateCookieAndStylesScript(getVariants(this.content).map((value) => ({
            id: value.testVariationId,
            testRatio: value.testRatio,
        })), this.content?.id || "");
    }
    get hideVariantsStyleString() {
        return getVariants(this.content)
            .map((value) => `.variant-${value.testVariationId} { display: none; } `)
            .join("");
    }
    get defaultContent() {
        return this.shouldRenderVariants
            ? {
                ...this.content,
                testVariationId: this.content?.id,
            }
            : handleABTestingSync({
                item: this.content,
                canTrack: getDefaultCanTrack(this.canTrack),
            });
    }
    trackByVariant0(_, variant) {
        return variant.testVariationId;
    }
    ngOnInit() {
        this.shouldRenderVariants = checkShouldRenderVariants({
            canTrack: getDefaultCanTrack(this.canTrack),
            content: this.content,
        });
        this.node_0_InlinedScript = getInitVariantsFnsScriptString();
        if (typeof window !== "undefined") {
            /**
             * For Solid/Svelte: we unmount the non-winning variants post-hydration.
             */
        }
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.node_0_InlinedScript = getInitVariantsFnsScriptString();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ContentVariants, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ContentVariants, isStandalone: true, selector: "builder-content, content-variants", inputs: { canTrack: "canTrack", content: "content", isNestedRender: "isNestedRender", nonce: "nonce", apiHost: "apiHost", model: "model", data: "data", context: "context", apiKey: "apiKey", apiVersion: "apiVersion", customComponents: "customComponents", linkComponent: "linkComponent", locale: "locale", enrich: "enrich", blocksWrapper: "blocksWrapper", blocksWrapperProps: "blocksWrapperProps", contentWrapper: "contentWrapper", contentWrapperProps: "contentWrapperProps", trustedHosts: "trustedHosts" }, usesOnChanges: true, ngImport: i0, template: `
    <ng-container>
      <ng-container *ngIf="!isNestedRender && TARGET !== 'reactNative'">
        <inlined-script
          id="builderio-init-variants-fns"
          [scriptStr]="node_0_InlinedScript"
          [nonce]="nonce || ''"
        ></inlined-script>
      </ng-container>
      <ng-container *ngIf="shouldRenderVariants">
        <inlined-styles
          id="builderio-variants"
          [styles]="hideVariantsStyleString"
          [nonce]="nonce || ''"
        ></inlined-styles>
        <inlined-script
          id="builderio-variants-visibility"
          [scriptStr]="updateCookieAndStylesScriptStr"
          [nonce]="nonce || ''"
        ></inlined-script>
        <ng-container
          *ngFor="let variant of getVariants(content); trackBy: trackByVariant0"
        >
          <content-component
            [apiHost]="apiHost"
            [isNestedRender]="isNestedRender"
            [nonce]="nonce"
            [content]="variant"
            [showContent]="false"
            [model]="model"
            [data]="data"
            [context]="context"
            [apiKey]="apiKey"
            [apiVersion]="apiVersion"
            [customComponents]="customComponents"
            [linkComponent]="linkComponent"
            [canTrack]="canTrack"
            [locale]="locale"
            [enrich]="enrich"
            [isSsrAbTest]="shouldRenderVariants"
            [blocksWrapper]="blocksWrapper"
            [blocksWrapperProps]="blocksWrapperProps"
            [contentWrapper]="contentWrapper"
            [contentWrapperProps]="contentWrapperProps"
            [trustedHosts]="trustedHosts"
          ></content-component>
        </ng-container>
      </ng-container>
      <content-component
        [apiHost]="apiHost"
        [nonce]="nonce"
        [isNestedRender]="isNestedRender"
        [content]="defaultContent"
        [showContent]="true"
        [model]="model"
        [data]="data"
        [context]="context"
        [apiKey]="apiKey"
        [apiVersion]="apiVersion"
        [customComponents]="customComponents"
        [linkComponent]="linkComponent"
        [canTrack]="canTrack"
        [locale]="locale"
        [enrich]="enrich"
        [isSsrAbTest]="shouldRenderVariants"
        [blocksWrapper]="blocksWrapper"
        [blocksWrapperProps]="blocksWrapperProps"
        [contentWrapper]="contentWrapper"
        [contentWrapperProps]="contentWrapperProps"
        [trustedHosts]="trustedHosts"
      ></content-component>
    </ng-container>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: InlinedScript, selector: "inlined-script, InlinedScript", inputs: ["scriptStr", "id", "nonce"] }, { kind: "component", type: InlinedStyles, selector: "inlined-styles, InlinedStyles", inputs: ["styles", "id", "nonce"] }, { kind: "component", type: ContentComponent, selector: "content-component", inputs: ["apiKey", "context", "content", "customComponents", "data", "locale", "canTrack", "apiVersion", "blocksWrapper", "blocksWrapperProps", "nonce", "model", "apiHost", "enrich", "showContent", "contentWrapper", "contentWrapperProps", "trustedHosts", "isNestedRender", "isSsrAbTest", "linkComponent"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ContentVariants, decorators: [{
            type: Component,
            args: [{ selector: "builder-content, content-variants", template: `
    <ng-container>
      <ng-container *ngIf="!isNestedRender && TARGET !== 'reactNative'">
        <inlined-script
          id="builderio-init-variants-fns"
          [scriptStr]="node_0_InlinedScript"
          [nonce]="nonce || ''"
        ></inlined-script>
      </ng-container>
      <ng-container *ngIf="shouldRenderVariants">
        <inlined-styles
          id="builderio-variants"
          [styles]="hideVariantsStyleString"
          [nonce]="nonce || ''"
        ></inlined-styles>
        <inlined-script
          id="builderio-variants-visibility"
          [scriptStr]="updateCookieAndStylesScriptStr"
          [nonce]="nonce || ''"
        ></inlined-script>
        <ng-container
          *ngFor="let variant of getVariants(content); trackBy: trackByVariant0"
        >
          <content-component
            [apiHost]="apiHost"
            [isNestedRender]="isNestedRender"
            [nonce]="nonce"
            [content]="variant"
            [showContent]="false"
            [model]="model"
            [data]="data"
            [context]="context"
            [apiKey]="apiKey"
            [apiVersion]="apiVersion"
            [customComponents]="customComponents"
            [linkComponent]="linkComponent"
            [canTrack]="canTrack"
            [locale]="locale"
            [enrich]="enrich"
            [isSsrAbTest]="shouldRenderVariants"
            [blocksWrapper]="blocksWrapper"
            [blocksWrapperProps]="blocksWrapperProps"
            [contentWrapper]="contentWrapper"
            [contentWrapperProps]="contentWrapperProps"
            [trustedHosts]="trustedHosts"
          ></content-component>
        </ng-container>
      </ng-container>
      <content-component
        [apiHost]="apiHost"
        [nonce]="nonce"
        [isNestedRender]="isNestedRender"
        [content]="defaultContent"
        [showContent]="true"
        [model]="model"
        [data]="data"
        [context]="context"
        [apiKey]="apiKey"
        [apiVersion]="apiVersion"
        [customComponents]="customComponents"
        [linkComponent]="linkComponent"
        [canTrack]="canTrack"
        [locale]="locale"
        [enrich]="enrich"
        [isSsrAbTest]="shouldRenderVariants"
        [blocksWrapper]="blocksWrapper"
        [blocksWrapperProps]="blocksWrapperProps"
        [contentWrapper]="contentWrapper"
        [contentWrapperProps]="contentWrapperProps"
        [trustedHosts]="trustedHosts"
      ></content-component>
    </ng-container>
  `, standalone: true, imports: [CommonModule, InlinedScript, InlinedStyles, ContentComponent], styles: [":host{display:contents}\n"] }]
        }], propDecorators: { canTrack: [{
                type: Input
            }], content: [{
                type: Input
            }], isNestedRender: [{
                type: Input
            }], nonce: [{
                type: Input
            }], apiHost: [{
                type: Input
            }], model: [{
                type: Input
            }], data: [{
                type: Input
            }], context: [{
                type: Input
            }], apiKey: [{
                type: Input
            }], apiVersion: [{
                type: Input
            }], customComponents: [{
                type: Input
            }], linkComponent: [{
                type: Input
            }], locale: [{
                type: Input
            }], enrich: [{
                type: Input
            }], blocksWrapper: [{
                type: Input
            }], blocksWrapperProps: [{
                type: Input
            }], contentWrapper: [{
                type: Input
            }], contentWrapperProps: [{
                type: Input
            }], trustedHosts: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
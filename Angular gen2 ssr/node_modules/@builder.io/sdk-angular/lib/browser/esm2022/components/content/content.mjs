import { Component, Input } from "@angular/core";
import { CommonModule } from "@angular/common";
import { getDefaultRegisteredComponents } from "../../constants/builder-registered-components";
import { TARGET } from "../../constants/target";
import { evaluate } from "../../functions/evaluate/evaluate";
import { serializeIncludingFunctions } from "../../functions/register-component";
import { logger } from "../../helpers/logger";
import Blocks from "../blocks/blocks";
import { getUpdateVariantVisibilityScript } from "../content-variants/helpers";
import DynamicDiv from "../dynamic-div";
import InlinedScript from "../inlined-script";
import EnableEditor from "./components/enable-editor";
import ContentStyles from "./components/styles";
import { getContentInitialValue, getRootStateInitialValue, } from "./content.helpers";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class ContentComponent {
    constructor() {
        this.TARGET = TARGET;
        this.scriptStr = null;
        this.registeredComponents = null;
        this.builderContextSignal = null;
    }
    contentSetState(newRootState) {
        this.builderContextSignal.rootState = newRootState;
    }
    ngOnInit() {
        this.scriptStr = getUpdateVariantVisibilityScript({
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain
            variationId: this.content?.testVariationId,
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain
            contentId: this.content?.id,
        });
        this.registeredComponents = [
            ...getDefaultRegisteredComponents(),
            ...(this.customComponents || []),
        ].reduce((acc, { component, ...info }) => ({
            ...acc,
            [info.name]: {
                component: component,
                ...serializeIncludingFunctions(info),
            },
        }), {});
        this.builderContextSignal = {
            content: getContentInitialValue({
                content: this.content,
                data: this.data,
            }),
            localState: undefined,
            rootState: getRootStateInitialValue({
                content: this.content,
                data: this.data,
                locale: this.locale,
            }),
            rootSetState: this.contentSetState.bind(this),
            context: this.context || {},
            canTrack: this.canTrack,
            apiKey: this.apiKey,
            apiVersion: this.apiVersion,
            componentInfos: [
                ...getDefaultRegisteredComponents(),
                ...(this.customComponents || []),
            ].reduce((acc, { component: _, ...info }) => ({
                ...acc,
                [info.name]: serializeIncludingFunctions(info),
            }), {}),
            inheritedStyles: {},
            BlocksWrapper: this.blocksWrapper || DynamicDiv,
            BlocksWrapperProps: this.blocksWrapperProps || {},
            nonce: this.nonce || "",
            model: this.model,
        };
        if (!this.apiKey) {
            logger.error("No API key provided to `Content` component. This can cause issues. Please provide an API key using the `apiKey` prop.");
        }
        // run any dynamic JS code attached to content
        const jsCode = this.builderContextSignal.content?.data?.jsCode;
        if (jsCode) {
            evaluate({
                code: jsCode,
                context: this.context || {},
                localState: undefined,
                rootState: this.builderContextSignal.rootState,
                rootSetState: (newState) => {
                    this.builderContextSignal.rootSetState?.(newState);
                },
                isExpression: false,
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ContentComponent, isStandalone: true, selector: "content-component", inputs: { apiKey: "apiKey", context: "context", content: "content", customComponents: "customComponents", data: "data", locale: "locale", canTrack: "canTrack", apiVersion: "apiVersion", blocksWrapper: "blocksWrapper", blocksWrapperProps: "blocksWrapperProps", nonce: "nonce", model: "model", apiHost: "apiHost", enrich: "enrich", showContent: "showContent", contentWrapper: "contentWrapper", contentWrapperProps: "contentWrapperProps", trustedHosts: "trustedHosts", isNestedRender: "isNestedRender", isSsrAbTest: "isSsrAbTest", linkComponent: "linkComponent" }, host: { attributes: { "ngSkipHydration": "true" } }, ngImport: i0, template: `
    <enable-editor
      [apiHost]="apiHost"
      [nonce]="nonce"
      [content]="content"
      [data]="data"
      [model]="model"
      [context]="context"
      [apiKey]="apiKey"
      [canTrack]="canTrack"
      [locale]="locale"
      [enrich]="enrich"
      [showContent]="showContent"
      [builderContextSignal]="builderContextSignal"
      [contentWrapper]="contentWrapper"
      [contentWrapperProps]="contentWrapperProps"
      [trustedHosts]="trustedHosts"
      [isNestedRender]="isNestedRender"
    >
      <ng-container *ngIf="isSsrAbTest">
        <inlined-script
          id="builderio-variant-visibility"
          [scriptStr]="scriptStr"
          [nonce]="nonce || ''"
        ></inlined-script>
      </ng-container>
      <ng-container *ngIf="TARGET !== 'reactNative'">
        <content-styles
          [nonce]="nonce || ''"
          [isNestedRender]="isNestedRender"
          [contentId]="builderContextSignal.content?.id"
          [cssCode]="builderContextSignal.content?.data?.cssCode"
          [customFonts]="builderContextSignal.content?.data?.customFonts"
        ></content-styles>
      </ng-container>
      <blocks
        [blocks]="builderContextSignal.content?.data?.blocks"
        [context]="builderContextSignal"
        [registeredComponents]="registeredComponents"
        [linkComponent]="linkComponent"
      ></blocks>
    </enable-editor>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: EnableEditor, selector: "enable-editor", inputs: ["isNestedRender", "locale", "enrich", "trustedHosts", "model", "apiKey", "builderContextSignal", "canTrack", "apiHost", "content", "context", "data", "showContent", "contentWrapper", "contentWrapperProps"] }, { kind: "component", type: InlinedScript, selector: "inlined-script, InlinedScript", inputs: ["scriptStr", "id", "nonce"] }, { kind: "component", type: ContentStyles, selector: "content-styles", inputs: ["cssCode", "contentId", "customFonts", "isNestedRender", "nonce"] }, { kind: "component", type: Blocks, selector: "blocks", inputs: ["blocks", "parent", "path", "styleProp", "className", "context", "linkComponent", "registeredComponents"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ContentComponent, decorators: [{
            type: Component,
            args: [{ host: { ngSkipHydration: "true" }, selector: "content-component", template: `
    <enable-editor
      [apiHost]="apiHost"
      [nonce]="nonce"
      [content]="content"
      [data]="data"
      [model]="model"
      [context]="context"
      [apiKey]="apiKey"
      [canTrack]="canTrack"
      [locale]="locale"
      [enrich]="enrich"
      [showContent]="showContent"
      [builderContextSignal]="builderContextSignal"
      [contentWrapper]="contentWrapper"
      [contentWrapperProps]="contentWrapperProps"
      [trustedHosts]="trustedHosts"
      [isNestedRender]="isNestedRender"
    >
      <ng-container *ngIf="isSsrAbTest">
        <inlined-script
          id="builderio-variant-visibility"
          [scriptStr]="scriptStr"
          [nonce]="nonce || ''"
        ></inlined-script>
      </ng-container>
      <ng-container *ngIf="TARGET !== 'reactNative'">
        <content-styles
          [nonce]="nonce || ''"
          [isNestedRender]="isNestedRender"
          [contentId]="builderContextSignal.content?.id"
          [cssCode]="builderContextSignal.content?.data?.cssCode"
          [customFonts]="builderContextSignal.content?.data?.customFonts"
        ></content-styles>
      </ng-container>
      <blocks
        [blocks]="builderContextSignal.content?.data?.blocks"
        [context]="builderContextSignal"
        [registeredComponents]="registeredComponents"
        [linkComponent]="linkComponent"
      ></blocks>
    </enable-editor>
  `, standalone: true, imports: [CommonModule, EnableEditor, InlinedScript, ContentStyles, Blocks], styles: [":host{display:contents}\n"] }]
        }], propDecorators: { apiKey: [{
                type: Input
            }], context: [{
                type: Input
            }], content: [{
                type: Input
            }], customComponents: [{
                type: Input
            }], data: [{
                type: Input
            }], locale: [{
                type: Input
            }], canTrack: [{
                type: Input
            }], apiVersion: [{
                type: Input
            }], blocksWrapper: [{
                type: Input
            }], blocksWrapperProps: [{
                type: Input
            }], nonce: [{
                type: Input
            }], model: [{
                type: Input
            }], apiHost: [{
                type: Input
            }], enrich: [{
                type: Input
            }], showContent: [{
                type: Input
            }], contentWrapper: [{
                type: Input
            }], contentWrapperProps: [{
                type: Input
            }], trustedHosts: [{
                type: Input
            }], isNestedRender: [{
                type: Input
            }], isSsrAbTest: [{
                type: Input
            }], linkComponent: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NvbnRlbnQvY29udGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDL0YsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBT2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHOUMsT0FBTyxNQUFNLE1BQU0sa0JBQWtCLENBQUM7QUFDdEMsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDL0UsT0FBTyxVQUFVLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxhQUFhLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxZQUFZLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxhQUFhLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxFQUNMLHNCQUFzQixFQUN0Qix3QkFBd0IsR0FDekIsTUFBTSxtQkFBbUIsQ0FBQzs7O0FBNEQzQixNQUFNLENBQUMsT0FBTyxPQUFPLGdCQUFnQjtJQXhEckM7UUF5REUsV0FBTSxHQUFHLE1BQU0sQ0FBQztRQXdCaEIsY0FBUyxHQUFHLElBQUksQ0FBQztRQUlqQix5QkFBb0IsR0FBRyxJQUFJLENBQUM7UUFDNUIseUJBQW9CLEdBQTRCLElBQUksQ0FBQztLQTZFdEQ7SUFqRkMsZUFBZSxDQUFDLFlBQWdDO1FB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bUJBQW1CO3NCQUEzQixLQUFLO2dCQUNHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csY0FBYztzQkFBdEIsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLGFBQWE7c0JBQXJCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuaW1wb3J0IHsgZ2V0RGVmYXVsdFJlZ2lzdGVyZWRDb21wb25lbnRzIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50cy9idWlsZGVyLXJlZ2lzdGVyZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgVEFSR0VUIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50cy90YXJnZXRcIjtcbmltcG9ydCBDb21wb25lbnRzQ29udGV4dCBmcm9tIFwiLi4vLi4vY29udGV4dC9jb21wb25lbnRzLmNvbnRleHRcIjtcbmltcG9ydCB0eXBlIHtcbiAgQnVpbGRlckNvbnRleHRJbnRlcmZhY2UsXG4gIEJ1aWxkZXJSZW5kZXJTdGF0ZSxcbiAgUmVnaXN0ZXJlZENvbXBvbmVudHMsXG59IGZyb20gXCIuLi8uLi9jb250ZXh0L3R5cGVzXCI7XG5pbXBvcnQgeyBldmFsdWF0ZSB9IGZyb20gXCIuLi8uLi9mdW5jdGlvbnMvZXZhbHVhdGUvZXZhbHVhdGVcIjtcbmltcG9ydCB7IHNlcmlhbGl6ZUluY2x1ZGluZ0Z1bmN0aW9ucyB9IGZyb20gXCIuLi8uLi9mdW5jdGlvbnMvcmVnaXN0ZXItY29tcG9uZW50XCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9sb2dnZXJcIjtcbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50SW5mbyB9IGZyb20gXCIuLi8uLi90eXBlcy9jb21wb25lbnRzXCI7XG5pbXBvcnQgdHlwZSB7IERpY3Rpb25hcnkgfSBmcm9tIFwiLi4vLi4vdHlwZXMvdHlwZXNjcmlwdFwiO1xuaW1wb3J0IEJsb2NrcyBmcm9tIFwiLi4vYmxvY2tzL2Jsb2Nrc1wiO1xuaW1wb3J0IHsgZ2V0VXBkYXRlVmFyaWFudFZpc2liaWxpdHlTY3JpcHQgfSBmcm9tIFwiLi4vY29udGVudC12YXJpYW50cy9oZWxwZXJzXCI7XG5pbXBvcnQgRHluYW1pY0RpdiBmcm9tIFwiLi4vZHluYW1pYy1kaXZcIjtcbmltcG9ydCBJbmxpbmVkU2NyaXB0IGZyb20gXCIuLi9pbmxpbmVkLXNjcmlwdFwiO1xuaW1wb3J0IEVuYWJsZUVkaXRvciBmcm9tIFwiLi9jb21wb25lbnRzL2VuYWJsZS1lZGl0b3JcIjtcbmltcG9ydCBDb250ZW50U3R5bGVzIGZyb20gXCIuL2NvbXBvbmVudHMvc3R5bGVzXCI7XG5pbXBvcnQge1xuICBnZXRDb250ZW50SW5pdGlhbFZhbHVlLFxuICBnZXRSb290U3RhdGVJbml0aWFsVmFsdWUsXG59IGZyb20gXCIuL2NvbnRlbnQuaGVscGVyc1wiO1xuaW1wb3J0IHR5cGUgeyBDb250ZW50UHJvcHMgfSBmcm9tIFwiLi9jb250ZW50LnR5cGVzXCI7XG5pbXBvcnQgeyB3cmFwQ29tcG9uZW50UmVmIH0gZnJvbSBcIi4vd3JhcC1jb21wb25lbnQtcmVmXCI7XG5cbkBDb21wb25lbnQoe1xuXHRob3N0OiB7IG5nU2tpcEh5ZHJhdGlvbjogXCJ0cnVlXCIgfSxcbiAgc2VsZWN0b3I6IFwiY29udGVudC1jb21wb25lbnRcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZW5hYmxlLWVkaXRvclxuICAgICAgW2FwaUhvc3RdPVwiYXBpSG9zdFwiXG4gICAgICBbbm9uY2VdPVwibm9uY2VcIlxuICAgICAgW2NvbnRlbnRdPVwiY29udGVudFwiXG4gICAgICBbZGF0YV09XCJkYXRhXCJcbiAgICAgIFttb2RlbF09XCJtb2RlbFwiXG4gICAgICBbY29udGV4dF09XCJjb250ZXh0XCJcbiAgICAgIFthcGlLZXldPVwiYXBpS2V5XCJcbiAgICAgIFtjYW5UcmFja109XCJjYW5UcmFja1wiXG4gICAgICBbbG9jYWxlXT1cImxvY2FsZVwiXG4gICAgICBbZW5yaWNoXT1cImVucmljaFwiXG4gICAgICBbc2hvd0NvbnRlbnRdPVwic2hvd0NvbnRlbnRcIlxuICAgICAgW2J1aWxkZXJDb250ZXh0U2lnbmFsXT1cImJ1aWxkZXJDb250ZXh0U2lnbmFsXCJcbiAgICAgIFtjb250ZW50V3JhcHBlcl09XCJjb250ZW50V3JhcHBlclwiXG4gICAgICBbY29udGVudFdyYXBwZXJQcm9wc109XCJjb250ZW50V3JhcHBlclByb3BzXCJcbiAgICAgIFt0cnVzdGVkSG9zdHNdPVwidHJ1c3RlZEhvc3RzXCJcbiAgICAgIFtpc05lc3RlZFJlbmRlcl09XCJpc05lc3RlZFJlbmRlclwiXG4gICAgPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImlzU3NyQWJUZXN0XCI+XG4gICAgICAgIDxpbmxpbmVkLXNjcmlwdFxuICAgICAgICAgIGlkPVwiYnVpbGRlcmlvLXZhcmlhbnQtdmlzaWJpbGl0eVwiXG4gICAgICAgICAgW3NjcmlwdFN0cl09XCJzY3JpcHRTdHJcIlxuICAgICAgICAgIFtub25jZV09XCJub25jZSB8fCAnJ1wiXG4gICAgICAgID48L2lubGluZWQtc2NyaXB0PlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiVEFSR0VUICE9PSAncmVhY3ROYXRpdmUnXCI+XG4gICAgICAgIDxjb250ZW50LXN0eWxlc1xuICAgICAgICAgIFtub25jZV09XCJub25jZSB8fCAnJ1wiXG4gICAgICAgICAgW2lzTmVzdGVkUmVuZGVyXT1cImlzTmVzdGVkUmVuZGVyXCJcbiAgICAgICAgICBbY29udGVudElkXT1cImJ1aWxkZXJDb250ZXh0U2lnbmFsLmNvbnRlbnQ/LmlkXCJcbiAgICAgICAgICBbY3NzQ29kZV09XCJidWlsZGVyQ29udGV4dFNpZ25hbC5jb250ZW50Py5kYXRhPy5jc3NDb2RlXCJcbiAgICAgICAgICBbY3VzdG9tRm9udHNdPVwiYnVpbGRlckNvbnRleHRTaWduYWwuY29udGVudD8uZGF0YT8uY3VzdG9tRm9udHNcIlxuICAgICAgICA+PC9jb250ZW50LXN0eWxlcz5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPGJsb2Nrc1xuICAgICAgICBbYmxvY2tzXT1cImJ1aWxkZXJDb250ZXh0U2lnbmFsLmNvbnRlbnQ/LmRhdGE/LmJsb2Nrc1wiXG4gICAgICAgIFtjb250ZXh0XT1cImJ1aWxkZXJDb250ZXh0U2lnbmFsXCJcbiAgICAgICAgW3JlZ2lzdGVyZWRDb21wb25lbnRzXT1cInJlZ2lzdGVyZWRDb21wb25lbnRzXCJcbiAgICAgICAgW2xpbmtDb21wb25lbnRdPVwibGlua0NvbXBvbmVudFwiXG4gICAgICA+PC9ibG9ja3M+XG4gICAgPC9lbmFibGUtZWRpdG9yPlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xuICAgICAgfVxuICAgIGAsXG4gIF0sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEVuYWJsZUVkaXRvciwgSW5saW5lZFNjcmlwdCwgQ29udGVudFN0eWxlcywgQmxvY2tzXSxcbn0pXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZW50Q29tcG9uZW50IHtcbiAgVEFSR0VUID0gVEFSR0VUO1xuXG4gIEBJbnB1dCgpIGFwaUtleSE6IENvbnRlbnRQcm9wc1tcImFwaUtleVwiXTtcbiAgQElucHV0KCkgY29udGV4dCE6IENvbnRlbnRQcm9wc1tcImNvbnRleHRcIl07XG4gIEBJbnB1dCgpIGNvbnRlbnQhOiBDb250ZW50UHJvcHNbXCJjb250ZW50XCJdO1xuICBASW5wdXQoKSBjdXN0b21Db21wb25lbnRzITogQ29udGVudFByb3BzW1wiY3VzdG9tQ29tcG9uZW50c1wiXTtcbiAgQElucHV0KCkgZGF0YSE6IENvbnRlbnRQcm9wc1tcImRhdGFcIl07XG4gIEBJbnB1dCgpIGxvY2FsZSE6IENvbnRlbnRQcm9wc1tcImxvY2FsZVwiXTtcbiAgQElucHV0KCkgY2FuVHJhY2shOiBDb250ZW50UHJvcHNbXCJjYW5UcmFja1wiXTtcbiAgQElucHV0KCkgYXBpVmVyc2lvbiE6IENvbnRlbnRQcm9wc1tcImFwaVZlcnNpb25cIl07XG4gIEBJbnB1dCgpIGJsb2Nrc1dyYXBwZXIhOiBDb250ZW50UHJvcHNbXCJibG9ja3NXcmFwcGVyXCJdO1xuICBASW5wdXQoKSBibG9ja3NXcmFwcGVyUHJvcHMhOiBDb250ZW50UHJvcHNbXCJibG9ja3NXcmFwcGVyUHJvcHNcIl07XG4gIEBJbnB1dCgpIG5vbmNlITogQ29udGVudFByb3BzW1wibm9uY2VcIl07XG4gIEBJbnB1dCgpIG1vZGVsITogQ29udGVudFByb3BzW1wibW9kZWxcIl07XG4gIEBJbnB1dCgpIGFwaUhvc3QhOiBDb250ZW50UHJvcHNbXCJhcGlIb3N0XCJdO1xuICBASW5wdXQoKSBlbnJpY2ghOiBDb250ZW50UHJvcHNbXCJlbnJpY2hcIl07XG4gIEBJbnB1dCgpIHNob3dDb250ZW50ITogQ29udGVudFByb3BzW1wic2hvd0NvbnRlbnRcIl07XG4gIEBJbnB1dCgpIGNvbnRlbnRXcmFwcGVyITogQ29udGVudFByb3BzW1wiY29udGVudFdyYXBwZXJcIl07XG4gIEBJbnB1dCgpIGNvbnRlbnRXcmFwcGVyUHJvcHMhOiBDb250ZW50UHJvcHNbXCJjb250ZW50V3JhcHBlclByb3BzXCJdO1xuICBASW5wdXQoKSB0cnVzdGVkSG9zdHMhOiBDb250ZW50UHJvcHNbXCJ0cnVzdGVkSG9zdHNcIl07XG4gIEBJbnB1dCgpIGlzTmVzdGVkUmVuZGVyITogQ29udGVudFByb3BzW1wiaXNOZXN0ZWRSZW5kZXJcIl07XG4gIEBJbnB1dCgpIGlzU3NyQWJUZXN0ITogQ29udGVudFByb3BzW1wiaXNTc3JBYlRlc3RcIl07XG4gIEBJbnB1dCgpIGxpbmtDb21wb25lbnQhOiBDb250ZW50UHJvcHNbXCJsaW5rQ29tcG9uZW50XCJdO1xuXG4gIHNjcmlwdFN0ciA9IG51bGw7XG4gIGNvbnRlbnRTZXRTdGF0ZShuZXdSb290U3RhdGU6IEJ1aWxkZXJSZW5kZXJTdGF0ZSkge1xuICAgIHRoaXMuYnVpbGRlckNvbnRleHRTaWduYWwucm9vdFN0YXRlID0gbmV3Um9vdFN0YXRlO1xuICB9XG4gIHJlZ2lzdGVyZWRDb21wb25lbnRzID0gbnVsbDtcbiAgYnVpbGRlckNvbnRleHRTaWduYWw6IEJ1aWxkZXJDb250ZXh0SW50ZXJmYWNlID0gbnVsbDtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNjcmlwdFN0ciA9IGdldFVwZGF0ZVZhcmlhbnRWaXNpYmlsaXR5U2NyaXB0KHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0ZWQtb3B0aW9uYWwtY2hhaW5cbiAgICAgIHZhcmlhdGlvbklkOiB0aGlzLmNvbnRlbnQ/LnRlc3RWYXJpYXRpb25JZCEsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvbiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGVkLW9wdGlvbmFsLWNoYWluXG4gICAgICBjb250ZW50SWQ6IHRoaXMuY29udGVudD8uaWQhLFxuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlcmVkQ29tcG9uZW50cyA9IFtcbiAgICAgIC4uLmdldERlZmF1bHRSZWdpc3RlcmVkQ29tcG9uZW50cygpLFxuICAgICAgLi4uKHRoaXMuY3VzdG9tQ29tcG9uZW50cyB8fCBbXSksXG4gICAgXS5yZWR1Y2U8UmVnaXN0ZXJlZENvbXBvbmVudHM+KFxuICAgICAgKGFjYywgeyBjb21wb25lbnQsIC4uLmluZm8gfSkgPT4gKHtcbiAgICAgICAgLi4uYWNjLFxuICAgICAgICBbaW5mby5uYW1lXToge1xuICAgICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgICAgICAgIC4uLnNlcmlhbGl6ZUluY2x1ZGluZ0Z1bmN0aW9ucyhpbmZvKSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgICAge31cbiAgICApO1xuXG4gICAgdGhpcy5idWlsZGVyQ29udGV4dFNpZ25hbCA9IHtcbiAgICAgIGNvbnRlbnQ6IGdldENvbnRlbnRJbml0aWFsVmFsdWUoe1xuICAgICAgICBjb250ZW50OiB0aGlzLmNvbnRlbnQsXG4gICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgIH0pLFxuICAgICAgbG9jYWxTdGF0ZTogdW5kZWZpbmVkLFxuICAgICAgcm9vdFN0YXRlOiBnZXRSb290U3RhdGVJbml0aWFsVmFsdWUoe1xuICAgICAgICBjb250ZW50OiB0aGlzLmNvbnRlbnQsXG4gICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZSxcbiAgICAgIH0pLFxuICAgICAgcm9vdFNldFN0YXRlOiB0aGlzLmNvbnRlbnRTZXRTdGF0ZS5iaW5kKHRoaXMpLFxuICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0IHx8IHt9LFxuICAgICAgY2FuVHJhY2s6IHRoaXMuY2FuVHJhY2ssXG4gICAgICBhcGlLZXk6IHRoaXMuYXBpS2V5LFxuICAgICAgYXBpVmVyc2lvbjogdGhpcy5hcGlWZXJzaW9uLFxuICAgICAgY29tcG9uZW50SW5mb3M6IFtcbiAgICAgICAgLi4uZ2V0RGVmYXVsdFJlZ2lzdGVyZWRDb21wb25lbnRzKCksXG4gICAgICAgIC4uLih0aGlzLmN1c3RvbUNvbXBvbmVudHMgfHwgW10pLFxuICAgICAgXS5yZWR1Y2U8RGljdGlvbmFyeTxDb21wb25lbnRJbmZvPj4oXG4gICAgICAgIChhY2MsIHsgY29tcG9uZW50OiBfLCAuLi5pbmZvIH0pID0+ICh7XG4gICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgIFtpbmZvLm5hbWVdOiBzZXJpYWxpemVJbmNsdWRpbmdGdW5jdGlvbnMoaW5mbyksXG4gICAgICAgIH0pLFxuICAgICAgICB7fVxuICAgICAgKSxcbiAgICAgIGluaGVyaXRlZFN0eWxlczoge30sXG4gICAgICBCbG9ja3NXcmFwcGVyOiB0aGlzLmJsb2Nrc1dyYXBwZXIgfHwgRHluYW1pY0RpdixcbiAgICAgIEJsb2Nrc1dyYXBwZXJQcm9wczogdGhpcy5ibG9ja3NXcmFwcGVyUHJvcHMgfHwge30sXG4gICAgICBub25jZTogdGhpcy5ub25jZSB8fCBcIlwiLFxuICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgfTtcbiAgICBpZiAoIXRoaXMuYXBpS2V5KSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXG4gICAgICAgIFwiTm8gQVBJIGtleSBwcm92aWRlZCB0byBgQ29udGVudGAgY29tcG9uZW50LiBUaGlzIGNhbiBjYXVzZSBpc3N1ZXMuIFBsZWFzZSBwcm92aWRlIGFuIEFQSSBrZXkgdXNpbmcgdGhlIGBhcGlLZXlgIHByb3AuXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gcnVuIGFueSBkeW5hbWljIEpTIGNvZGUgYXR0YWNoZWQgdG8gY29udGVudFxuICAgIGNvbnN0IGpzQ29kZSA9IHRoaXMuYnVpbGRlckNvbnRleHRTaWduYWwuY29udGVudD8uZGF0YT8uanNDb2RlO1xuICAgIGlmIChqc0NvZGUpIHtcbiAgICAgIGV2YWx1YXRlKHtcbiAgICAgICAgY29kZToganNDb2RlLFxuICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQgfHwge30sXG4gICAgICAgIGxvY2FsU3RhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgcm9vdFN0YXRlOiB0aGlzLmJ1aWxkZXJDb250ZXh0U2lnbmFsLnJvb3RTdGF0ZSxcbiAgICAgICAgcm9vdFNldFN0YXRlOiAobmV3U3RhdGUpID0+IHtcbiAgICAgICAgICB0aGlzLmJ1aWxkZXJDb250ZXh0U2lnbmFsLnJvb3RTZXRTdGF0ZT8uKG5ld1N0YXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNFeHByZXNzaW9uOiBmYWxzZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19
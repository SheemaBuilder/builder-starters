const getCssFromFont = (font) => {
    // TODO: compute what font sizes are used and only load those.......
    const family = font.family + (font.kind && !font.kind.includes('#') ? ', ' + font.kind : '');
    const name = family.split(',')[0];
    const url = font.fileUrl ?? font?.files?.regular;
    let str = '';
    if (url && family && name) {
        str += `
@font-face {
font-family: "${family}";
src: local("${name}"), url('${url}') format('woff2');
font-display: fallback;
font-weight: 400;
}
      `.trim();
    }
    if (font.files) {
        for (const weight in font.files) {
            const isNumber = String(Number(weight)) === weight;
            if (!isNumber) {
                continue;
            }
            // TODO: maybe limit number loaded
            const weightUrl = font.files[weight];
            if (weightUrl && weightUrl !== url) {
                str += `
@font-face {
font-family: "${family}";
src: url('${weightUrl}') format('woff2');
font-display: fallback;
font-weight: ${weight};
}
        `.trim();
            }
        }
    }
    return str;
};
export const getFontCss = ({ customFonts }) => {
    // TODO: flag for this
    // if (!this.builder.allowCustomFonts) {
    //   return '';
    // }
    // TODO: separate internal data from external
    return customFonts?.map(font => getCssFromFont(font))?.join(' ') || '';
};
export const getCss = ({ cssCode, contentId }) => {
    if (!cssCode) {
        return '';
    }
    if (!contentId) {
        return cssCode;
    }
    // Allow using `&` in custom CSS code like @emotion
    // E.g. `& .foobar { ... }` to scope CSS
    // TODO: handle if '&' is within a string like `content: "&"`
    return cssCode?.replace(/&/g, `div[builder-content-id="${contentId}"]`) || '';
};
const DEFAULT_STYLES = `
.builder-button {
  all: unset;
}

.builder-text > p:first-of-type, .builder-text > .builder-paragraph:first-of-type {
  margin: 0;
}
.builder-text > p, .builder-text > .builder-paragraph {
  color: inherit;
  line-height: inherit;
  letter-spacing: inherit;
  font-weight: inherit;
  font-size: inherit;
  text-align: inherit;
  font-family: inherit;
}
`;
export const getDefaultStyles = (isNested) => {
    return !isNested ? DEFAULT_STYLES : '';
};
export const getWrapperClassName = (variationId) => {
    return `variant-${variationId}`;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9jb250ZW50L2NvbXBvbmVudHMvc3R5bGVzLmhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUU7SUFDMUMsb0VBQW9FO0lBQ3BFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3RixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUM7SUFDakQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsSUFBSSxHQUFHLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtRQUN6QixHQUFHLElBQUk7O2dCQUVLLE1BQU07Y0FDUixJQUFJLFlBQVksR0FBRzs7OztPQUkxQixDQUFDLElBQUksRUFBRSxDQUFDO0tBQ1o7SUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDZCxLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDL0IsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQztZQUNuRCxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNiLFNBQVM7YUFDVjtZQUNELGtDQUFrQztZQUNsQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxHQUFHLEVBQUU7Z0JBQ2xDLEdBQUcsSUFBSTs7Z0JBRUMsTUFBTTtZQUNWLFNBQVM7O2VBRU4sTUFBTTs7U0FFWixDQUFDLElBQUksRUFBRSxDQUFDO2FBQ1Y7U0FDRjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUN6QixXQUFXLEVBR1osRUFBRSxFQUFFO0lBQ0gsc0JBQXNCO0lBQ3RCLHdDQUF3QztJQUN4QyxlQUFlO0lBQ2YsSUFBSTtJQUNKLDZDQUE2QztJQUM3QyxPQUFPLFdBQVcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3pFLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEVBQ3JCLE9BQU8sRUFDUCxTQUFTLEVBSVYsRUFBRSxFQUFFO0lBQ0gsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2QsT0FBTyxPQUFPLENBQUM7S0FDaEI7SUFFRCxtREFBbUQ7SUFDbkQsd0NBQXdDO0lBQ3hDLDZEQUE2RDtJQUM3RCxPQUFPLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLDJCQUEyQixTQUFTLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNoRixDQUFDLENBQUM7QUFDRixNQUFNLGNBQWMsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQnRCLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFFBQTZCLEVBQUUsRUFBRTtJQUNoRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUN6QyxDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLFdBQW9CLEVBQUUsRUFBRTtJQUMxRCxPQUFPLFdBQVcsV0FBVyxFQUFFLENBQUM7QUFDbEMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBDdXN0b21Gb250IHtcbiAgZmFtaWx5Pzogc3RyaW5nO1xuICBraW5kPzogc3RyaW5nO1xuICBmaWxlVXJsPzogc3RyaW5nO1xuICBmaWxlcz86IHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gIH07XG59XG5jb25zdCBnZXRDc3NGcm9tRm9udCA9IChmb250OiBDdXN0b21Gb250KSA9PiB7XG4gIC8vIFRPRE86IGNvbXB1dGUgd2hhdCBmb250IHNpemVzIGFyZSB1c2VkIGFuZCBvbmx5IGxvYWQgdGhvc2UuLi4uLi4uXG4gIGNvbnN0IGZhbWlseSA9IGZvbnQuZmFtaWx5ICsgKGZvbnQua2luZCAmJiAhZm9udC5raW5kLmluY2x1ZGVzKCcjJykgPyAnLCAnICsgZm9udC5raW5kIDogJycpO1xuICBjb25zdCBuYW1lID0gZmFtaWx5LnNwbGl0KCcsJylbMF07XG4gIGNvbnN0IHVybCA9IGZvbnQuZmlsZVVybCA/PyBmb250Py5maWxlcz8ucmVndWxhcjtcbiAgbGV0IHN0ciA9ICcnO1xuICBpZiAodXJsICYmIGZhbWlseSAmJiBuYW1lKSB7XG4gICAgc3RyICs9IGBcbkBmb250LWZhY2Uge1xuZm9udC1mYW1pbHk6IFwiJHtmYW1pbHl9XCI7XG5zcmM6IGxvY2FsKFwiJHtuYW1lfVwiKSwgdXJsKCcke3VybH0nKSBmb3JtYXQoJ3dvZmYyJyk7XG5mb250LWRpc3BsYXk6IGZhbGxiYWNrO1xuZm9udC13ZWlnaHQ6IDQwMDtcbn1cbiAgICAgIGAudHJpbSgpO1xuICB9XG4gIGlmIChmb250LmZpbGVzKSB7XG4gICAgZm9yIChjb25zdCB3ZWlnaHQgaW4gZm9udC5maWxlcykge1xuICAgICAgY29uc3QgaXNOdW1iZXIgPSBTdHJpbmcoTnVtYmVyKHdlaWdodCkpID09PSB3ZWlnaHQ7XG4gICAgICBpZiAoIWlzTnVtYmVyKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gVE9ETzogbWF5YmUgbGltaXQgbnVtYmVyIGxvYWRlZFxuICAgICAgY29uc3Qgd2VpZ2h0VXJsID0gZm9udC5maWxlc1t3ZWlnaHRdO1xuICAgICAgaWYgKHdlaWdodFVybCAmJiB3ZWlnaHRVcmwgIT09IHVybCkge1xuICAgICAgICBzdHIgKz0gYFxuQGZvbnQtZmFjZSB7XG5mb250LWZhbWlseTogXCIke2ZhbWlseX1cIjtcbnNyYzogdXJsKCcke3dlaWdodFVybH0nKSBmb3JtYXQoJ3dvZmYyJyk7XG5mb250LWRpc3BsYXk6IGZhbGxiYWNrO1xuZm9udC13ZWlnaHQ6ICR7d2VpZ2h0fTtcbn1cbiAgICAgICAgYC50cmltKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuZXhwb3J0IGNvbnN0IGdldEZvbnRDc3MgPSAoe1xuICBjdXN0b21Gb250c1xufToge1xuICBjdXN0b21Gb250cz86IEN1c3RvbUZvbnRbXTtcbn0pID0+IHtcbiAgLy8gVE9ETzogZmxhZyBmb3IgdGhpc1xuICAvLyBpZiAoIXRoaXMuYnVpbGRlci5hbGxvd0N1c3RvbUZvbnRzKSB7XG4gIC8vICAgcmV0dXJuICcnO1xuICAvLyB9XG4gIC8vIFRPRE86IHNlcGFyYXRlIGludGVybmFsIGRhdGEgZnJvbSBleHRlcm5hbFxuICByZXR1cm4gY3VzdG9tRm9udHM/Lm1hcChmb250ID0+IGdldENzc0Zyb21Gb250KGZvbnQpKT8uam9pbignICcpIHx8ICcnO1xufTtcbmV4cG9ydCBjb25zdCBnZXRDc3MgPSAoe1xuICBjc3NDb2RlLFxuICBjb250ZW50SWRcbn06IHtcbiAgY3NzQ29kZT86IHN0cmluZztcbiAgY29udGVudElkPzogc3RyaW5nO1xufSkgPT4ge1xuICBpZiAoIWNzc0NvZGUpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgaWYgKCFjb250ZW50SWQpIHtcbiAgICByZXR1cm4gY3NzQ29kZTtcbiAgfVxuXG4gIC8vIEFsbG93IHVzaW5nIGAmYCBpbiBjdXN0b20gQ1NTIGNvZGUgbGlrZSBAZW1vdGlvblxuICAvLyBFLmcuIGAmIC5mb29iYXIgeyAuLi4gfWAgdG8gc2NvcGUgQ1NTXG4gIC8vIFRPRE86IGhhbmRsZSBpZiAnJicgaXMgd2l0aGluIGEgc3RyaW5nIGxpa2UgYGNvbnRlbnQ6IFwiJlwiYFxuICByZXR1cm4gY3NzQ29kZT8ucmVwbGFjZSgvJi9nLCBgZGl2W2J1aWxkZXItY29udGVudC1pZD1cIiR7Y29udGVudElkfVwiXWApIHx8ICcnO1xufTtcbmNvbnN0IERFRkFVTFRfU1RZTEVTID0gYFxuLmJ1aWxkZXItYnV0dG9uIHtcbiAgYWxsOiB1bnNldDtcbn1cblxuLmJ1aWxkZXItdGV4dCA+IHA6Zmlyc3Qtb2YtdHlwZSwgLmJ1aWxkZXItdGV4dCA+IC5idWlsZGVyLXBhcmFncmFwaDpmaXJzdC1vZi10eXBlIHtcbiAgbWFyZ2luOiAwO1xufVxuLmJ1aWxkZXItdGV4dCA+IHAsIC5idWlsZGVyLXRleHQgPiAuYnVpbGRlci1wYXJhZ3JhcGgge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XG4gIGxldHRlci1zcGFjaW5nOiBpbmhlcml0O1xuICBmb250LXdlaWdodDogaW5oZXJpdDtcbiAgZm9udC1zaXplOiBpbmhlcml0O1xuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbn1cbmA7XG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdFN0eWxlcyA9IChpc05lc3RlZDogYm9vbGVhbiB8IHVuZGVmaW5lZCkgPT4ge1xuICByZXR1cm4gIWlzTmVzdGVkID8gREVGQVVMVF9TVFlMRVMgOiAnJztcbn07XG5leHBvcnQgY29uc3QgZ2V0V3JhcHBlckNsYXNzTmFtZSA9ICh2YXJpYXRpb25JZD86IHN0cmluZykgPT4ge1xuICByZXR1cm4gYHZhcmlhbnQtJHt2YXJpYXRpb25JZH1gO1xufSJdfQ==
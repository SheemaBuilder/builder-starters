import { Component, Input } from "@angular/core";
import { CommonModule } from "@angular/common";
import InlinedStyles from "../../inlined-styles";
import { getCss, getDefaultStyles, getFontCss } from "./styles.helpers";
import * as i0 from "@angular/core";
export default class ContentStyles {
    constructor() {
        this.injectedStyles = null;
    }
    ngOnInit() {
        this.injectedStyles = `
${getCss({
            cssCode: this.cssCode,
            contentId: this.contentId,
        })}
${getFontCss({
            customFonts: this.customFonts,
        })}
${getDefaultStyles(this.isNestedRender)}
`.trim();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ContentStyles, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ContentStyles, isStandalone: true, selector: "content-styles", inputs: { cssCode: "cssCode", contentId: "contentId", customFonts: "customFonts", isNestedRender: "isNestedRender", nonce: "nonce" }, ngImport: i0, template: `
    <inlined-styles
      id="builderio-content"
      [styles]="injectedStyles"
      [nonce]="nonce"
    ></inlined-styles>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "component", type: InlinedStyles, selector: "inlined-styles, InlinedStyles", inputs: ["styles", "id", "nonce"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ContentStyles, decorators: [{
            type: Component,
            args: [{ selector: "content-styles", template: `
    <inlined-styles
      id="builderio-content"
      [styles]="injectedStyles"
      [nonce]="nonce"
    ></inlined-styles>
  `, standalone: true, imports: [CommonModule, InlinedStyles], styles: [":host{display:contents}\n"] }]
        }], propDecorators: { cssCode: [{
                type: Input
            }], contentId: [{
                type: Input
            }], customFonts: [{
                type: Input
            }], isNestedRender: [{
                type: Input
            }], nonce: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvY29udGVudC9jb21wb25lbnRzL3N0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFVL0MsT0FBTyxhQUFhLE1BQU0sc0JBQXNCLENBQUM7QUFFakQsT0FBTyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFxQnhFLE1BQU0sQ0FBQyxPQUFPLE9BQU8sYUFBYTtJQW5CbEM7UUEwQkUsbUJBQWMsR0FBRyxJQUFJLENBQUM7S0FjdkI7SUFaQyxRQUFRO1FBQ04sSUFBSSxDQUFDLGNBQWMsR0FBRztFQUN4QixNQUFNLENBQUM7WUFDUCxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQzFCLENBQUM7RUFDQSxVQUFVLENBQUM7WUFDWCxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7U0FDOUIsQ0FBQztFQUNBLGdCQUFnQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7Q0FDdEMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNQLENBQUM7K0dBcEJrQixhQUFhO21HQUFiLGFBQWEsZ05BakJ0Qjs7Ozs7O0dBTVQsa0dBU1MsWUFBWSwrQkFBRSxhQUFhOzs0RkFFbEIsYUFBYTtrQkFuQmpDLFNBQVM7K0JBQ0UsZ0JBQWdCLFlBQ2hCOzs7Ozs7R0FNVCxjQVFXLElBQUksV0FDUCxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUM7OEJBRzdCLE9BQU87c0JBQWYsS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLO2dCQUNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBQ0csY0FBYztzQkFBdEIsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgQnVpbGRlck5vbmNlUHJvcCB7XG4gIGNzc0NvZGU/OiBzdHJpbmc7XG4gIGN1c3RvbUZvbnRzPzogQ3VzdG9tRm9udFtdO1xuICBjb250ZW50SWQ/OiBzdHJpbmc7XG4gIGlzTmVzdGVkUmVuZGVyPzogYm9vbGVhbjtcbn1cblxuaW1wb3J0IHR5cGUgeyBCdWlsZGVyTm9uY2VQcm9wIH0gZnJvbSBcIi4uLy4uLy4uL3R5cGVzL2J1aWxkZXItcHJvcHNcIjtcbmltcG9ydCBJbmxpbmVkU3R5bGVzIGZyb20gXCIuLi8uLi9pbmxpbmVkLXN0eWxlc1wiO1xuaW1wb3J0IHR5cGUgeyBDdXN0b21Gb250IH0gZnJvbSBcIi4vc3R5bGVzLmhlbHBlcnNcIjtcbmltcG9ydCB7IGdldENzcywgZ2V0RGVmYXVsdFN0eWxlcywgZ2V0Rm9udENzcyB9IGZyb20gXCIuL3N0eWxlcy5oZWxwZXJzXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJjb250ZW50LXN0eWxlc1wiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxpbmxpbmVkLXN0eWxlc1xuICAgICAgaWQ9XCJidWlsZGVyaW8tY29udGVudFwiXG4gICAgICBbc3R5bGVzXT1cImluamVjdGVkU3R5bGVzXCJcbiAgICAgIFtub25jZV09XCJub25jZVwiXG4gICAgPjwvaW5saW5lZC1zdHlsZXM+XG4gIGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogY29udGVudHM7XG4gICAgICB9XG4gICAgYCxcbiAgXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgSW5saW5lZFN0eWxlc10sXG59KVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGVudFN0eWxlcyB7XG4gIEBJbnB1dCgpIGNzc0NvZGUhOiBQcm9wc1tcImNzc0NvZGVcIl07XG4gIEBJbnB1dCgpIGNvbnRlbnRJZCE6IFByb3BzW1wiY29udGVudElkXCJdO1xuICBASW5wdXQoKSBjdXN0b21Gb250cyE6IFByb3BzW1wiY3VzdG9tRm9udHNcIl07XG4gIEBJbnB1dCgpIGlzTmVzdGVkUmVuZGVyITogUHJvcHNbXCJpc05lc3RlZFJlbmRlclwiXTtcbiAgQElucHV0KCkgbm9uY2UhOiBQcm9wc1tcIm5vbmNlXCJdO1xuXG4gIGluamVjdGVkU3R5bGVzID0gbnVsbDtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmluamVjdGVkU3R5bGVzID0gYFxuJHtnZXRDc3Moe1xuICBjc3NDb2RlOiB0aGlzLmNzc0NvZGUsXG4gIGNvbnRlbnRJZDogdGhpcy5jb250ZW50SWQsXG59KX1cbiR7Z2V0Rm9udENzcyh7XG4gIGN1c3RvbUZvbnRzOiB0aGlzLmN1c3RvbUZvbnRzLFxufSl9XG4ke2dldERlZmF1bHRTdHlsZXModGhpcy5pc05lc3RlZFJlbmRlcil9XG5gLnRyaW0oKTtcbiAgfVxufVxuIl19
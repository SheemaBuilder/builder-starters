import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import builderContext from "../../../context/builder.context";
import { evaluate } from "../../../functions/evaluate/index";
import { fastClone } from "../../../functions/fast-clone";
import { fetchOneEntry } from "../../../functions/get-content/index";
import { isBrowser } from "../../../functions/is-browser";
import { isEditing } from "../../../functions/is-editing";
import { isPreviewing } from "../../../functions/is-previewing";
import { logFetch } from "../../../functions/log-fetch";
import { createRegisterComponentMessage } from "../../../functions/register-component";
import { _track } from "../../../functions/track/index";
import { getInteractionPropertiesForEvent } from "../../../functions/track/interaction";
import { getDefaultCanTrack } from "../../../helpers/canTrack";
import { createEditorListener } from "../../../helpers/subscribe-to-editor";
import { registerInsertMenu, setupBrowserForEditing, } from "../../../scripts/init-editing";
import { triggerAnimation } from "../../block/animator";
import DynamicDiv from "../../dynamic-div";
import { needsElementRefDivForEditing } from "./enable-editor.helpers";
import { getWrapperClassName } from "./styles.helpers";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class EnableEditor {
    mergeNewRootState(newData) {
        const combinedState = {
            ...this.builderContextSignal.rootState,
            ...newData,
        };
        if (this.builderContextSignal.rootSetState) {
            this.builderContextSignal.rootSetState?.(combinedState);
        }
        else {
            this.builderContextSignal.rootState = combinedState;
        }
    }
    mergeNewContent(newContent) {
        const newContentValue = {
            ...this.builderContextSignal.content,
            ...newContent,
            data: {
                ...this.builderContextSignal.content?.data,
                ...newContent?.data,
            },
            meta: {
                ...this.builderContextSignal.content?.meta,
                ...newContent?.meta,
                breakpoints: newContent?.meta?.breakpoints ||
                    this.builderContextSignal.content?.meta?.breakpoints,
            },
        };
        this.builderContextSignal.content = newContentValue;
    }
    get showContentProps() {
        return this.showContent
            ? {}
            : {
                hidden: true,
                "aria-hidden": true,
            };
    }
    processMessage(event) {
        return createEditorListener({
            model: this.model,
            trustedHosts: this.trustedHosts,
            callbacks: {
                configureSdk: (messageContent) => {
                    const { breakpoints, contentId } = messageContent;
                    if (!contentId ||
                        contentId !== this.builderContextSignal.content?.id) {
                        return;
                    }
                    if (breakpoints) {
                        this.mergeNewContent({
                            meta: {
                                breakpoints,
                            },
                        });
                    }
                },
                animation: (animation) => {
                    triggerAnimation(animation);
                },
                contentUpdate: (newContent) => {
                    this.mergeNewContent(newContent);
                },
            },
        })(event);
    }
    onClick(event) {
        if (this.builderContextSignal.content) {
            const variationId = this.builderContextSignal.content?.testVariationId;
            const contentId = this.builderContextSignal.content?.id;
            _track({
                apiHost: this.apiHost,
                type: "click",
                canTrack: getDefaultCanTrack(this.canTrack),
                contentId,
                apiKey: this.apiKey,
                variationId: variationId !== contentId ? variationId : undefined,
                ...getInteractionPropertiesForEvent(event),
                unique: !this.clicked,
            });
        }
        if (!this.clicked) {
            this.clicked = true;
        }
    }
    runHttpRequests() {
        const requests = this.builderContextSignal.content?.data?.httpRequests ?? {};
        Object.entries(requests).forEach(([key, url]) => {
            if (!url)
                return;
            // request already in progress
            if (this.httpReqsPending[key])
                return;
            // request already completed, and not in edit mode
            if (this.httpReqsData[key] && !isEditing())
                return;
            this.httpReqsPending[key] = true;
            const evaluatedUrl = url.replace(/{{([^}]+)}}/g, (_match, group) => String(evaluate({
                code: group,
                context: this.context || {},
                localState: undefined,
                rootState: this.builderContextSignal.rootState,
                rootSetState: this.builderContextSignal.rootSetState,
            })));
            logFetch(evaluatedUrl);
            fetch(evaluatedUrl)
                .then((response) => response.json())
                .then((json) => {
                this.mergeNewRootState({
                    [key]: json,
                });
                this.httpReqsData[key] = true;
            })
                .catch((err) => {
                console.error("error fetching dynamic data", url, err);
            })
                .finally(() => {
                this.httpReqsPending[key] = false;
            });
        });
    }
    emitStateUpdate() {
        if (isEditing()) {
            window.dispatchEvent(new CustomEvent("builder:component:stateChange", {
                detail: {
                    state: fastClone(this.builderContextSignal.rootState),
                    ref: {
                        name: this.model,
                    },
                },
            }));
        }
    }
    constructor(vcRef) {
        this.vcRef = vcRef;
        this.builderContext = builderContext;
        this.ContentWrapper = null;
        this.httpReqsData = {};
        this.httpReqsPending = {};
        this.clicked = false;
        this.node_0_Show = null;
        this.node_2_state_ContentWrapper = null;
        this.node_3_state_ContentWrapper = null;
        this.mergedInputs_ekawrq = {};
    }
    ngOnInit() {
        this.ContentWrapper = this.contentWrapper || DynamicDiv;
        this.runHttpRequests();
        this.emitStateUpdate();
        this.node_0_Show =
            this.builderContextSignal.content || needsElementRefDivForEditing();
        this.node_2_state_ContentWrapper = getWrapperClassName(this.content?.testVariationId || this.content?.id);
        this.node_3_state_ContentWrapper = {
            display: !this.builderContextSignal.content && needsElementRefDivForEditing()
                ? "none"
                : undefined,
        };
        this.mergedInputs_ekawrq = {
            ref: this.elementRef,
            onClick: this.onClick.bind(this),
            "builder-content-id": this.builderContextSignal.content?.id,
            "builder-model": this.model,
            className: this.node_2_state_ContentWrapper,
            style: this.node_3_state_ContentWrapper,
            ...this.showContentProps,
            ...this.contentWrapperProps,
        };
        if (typeof window !== "undefined") {
            if (isBrowser()) {
                if (isEditing() && !this.isNestedRender) {
                    window.addEventListener("message", this.processMessage.bind(this));
                    registerInsertMenu();
                    setupBrowserForEditing({
                        ...(this.locale
                            ? {
                                locale: this.locale,
                            }
                            : {}),
                        ...(this.enrich
                            ? {
                                enrich: this.enrich,
                            }
                            : {}),
                        ...(this.trustedHosts
                            ? {
                                trustedHosts: this.trustedHosts,
                            }
                            : {}),
                        modelName: this.model ?? "",
                        apiKey: this.apiKey,
                    });
                    Object.values(this.builderContextSignal.componentInfos).forEach((registeredComponent) => {
                        if (!registeredComponent.models?.length ||
                            registeredComponent.models.includes(this.model)) {
                            const message = createRegisterComponentMessage(registeredComponent);
                            window.parent?.postMessage(message, "*");
                        }
                    });
                    window.addEventListener("builder:component:stateChangeListenerActivated", this.emitStateUpdate
                        .bind(this));
                }
                const shouldTrackImpression = this.builderContextSignal.content &&
                    getDefaultCanTrack(this.canTrack);
                if (shouldTrackImpression) {
                    const variationId = this.builderContextSignal.content?.testVariationId;
                    const contentId = this.builderContextSignal.content?.id;
                    const apiKeyProp = this.apiKey;
                    _track({
                        apiHost: this.apiHost,
                        type: "impression",
                        canTrack: true,
                        contentId,
                        apiKey: apiKeyProp,
                        variationId: variationId !== contentId ? variationId : undefined,
                    });
                }
                /**
                 * Override normal content in preview mode.
                 * We ignore this when editing, since the edited content is already being sent from the editor via post messages.
                 */
                if (isPreviewing() && !isEditing()) {
                    const searchParams = new URL(location.href).searchParams;
                    const searchParamPreviewModel = searchParams.get("builder.preview");
                    const searchParamPreviewId = searchParams.get(`builder.overrides.${searchParamPreviewModel}`);
                    const previewApiKey = searchParams.get("apiKey") || searchParams.get("builder.space");
                    /**
                     * Make sure that:
                     * - the preview model name is the same as the one we're rendering, since there can be multiple models rendered
                     *  at the same time, e.g. header/page/footer.
                     * - the API key is the same, since we don't want to preview content from other organizations.
                     * - if there is content, that the preview ID is the same as that of the one we receive.
                     *
                     * TO-DO: should we only update the state when there is a change?
                     **/
                    if (searchParamPreviewModel === "BUILDER_STUDIO" ||
                        (searchParamPreviewModel === this.model &&
                            previewApiKey === this.apiKey &&
                            (!this.content || searchParamPreviewId === this.content.id))) {
                        fetchOneEntry({
                            model: this.model,
                            apiKey: this.apiKey,
                            apiVersion: this.builderContextSignal.apiVersion,
                            ...(searchParamPreviewModel === "BUILDER_STUDIO" &&
                                this.context?.symbolId
                                ? {
                                    query: {
                                        id: this.context.symbolId,
                                    },
                                }
                                : {}),
                        }).then((content) => {
                            if (content) {
                                this.mergeNewContent(content);
                            }
                        });
                    }
                }
            }
        }
        this.myContent = [
            this.vcRef.createEmbeddedView(this.contentwrapperTemplateRef).rootNodes,
        ];
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            if (this.content) {
                this.mergeNewContent(this.content);
            }
            this.emitStateUpdate();
            if (this.data) {
                this.mergeNewRootState(this.data);
            }
            if (this.locale) {
                this.mergeNewRootState({
                    locale: this.locale,
                });
            }
            this.node_0_Show =
                this.builderContextSignal.content || needsElementRefDivForEditing();
            this.node_2_state_ContentWrapper = getWrapperClassName(this.content?.testVariationId || this.content?.id);
            this.node_3_state_ContentWrapper = {
                display: !this.builderContextSignal.content && needsElementRefDivForEditing()
                    ? "none"
                    : undefined,
            };
            this.mergedInputs_ekawrq = {
                ref: this.elementRef,
                onClick: this.onClick.bind(this),
                "builder-content-id": this.builderContextSignal.content?.id,
                "builder-model": this.model,
                className: this.node_2_state_ContentWrapper,
                style: this.node_3_state_ContentWrapper,
                ...this.showContentProps,
                ...this.contentWrapperProps,
            };
        }
    }
    ngOnDestroy() {
        if (isBrowser()) {
            window.removeEventListener("message", this.processMessage.bind(this));
            window.removeEventListener("builder:component:stateChangeListenerActivated", this.emitStateUpdate
                .bind(this));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: EnableEditor, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: EnableEditor, isStandalone: true, selector: "enable-editor", inputs: { isNestedRender: "isNestedRender", locale: "locale", enrich: "enrich", trustedHosts: "trustedHosts", model: "model", apiKey: "apiKey", builderContextSignal: "builderContextSignal", canTrack: "canTrack", apiHost: "apiHost", content: "content", context: "context", data: "data", showContent: "showContent", contentWrapper: "contentWrapper", contentWrapperProps: "contentWrapperProps" }, viewQueries: [{ propertyName: "elementRef", first: true, predicate: ["elementRef"], descendants: true }, { propertyName: "contentwrapperTemplateRef", first: true, predicate: ["contentwrapperTemplate"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `
    <ng-template #contentwrapperTemplate><ng-content></ng-content></ng-template>
    <ng-container *ngIf="node_0_Show">
      <ng-container
        *ngComponentOutlet="
              ContentWrapper;
              inputs: mergedInputs_ekawrq;
              content: myContent;
              "
      ></ng-container>
    </ng-container>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: EnableEditor, decorators: [{
            type: Component,
            args: [{ selector: "enable-editor", template: `
    <ng-template #contentwrapperTemplate><ng-content></ng-content></ng-template>
    <ng-container *ngIf="node_0_Show">
      <ng-container
        *ngComponentOutlet="
              ContentWrapper;
              inputs: mergedInputs_ekawrq;
              content: myContent;
              "
      ></ng-container>
    </ng-container>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { isNestedRender: [{
                type: Input
            }], locale: [{
                type: Input
            }], enrich: [{
                type: Input
            }], trustedHosts: [{
                type: Input
            }], model: [{
                type: Input
            }], apiKey: [{
                type: Input
            }], builderContextSignal: [{
                type: Input
            }], canTrack: [{
                type: Input
            }], apiHost: [{
                type: Input
            }], content: [{
                type: Input
            }], context: [{
                type: Input
            }], data: [{
                type: Input
            }], showContent: [{
                type: Input
            }], contentWrapper: [{
                type: Input
            }], contentWrapperProps: [{
                type: Input
            }], elementRef: [{
                type: ViewChild,
                args: ["elementRef"]
            }], contentwrapperTemplateRef: [{
                type: ViewChild,
                args: ["contentwrapperTemplate", { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
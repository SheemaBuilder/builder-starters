import { Component, Input } from "@angular/core";
import { CommonModule } from "@angular/common";
import { getMaxWidthQueryForSize, getSizesForBreakpoints, } from "../../../constants/device-sizes";
import { TARGET } from "../../../constants/target";
import { camelToKebabCase } from "../../../functions/camel-to-kebab-case";
import { createCssClass } from "../../../helpers/css";
import { checkIsDefined } from "../../../helpers/nullable";
import InlinedStyles from "../../inlined-styles";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class BlockStyles {
    constructor() {
        this.TARGET = TARGET;
    }
    get canShowBlock() {
        const processedBlock = this.block;
        // only render styles for blocks that are visible
        if (checkIsDefined(processedBlock.hide)) {
            return !processedBlock.hide;
        }
        if (checkIsDefined(processedBlock.show)) {
            return processedBlock.show;
        }
        return true;
    }
    get css() {
        const processedBlock = this.block;
        const styles = processedBlock.responsiveStyles;
        const content = this.context.content;
        const sizesWithUpdatedBreakpoints = getSizesForBreakpoints(content?.meta?.breakpoints || {});
        const contentHasXSmallBreakpoint = Boolean(content?.meta?.breakpoints?.xsmall);
        const largeStyles = styles?.large;
        const mediumStyles = styles?.medium;
        const smallStyles = styles?.small;
        const xsmallStyles = styles?.xsmall;
        const className = processedBlock.id;
        if (!className) {
            return "";
        }
        const largeStylesClass = largeStyles
            ? createCssClass({
                className,
                styles: largeStyles,
            })
            : "";
        const mediumStylesClass = mediumStyles
            ? createCssClass({
                className,
                styles: mediumStyles,
                mediaQuery: getMaxWidthQueryForSize("medium", sizesWithUpdatedBreakpoints),
            })
            : "";
        const smallStylesClass = smallStyles
            ? createCssClass({
                className,
                styles: smallStyles,
                mediaQuery: getMaxWidthQueryForSize("small", sizesWithUpdatedBreakpoints),
            })
            : "";
        const xsmallStylesClass = xsmallStyles && contentHasXSmallBreakpoint
            ? createCssClass({
                className,
                styles: xsmallStyles,
                mediaQuery: getMaxWidthQueryForSize("xsmall", sizesWithUpdatedBreakpoints),
            })
            : "";
        const hoverAnimation = processedBlock.animations &&
            processedBlock.animations.find((item) => item.trigger === "hover");
        let hoverStylesClass = "";
        if (hoverAnimation) {
            const hoverStyles = hoverAnimation.steps?.[1]?.styles || {};
            hoverStylesClass =
                createCssClass({
                    className: `${className}:hover`,
                    styles: {
                        ...hoverStyles,
                        transition: `all ${hoverAnimation.duration}s ${camelToKebabCase(hoverAnimation.easing)}`,
                        transitionDelay: hoverAnimation.delay
                            ? `${hoverAnimation.delay}s`
                            : "0s",
                    },
                }) || "";
        }
        return [
            largeStylesClass,
            mediumStylesClass,
            smallStylesClass,
            xsmallStylesClass,
            hoverStylesClass,
        ].join(" ");
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BlockStyles, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BlockStyles, isStandalone: true, selector: "block-styles", inputs: { block: "block", context: "context" }, ngImport: i0, template: `
    <ng-container *ngIf="TARGET !== 'reactNative' && css && canShowBlock">
      <inlined-styles
        id="builderio-block"
        [styles]="css"
        [nonce]="context.nonce"
      ></inlined-styles>
    </ng-container>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: InlinedStyles, selector: "inlined-styles, InlinedStyles", inputs: ["styles", "id", "nonce"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BlockStyles, decorators: [{
            type: Component,
            args: [{ selector: "block-styles", template: `
    <ng-container *ngIf="TARGET !== 'reactNative' && css && canShowBlock">
      <inlined-styles
        id="builderio-block"
        [styles]="css"
        [nonce]="context.nonce"
      ></inlined-styles>
    </ng-container>
  `, standalone: true, imports: [CommonModule, InlinedStyles], styles: [":host{display:contents}\n"] }]
        }], propDecorators: { block: [{
                type: Input
            }], context: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
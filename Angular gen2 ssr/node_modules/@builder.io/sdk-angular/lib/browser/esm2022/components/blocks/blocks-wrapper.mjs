import { Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import { isEditing } from "../../functions/is-editing";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class BlocksWrapper {
    get className() {
        return [
            "builder-blocks",
            !this.blocks?.length ? "no-blocks" : "",
            this.classNameProp,
        ]
            .filter(Boolean)
            .join(" ");
    }
    get dataPath() {
        if (!this.path) {
            return undefined;
        }
        const thisPrefix = "this.";
        const pathPrefix = "component.options.";
        return this.path.startsWith(thisPrefix)
            ? this.path.replace(thisPrefix, "")
            : this.path.startsWith(pathPrefix)
                ? this.path
                : `${pathPrefix}${this.path || ""}`;
    }
    onClick() {
        if (isEditing() && !this.blocks?.length) {
            window.parent?.postMessage({
                type: "builder.clickEmptyBlocks",
                data: {
                    parentElementId: this.parent,
                    dataPath: this.dataPath,
                },
            }, "*");
        }
    }
    onMouseEnter() {
        if (isEditing() && !this.blocks?.length) {
            window.parent?.postMessage({
                type: "builder.hoverEmptyBlocks",
                data: {
                    parentElementId: this.parent,
                    dataPath: this.dataPath,
                },
            }, "*");
        }
    }
    constructor(vcRef) {
        this.vcRef = vcRef;
        this.mergedInputs_2eim3t = {};
    }
    ngAfterContentInit() {
        this.mergedInputs_2eim3t = {
            ref: this.blocksWrapperRef,
            class: this.className + " props-blocks-wrapper",
            "builder-path": this.dataPath,
            "builder-parent-id": this.parent,
            style: this.styleProp,
            onClick: this.onClick.bind(this),
            onMouseEnter: this.onMouseEnter.bind(this),
            onKeyPress: this.onClick.bind(this),
            ...this.BlocksWrapperProps,
        };
        if (typeof window !== "undefined") {
        }
        this.myContent = [
            this.vcRef.createEmbeddedView(this.blockswrapperTemplateRef).rootNodes,
        ];
    }
    ngOnChanges(changes) {
        if (typeof window !== "undefined") {
            this.mergedInputs_2eim3t = {
                ref: this.blocksWrapperRef,
                class: this.className + " props-blocks-wrapper",
                "builder-path": this.dataPath,
                "builder-parent-id": this.parent,
                style: this.styleProp,
                onClick: this.onClick.bind(this),
                onMouseEnter: this.onMouseEnter.bind(this),
                onKeyPress: this.onClick.bind(this),
                ...this.BlocksWrapperProps,
            };
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BlocksWrapper, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BlocksWrapper, isStandalone: true, selector: "blocks-wrapper", inputs: { blocks: "blocks", classNameProp: "classNameProp", path: "path", parent: "parent", styleProp: "styleProp", BlocksWrapperProps: "BlocksWrapperProps", BlocksWrapper: "BlocksWrapper" }, viewQueries: [{ propertyName: "blocksWrapperRef", first: true, predicate: ["blocksWrapperRef"], descendants: true }, { propertyName: "blockswrapperTemplateRef", first: true, predicate: ["blockswrapperTemplate"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `
    <ng-template #blockswrapperTemplate><ng-content></ng-content></ng-template>
    <ng-container
      *ngComponentOutlet="
              BlocksWrapper;
              inputs: mergedInputs_2eim3t;
              content: myContent;
              "
    ></ng-container>
  `, isInline: true, styles: [":host{display:contents}.props-blocks-wrapper{display:flex;flex-direction:column;align-items:stretch}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BlocksWrapper, decorators: [{
            type: Component,
            args: [{ selector: "blocks-wrapper", template: `
    <ng-template #blockswrapperTemplate><ng-content></ng-content></ng-template>
    <ng-container
      *ngComponentOutlet="
              BlocksWrapper;
              inputs: mergedInputs_2eim3t;
              content: myContent;
              "
    ></ng-container>
  `, standalone: true, imports: [CommonModule], styles: [":host{display:contents}.props-blocks-wrapper{display:flex;flex-direction:column;align-items:stretch}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { blocks: [{
                type: Input
            }], classNameProp: [{
                type: Input
            }], path: [{
                type: Input
            }], parent: [{
                type: Input
            }], styleProp: [{
                type: Input
            }], BlocksWrapperProps: [{
                type: Input
            }], BlocksWrapper: [{
                type: Input
            }], blocksWrapperRef: [{
                type: ViewChild,
                args: ["blocksWrapperRef"]
            }], blockswrapperTemplateRef: [{
                type: ViewChild,
                args: ["blockswrapperTemplate", { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
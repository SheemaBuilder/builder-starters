import { TARGET } from '../../constants/target';
import { isBrowser } from '../../functions/is-browser';
import { UPDATE_COOKIES_AND_STYLES_SCRIPT, UPDATE_VARIANT_VISIBILITY_SCRIPT } from './inlined-fns';
/**
 * We hardcode explicit function names here, because the `.toString()` of a function can change depending on the bundler.
 * Some bundlers will minify the fn name, etc.
 *
 * So we hardcode the function names here, and then use those names in the script string to make sure the function names are consistent.
 */
const UPDATE_COOKIES_AND_STYLES_SCRIPT_NAME = 'builderIoAbTest';
const UPDATE_VARIANT_VISIBILITY_SCRIPT_FN_NAME = 'builderIoRenderContent';
export const getVariants = (content) => Object.values(content?.variations || {}).map(variant => ({
    ...variant,
    testVariationId: variant.id,
    id: content?.id
}));
export const checkShouldRenderVariants = ({ canTrack, content }) => {
    const hasVariants = getVariants(content).length > 0;
    /**
     * We cannot SSR in React-Native.
     */
    if (TARGET === 'reactNative')
        return false;
    if (!hasVariants)
        return false;
    if (!canTrack)
        return false;
    /**
     * For Vue and Svelte, we need to (initially) render the variants. This is to avoid hydration mismatch errors.
     *
     * Unlike React, Vue's hydration checks are shallow and do not check the attributes/contents of each element, so we
     * are able to modify the `hidden` HTML attributes and `display` CSS properties without causing a hydration mismatch error.
     *
     * NOTE: For Solid/Svelte: after the app is hydrated, we strip the variants from the DOM (on mount) to reduce the amount of HTML in the DOM.
     * This isn't necessary, just a nice to have.
     */
    if (TARGET === 'vue' || TARGET === 'svelte')
        return true;
    if (isBrowser())
        return false;
    return true;
};
const getIsHydrationTarget = (target) => target === 'react' || target === 'reactNative';
const isHydrationTarget = getIsHydrationTarget(TARGET);
export const getInitVariantsFnsScriptString = () => `
  window.${UPDATE_COOKIES_AND_STYLES_SCRIPT_NAME} = ${UPDATE_COOKIES_AND_STYLES_SCRIPT}
  window.${UPDATE_VARIANT_VISIBILITY_SCRIPT_FN_NAME} = ${UPDATE_VARIANT_VISIBILITY_SCRIPT}
  `;
export const getUpdateCookieAndStylesScript = (variants, contentId) => `
  window.${UPDATE_COOKIES_AND_STYLES_SCRIPT_NAME}(
    "${contentId}",${JSON.stringify(variants)}, ${isHydrationTarget}
  )`;
export const getUpdateVariantVisibilityScript = ({ contentId, variationId }) => `window.${UPDATE_VARIANT_VISIBILITY_SCRIPT_FN_NAME}(
    "${variationId}", "${contentId}", ${isHydrationTarget}
  )`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NvbnRlbnQtdmFyaWFudHMvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBSXZELE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRzs7Ozs7R0FLRztBQUNILE1BQU0scUNBQXFDLEdBQUcsaUJBQWlCLENBQUM7QUFDaEUsTUFBTSx3Q0FBd0MsR0FBRyx3QkFBd0IsQ0FBQztBQUMxRSxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxPQUFpQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6SCxHQUFHLE9BQU87SUFDVixlQUFlLEVBQUUsT0FBTyxDQUFDLEVBQUU7SUFDM0IsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFO0NBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBQ0osTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxFQUN4QyxRQUFRLEVBQ1IsT0FBTyxFQUlSLEVBQUUsRUFBRTtJQUNILE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRXBEOztPQUVHO0lBQ0gsSUFBSSxNQUFNLEtBQUssYUFBYTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQzNDLElBQUksQ0FBQyxXQUFXO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDL0IsSUFBSSxDQUFDLFFBQVE7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUU1Qjs7Ozs7Ozs7T0FRRztJQUNILElBQUksTUFBTSxLQUFLLEtBQUssSUFBSSxNQUFNLEtBQUssUUFBUTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3pELElBQUksU0FBUyxFQUFFO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDOUIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFLRixNQUFNLG9CQUFvQixHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssT0FBTyxJQUFJLE1BQU0sS0FBSyxhQUFhLENBQUM7QUFDaEcsTUFBTSxpQkFBaUIsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxHQUFHLEVBQUUsQ0FBQztXQUN6QyxxQ0FBcUMsTUFBTSxnQ0FBZ0M7V0FDM0Usd0NBQXdDLE1BQU0sZ0NBQWdDO0dBQ3RGLENBQUM7QUFDSixNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxDQUFDLFFBQXVCLEVBQUUsU0FBaUIsRUFBRSxFQUFFLENBQUM7V0FDbkYscUNBQXFDO09BQ3pDLFNBQVMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLGlCQUFpQjtJQUMvRCxDQUFDO0FBQ0wsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUcsQ0FBQyxFQUMvQyxTQUFTLEVBQ1QsV0FBVyxFQUlaLEVBQUUsRUFBRSxDQUFDLFVBQVUsd0NBQXdDO09BQ2pELFdBQVcsT0FBTyxTQUFTLE1BQU0saUJBQWlCO0lBQ3JELENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUQVJHRVQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvdGFyZ2V0JztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9pcy1icm93c2VyJztcbmltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL251bGxhYmxlJztcbmltcG9ydCB0eXBlIHsgQnVpbGRlckNvbnRlbnQgfSBmcm9tICcuLi8uLi90eXBlcy9idWlsZGVyLWNvbnRlbnQnO1xuaW1wb3J0IHR5cGUgeyBUYXJnZXQgfSBmcm9tICcuLi8uLi90eXBlcy90YXJnZXRzJztcbmltcG9ydCB7IFVQREFURV9DT09LSUVTX0FORF9TVFlMRVNfU0NSSVBULCBVUERBVEVfVkFSSUFOVF9WSVNJQklMSVRZX1NDUklQVCB9IGZyb20gJy4vaW5saW5lZC1mbnMnO1xuXG4vKipcbiAqIFdlIGhhcmRjb2RlIGV4cGxpY2l0IGZ1bmN0aW9uIG5hbWVzIGhlcmUsIGJlY2F1c2UgdGhlIGAudG9TdHJpbmcoKWAgb2YgYSBmdW5jdGlvbiBjYW4gY2hhbmdlIGRlcGVuZGluZyBvbiB0aGUgYnVuZGxlci5cbiAqIFNvbWUgYnVuZGxlcnMgd2lsbCBtaW5pZnkgdGhlIGZuIG5hbWUsIGV0Yy5cbiAqXG4gKiBTbyB3ZSBoYXJkY29kZSB0aGUgZnVuY3Rpb24gbmFtZXMgaGVyZSwgYW5kIHRoZW4gdXNlIHRob3NlIG5hbWVzIGluIHRoZSBzY3JpcHQgc3RyaW5nIHRvIG1ha2Ugc3VyZSB0aGUgZnVuY3Rpb24gbmFtZXMgYXJlIGNvbnNpc3RlbnQuXG4gKi9cbmNvbnN0IFVQREFURV9DT09LSUVTX0FORF9TVFlMRVNfU0NSSVBUX05BTUUgPSAnYnVpbGRlcklvQWJUZXN0JztcbmNvbnN0IFVQREFURV9WQVJJQU5UX1ZJU0lCSUxJVFlfU0NSSVBUX0ZOX05BTUUgPSAnYnVpbGRlcklvUmVuZGVyQ29udGVudCc7XG5leHBvcnQgY29uc3QgZ2V0VmFyaWFudHMgPSAoY29udGVudDogTnVsbGFibGU8QnVpbGRlckNvbnRlbnQ+KSA9PiBPYmplY3QudmFsdWVzKGNvbnRlbnQ/LnZhcmlhdGlvbnMgfHwge30pLm1hcCh2YXJpYW50ID0+ICh7XG4gIC4uLnZhcmlhbnQsXG4gIHRlc3RWYXJpYXRpb25JZDogdmFyaWFudC5pZCxcbiAgaWQ6IGNvbnRlbnQ/LmlkXG59KSk7XG5leHBvcnQgY29uc3QgY2hlY2tTaG91bGRSZW5kZXJWYXJpYW50cyA9ICh7XG4gIGNhblRyYWNrLFxuICBjb250ZW50XG59OiB7XG4gIGNhblRyYWNrOiBOdWxsYWJsZTxib29sZWFuPjtcbiAgY29udGVudDogTnVsbGFibGU8QnVpbGRlckNvbnRlbnQ+O1xufSkgPT4ge1xuICBjb25zdCBoYXNWYXJpYW50cyA9IGdldFZhcmlhbnRzKGNvbnRlbnQpLmxlbmd0aCA+IDA7XG5cbiAgLyoqXG4gICAqIFdlIGNhbm5vdCBTU1IgaW4gUmVhY3QtTmF0aXZlLlxuICAgKi9cbiAgaWYgKFRBUkdFVCA9PT0gJ3JlYWN0TmF0aXZlJykgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWhhc1ZhcmlhbnRzKSByZXR1cm4gZmFsc2U7XG4gIGlmICghY2FuVHJhY2spIHJldHVybiBmYWxzZTtcblxuICAvKipcbiAgICogRm9yIFZ1ZSBhbmQgU3ZlbHRlLCB3ZSBuZWVkIHRvIChpbml0aWFsbHkpIHJlbmRlciB0aGUgdmFyaWFudHMuIFRoaXMgaXMgdG8gYXZvaWQgaHlkcmF0aW9uIG1pc21hdGNoIGVycm9ycy5cbiAgICpcbiAgICogVW5saWtlIFJlYWN0LCBWdWUncyBoeWRyYXRpb24gY2hlY2tzIGFyZSBzaGFsbG93IGFuZCBkbyBub3QgY2hlY2sgdGhlIGF0dHJpYnV0ZXMvY29udGVudHMgb2YgZWFjaCBlbGVtZW50LCBzbyB3ZVxuICAgKiBhcmUgYWJsZSB0byBtb2RpZnkgdGhlIGBoaWRkZW5gIEhUTUwgYXR0cmlidXRlcyBhbmQgYGRpc3BsYXlgIENTUyBwcm9wZXJ0aWVzIHdpdGhvdXQgY2F1c2luZyBhIGh5ZHJhdGlvbiBtaXNtYXRjaCBlcnJvci5cbiAgICpcbiAgICogTk9URTogRm9yIFNvbGlkL1N2ZWx0ZTogYWZ0ZXIgdGhlIGFwcCBpcyBoeWRyYXRlZCwgd2Ugc3RyaXAgdGhlIHZhcmlhbnRzIGZyb20gdGhlIERPTSAob24gbW91bnQpIHRvIHJlZHVjZSB0aGUgYW1vdW50IG9mIEhUTUwgaW4gdGhlIERPTS5cbiAgICogVGhpcyBpc24ndCBuZWNlc3NhcnksIGp1c3QgYSBuaWNlIHRvIGhhdmUuXG4gICAqL1xuICBpZiAoVEFSR0VUID09PSAndnVlJyB8fCBUQVJHRVQgPT09ICdzdmVsdGUnKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKGlzQnJvd3NlcigpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufTtcbnR5cGUgVmFyaWFudERhdGEgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHRlc3RSYXRpbz86IG51bWJlcjtcbn07XG5jb25zdCBnZXRJc0h5ZHJhdGlvblRhcmdldCA9ICh0YXJnZXQ6IFRhcmdldCkgPT4gdGFyZ2V0ID09PSAncmVhY3QnIHx8IHRhcmdldCA9PT0gJ3JlYWN0TmF0aXZlJztcbmNvbnN0IGlzSHlkcmF0aW9uVGFyZ2V0ID0gZ2V0SXNIeWRyYXRpb25UYXJnZXQoVEFSR0VUKTtcbmV4cG9ydCBjb25zdCBnZXRJbml0VmFyaWFudHNGbnNTY3JpcHRTdHJpbmcgPSAoKSA9PiBgXG4gIHdpbmRvdy4ke1VQREFURV9DT09LSUVTX0FORF9TVFlMRVNfU0NSSVBUX05BTUV9ID0gJHtVUERBVEVfQ09PS0lFU19BTkRfU1RZTEVTX1NDUklQVH1cbiAgd2luZG93LiR7VVBEQVRFX1ZBUklBTlRfVklTSUJJTElUWV9TQ1JJUFRfRk5fTkFNRX0gPSAke1VQREFURV9WQVJJQU5UX1ZJU0lCSUxJVFlfU0NSSVBUfVxuICBgO1xuZXhwb3J0IGNvbnN0IGdldFVwZGF0ZUNvb2tpZUFuZFN0eWxlc1NjcmlwdCA9ICh2YXJpYW50czogVmFyaWFudERhdGFbXSwgY29udGVudElkOiBzdHJpbmcpID0+IGBcbiAgd2luZG93LiR7VVBEQVRFX0NPT0tJRVNfQU5EX1NUWUxFU19TQ1JJUFRfTkFNRX0oXG4gICAgXCIke2NvbnRlbnRJZH1cIiwke0pTT04uc3RyaW5naWZ5KHZhcmlhbnRzKX0sICR7aXNIeWRyYXRpb25UYXJnZXR9XG4gIClgO1xuZXhwb3J0IGNvbnN0IGdldFVwZGF0ZVZhcmlhbnRWaXNpYmlsaXR5U2NyaXB0ID0gKHtcbiAgY29udGVudElkLFxuICB2YXJpYXRpb25JZFxufToge1xuICB2YXJpYXRpb25JZDogc3RyaW5nO1xuICBjb250ZW50SWQ6IHN0cmluZztcbn0pID0+IGB3aW5kb3cuJHtVUERBVEVfVkFSSUFOVF9WSVNJQklMSVRZX1NDUklQVF9GTl9OQU1FfShcbiAgICBcIiR7dmFyaWF0aW9uSWR9XCIsIFwiJHtjb250ZW50SWR9XCIsICR7aXNIeWRyYXRpb25UYXJnZXR9XG4gIClgIl19
import { reflectComponentType, Component, ViewChild, Input, } from "@angular/core";
import { CommonModule } from "@angular/common";
import { getBlockActions } from "../../../functions/get-block-actions";
import { getBlockProperties } from "../../../functions/get-block-properties";
import Awaiter from "../../awaiter";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export default class InteractiveElement {
    get attributes() {
        return this.includeBlockProps
            ? {
                ...getBlockProperties({
                    block: this.block,
                    context: this.context,
                }),
                ...getBlockActions({
                    block: this.block,
                    rootState: this.context.rootState,
                    rootSetState: this.context.rootSetState,
                    localState: this.context.localState,
                    context: this.context.context,
                }),
            }
            : {};
    }
    constructor(vcRef, renderer) {
        this.vcRef = vcRef;
        this.renderer = renderer;
        this.mergedInputs_atkjh2 = {};
        this._listenerFns = new Map();
    }
    ngOnInit() {
        this.mergedInputs_atkjh2 = {
            ...this.filterPropsThatWrapperNeeds(this.wrapperProps),
            ...(this.hasAttributesInput(this.Wrapper) ? { attributes: this.attributes } : {})
        };
        this.myContent = [
            this.vcRef.createEmbeddedView(this.wrapperTemplateRef).rootNodes,
        ];
    }
    hasAttributesInput(component) {
        return !!reflectComponentType(component)?.inputs.find(input => input.propName === 'attributes');
    }
    updateAttributes(el, attributes) {
        Object.keys(attributes).forEach((attr) => {
            if (attr.startsWith("on")) {
                if (this._listenerFns.has(attr)) {
                    this._listenerFns.get(attr)();
                }
                this._listenerFns.set(attr, this.renderer.listen(el, attr.replace("on", "").toLowerCase(), attributes[attr]));
            }
            else if (attr === 'class' && attributes[attr]) {
                const classes = attributes[attr].split(' ');
                classes.forEach((cls) => this.renderer.addClass(el, cls.trim()));
            }
            else {
                this.renderer.setAttribute(el, attr.toLowerCase(), attributes[attr] ?? "");
            }
        });
    }
    ngAfterViewInit() {
        if (!this.hasAttributesInput(this.Wrapper)) {
            const wrapperElement = this.wrapperTemplateRef.elementRef.nativeElement?.nextElementSibling;
            if (wrapperElement) {
                this.updateAttributes(wrapperElement, this.attributes);
            }
        }
    }
    ngOnDestroy() {
        for (const fn of this._listenerFns.values()) {
            fn();
        }
    }
    filterPropsThatWrapperNeeds(allProps) {
        const definedPropNames = reflectComponentType(this.Wrapper).inputs.map(prop => prop.propName);
        return definedPropNames.reduce((acc, propName) => {
            acc[propName] = allProps[propName];
            return acc;
        }, {});
    }
    ngOnChanges(changes) {
        if (changes["attributes"] && !this.hasAttributesInput(this.Wrapper)) {
            this.ngAfterViewInit();
        }
        if (typeof window !== "undefined") {
            this.mergedInputs_atkjh2 = {
                ...this.filterPropsThatWrapperNeeds(this.wrapperProps),
                ...(this.hasAttributesInput(this.Wrapper) ? { attributes: this.attributes } : {})
            };
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: InteractiveElement, deps: [{ token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: InteractiveElement, isStandalone: true, selector: "interactive-element", inputs: { includeBlockProps: "includeBlockProps", block: "block", context: "context", Wrapper: "Wrapper", wrapperProps: "wrapperProps" }, viewQueries: [{ propertyName: "wrapperTemplateRef", first: true, predicate: ["wrapperTemplate"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `
    <ng-template #wrapperTemplate><ng-content></ng-content></ng-template>
    <ng-container *ngIf="Wrapper.load">
      <awaiter
        [load]="Wrapper.load"
        [fallback]="Wrapper.fallback"
        [props]="wrapperProps"
        [attributes]="attributes"
      >
        <ng-content></ng-content>
      </awaiter>
    </ng-container>
    <ng-container *ngIf="!(Wrapper.load)">
      <ng-container
        *ngComponentOutlet="
              Wrapper;
              inputs: mergedInputs_atkjh2;
              content: myContent;
              "
      ></ng-container>
    </ng-container>
  `, isInline: true, styles: [":host{display:contents}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: Awaiter, selector: "awaiter", inputs: ["load", "props", "attributes", "fallback"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: InteractiveElement, decorators: [{
            type: Component,
            args: [{ selector: "interactive-element", template: `
    <ng-template #wrapperTemplate><ng-content></ng-content></ng-template>
    <ng-container *ngIf="Wrapper.load">
      <awaiter
        [load]="Wrapper.load"
        [fallback]="Wrapper.fallback"
        [props]="wrapperProps"
        [attributes]="attributes"
      >
        <ng-content></ng-content>
      </awaiter>
    </ng-container>
    <ng-container *ngIf="!(Wrapper.load)">
      <ng-container
        *ngComponentOutlet="
              Wrapper;
              inputs: mergedInputs_atkjh2;
              content: myContent;
              "
      ></ng-container>
    </ng-container>
  `, standalone: true, imports: [CommonModule, Awaiter], styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { includeBlockProps: [{
                type: Input
            }], block: [{
                type: Input
            }], context: [{
                type: Input
            }], Wrapper: [{
                type: Input
            }], wrapperProps: [{
                type: Input
            }], wrapperTemplateRef: [{
                type: ViewChild,
                args: ["wrapperTemplate", { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,